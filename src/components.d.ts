/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    /**
     * @name Accordion
     * @description An accordion is a vertically stacked list of headers that reveal or hide associated sections of content.
     * @category Data Display
     * @tags display
     * @img /assets/img/accordion.png
     * @imgDark /assets/img/accordion-dark.png
     */
    interface GoatAccordion {
        "align": 'start' | 'end';
        "multiple": boolean;
        /**
          * The According size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
         */
        "size": 'sm' | 'md' | 'lg';
    }
    interface GoatAccordionItem {
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled": boolean;
        /**
          * The menu item value.
         */
        "heading": string;
        "icon": boolean;
        /**
          * Menu item selection state.
         */
        "open": boolean;
    }
    /**
     * @name Avatar
     * @description Avatars in their simplest form display content within a circular container.
     * @category Data Display
     * @tags display
     * @example <goat-avatar size="5rem" name="Shivaji Varma" src="/assets/img/avatar.png"></goat-avatar>
     */
    interface GoatAvatar {
        "name": string;
        /**
          * Avatar size.
         */
        "size": string;
        "src": string;
    }
    /**
     * @name Badge
     * @description Renders a specified badge.
     * @category Data Display
     * @tag content
     * @example <goat-badge content="5" class='color-error'> <goat-icon name="notification" size="lg"></goat-icon></goat-badge>
     */
    interface GoatBadge {
        "content": string;
    }
    /**
     * @name Breadcrumb
     * @description Typography are used for rendering headlines, paragraphs and captions.
     * @category Navigation
     * @tags navigation
     * @example <goat-breadcrumb><goat-breadcrumb-item href="#">Home</goat-breadcrumb-item><goat-breadcrumb-item href="#" active>Page</goat-breadcrumb-item></goat-breadcrumb>
     */
    interface GoatBreadcrumb {
    }
    interface GoatBreadcrumbItem {
        "active": boolean;
        /**
          * Hyperlink to navigate to on click.
         */
        "href": string;
        "position": string;
        /**
          * Sets or retrieves the window or frame at which to target content.
         */
        "target": string;
    }
    /**
     * @name Button
     * @description An interactive button with a range of presentation options.
     * @category General
     * @tags controls
     * @example <goat-button>
     * Button CTA
     * </goat-button>
     */
    interface GoatButton {
        "color": 'primary' | 'secondary' | 'success' | 'danger' | 'brand-primary' | 'brand-secondary' | 'dark' | 'light';
        "configAria": any;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled": boolean;
        "disabledReason": string;
        /**
          * Hyperlink to navigate to on click.
         */
        "href": string;
        /**
          * Icon which will displayed on button. Possible values are icon names.
         */
        "icon": string;
        /**
          * Icon position.
         */
        "iconAlign": 'start' | 'end';
        /**
          * Icon size.
         */
        "iconSize": 'sm' | 'md' | 'lg' | string;
        /**
          * Button kind. Possible values are `"default"`, `"simple"`, `"block"`. Defaults to `"default"`. `"default"` is a long button. `"simple"` is a text-only button. `"block"` is a full-width button.
         */
        "kind": 'default' | 'simple' | 'block';
        /**
          * Button selection state.
         */
        "selected": boolean;
        /**
          * Sets blur on the native `button` in `goat-button`. Use this method instead of the global `button.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `button` in `goat-button`. Use this method instead of the global `button.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * Show loader.
         */
        "showLoader": boolean;
        /**
          * Button size. Possible values are `"sm"`, `"md"`, `"lg"`, `"xl"`, `"xxl"`, `"full"`. Defaults to `"md"`.
         */
        "size": 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'full';
        /**
          * Sets or retrieves the window or frame at which to target content.
         */
        "target": string;
        "triggerClick": () => Promise<void>;
        "type": 'button' | 'submit' | 'reset';
        /**
          * Button variants. Possible values are `"default"`, `"outline"`, `"ghost"`. Defaults to `"default"`. `"default"` is a filled button. `"outline"` is an outlined button. `"ghost"` is a transparent button.
         */
        "variant": 'default' | 'outline' | 'ghost' | 'light' | 'link';
    }
    /**
     * @name Button Group
     * @description Group a series of buttons together on a single line with the button group, and super-power.
     * @category General
     * @tags controls
     * @example <goat-button-group>
     * <goat-button block icon="home"></goat-button>
     * <goat-button block icon="alarm"></goat-button>
     * </goat-button-group>
     */
    interface GoatButtonGroup {
    }
    /**
     * @name Calendar
     * @description The calendar component is used to display information in a daily, weekly, monthly, or category view.
     * @category Data Display
     * @tags calendar
     * @img /assets/img/calendar.png
     * @imgDark /assets/img/calendar-dark.png
     */
    interface GoatCalendar {
        "availableViews": any;
        "contextDate": any;
        "eventClickable": boolean;
        "events": any[];
        /**
          * Show loader.
         */
        "showLoader": boolean;
        "timezone": any;
        "view": string;
    }
    interface GoatCalendarColumnView {
        "contextDate": Date;
        "currentTime": Date;
        "days": number;
        "eventClickable": boolean;
        "events": any[];
        "view": string;
    }
    interface GoatCalendarColumnViewBackground {
        "columns": number;
    }
    interface GoatCalendarMonthView {
        "contextDate": Date;
        "currentTime": Date;
        "eventClickable": boolean;
        "events": any[];
    }
    interface GoatCalendarMonthViewBackground {
        "columns": number;
    }
    /**
     * @name Canvas
     * @category Up coming
     * @description Canvas for drawing lines and shapes on.
     * @img /assets/img/canvas.png
     */
    interface GoatCanvas {
        "padding": number;
        "shapes": any[];
        "viewbox"?: string;
        "zoom": number;
    }
    interface GoatCard {
        "shadowLevel": 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | undefined;
    }
    interface GoatCbCompoundExpression {
        "conditionOperator": 'and' | 'or';
        "fieldLabel": string;
        "fieldName": string;
    }
    interface GoatCbDivider {
        "connectEnd": boolean;
        "connectStart": boolean;
        "vertical": boolean;
    }
    interface GoatCbExpression {
        "operatorValue": string;
        "operators": any[];
    }
    interface GoatCbPredicate {
        "conditionOperator": 'and' | 'or';
        "vertical": boolean;
    }
    /**
     * @name Checkbox
     * @description Captures boolean input with an optional indeterminate mode.
     * @category Form Inputs
     * @tags input, form
     * @example <goat-checkbox value='true'>Want ice cream?</goat-checkbox>
     */
    interface GoatCheckbox {
        "configAria": any;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled": boolean;
        "getComponentId": () => Promise<string>;
        "intermediate": boolean;
        /**
          * The checkbox label.
         */
        "label": string;
        /**
          * The input field name.
         */
        "name": string;
        "readonly": boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
         */
        "required": boolean;
        "rounded": boolean;
        /**
          * Sets blur on the native `input` in `goat-input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input` in `goat-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The button size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
         */
        "size": 'sm' | 'md' | 'lg';
        /**
          * The input field value.
         */
        "value": boolean;
    }
    /**
     * @name Code Editor
     * @description A browser based code editor.
     * @category Form Inputs
     * @tags input, form
     * @img /assets/img/code-editor.png
     * @imgDark /assets/img/code-editor-dark.png
     */
    interface GoatCodeEditor {
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `onChange` event after each keystroke.
         */
        "debounce": number;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled": boolean;
        "getComponentId": () => Promise<string>;
        "language": 'javascript' | 'json' | 'html';
        "lineNumbers": 'off' | 'on';
        /**
          * The input field name.
         */
        "name": string;
        "readonly": boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
         */
        "required": boolean;
        /**
          * Sets blur on the native `input` in `goat-input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input` in `goat-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The input field value.
         */
        "value": string;
    }
    /**
     * @name Code Highlighter
     * @description A browser based code highlighter.
     * @category Data Display
     * @tag display, code
     * @img /assets/img/code-highlighter.png
     * @imgDark /assets/img/code-highlighter-dark.png
     */
    interface GoatCodeHighlighter {
        "format": boolean;
        "language": string;
        "lineNumbers": boolean;
        "value": string;
    }
    /**
     * @name Condition Builder
     * @description A condition builder is a component that allows users to build a condition using a set of rules.
     * @category Up coming
     * @category Data Display
     * @tag content
     * @img /assets/img/condition-builder.png
     */
    interface GoatConditionBuilder {
        "content": string;
    }
    interface GoatContainer {
        "vertical": boolean;
    }
    /**
     * @name Current Time
     * @description The current time component displays the current time in a 12-hour format.
     * @category General
     * @tags controls
     * @example <goat-current-time></goat-current-time>
     */
    interface GoatCurrentTime {
        "timezone": string;
    }
    /**
     * @name Date Picker
     * @category Form Inputs
     * @description Captures date input.
     * @example <goat-date-picker value='true'></goat-date-picker>
     */
    interface GoatDatePicker {
        "configAria": any;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `goatChange` event after each keystroke.
         */
        "debounce": number;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled": boolean;
        "getComponentId": () => Promise<string>;
        "inline": boolean;
        /**
          * The input field name.
         */
        "name": string;
        /**
          * The input field placeholder.
         */
        "placeholder": string;
        /**
          * If true, the user read the value cannot modify it. Defaults to `false`.
         */
        "readonly": boolean;
        /**
          * Sets blur on the native `input` in `goat-input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input` in `goat-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The input field size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
         */
        "size": 'sm' | 'md' | 'lg';
        /**
          * The input field value.
         */
        "value"?: string | number | null;
    }
    /**
     * @name Divider
     * @description A divider can be used to segment content vertically or horizontally.
     * @category Layout
     * @example <goat-divider style="width: 12rem;">or</goat-divider>
     */
    interface GoatDivider {
        "vertical": boolean;
    }
    /**
     * @name Dropdown
     * @description Enables native inputs to be used within a Form field.
     * @category Navigation
     * @img /assets/img/dropdown.png
     * @imgDark /assets/img/dropdown-dark.png
     */
    interface GoatDropdown {
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled": boolean;
        "isOpen": boolean;
        "items": any[];
        "positions": string;
        "setFocus": (elm?: HTMLElement) => Promise<void>;
        /**
          * The button size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
         */
        "size": 'sm' | 'md' | 'lg';
    }
    /**
     * @name Empty State
     * @description A message that displays when there is no information to display.
     * @category Data Display
     * @example <goat-empty-state class="content-center" headline="Empty list" description="Nothing to display">
     * </goat-empty-state>
     */
    interface GoatEmptyState {
        "action": string;
        "actionDisabled": boolean;
        "actionUrl": string;
        "actionVariant": 'default' | 'outline' | 'ghost' | 'link';
        "description": string;
        "headline": string;
        "illustration": 'no-document';
    }
    /**
     * @name Flow Designer
     * @category Up coming
     * @description An interactive button with a range of presentation options.
     * @img /assets/img/flow-designer.png
     */
    interface GoatFlowDesigner {
        "blockSize": number;
        "data": any[];
        "disabled": boolean;
    }
    /**
     * @name Form Control
     * @description The Form Control component adds a label and caption for its child control.
     * @category Form Inputs
     * @tags form
     * @example <goat-form-control label='Full Name' required>
     * <goat-input type='text'></goat-input>
     * </goat-form-control>
     */
    interface GoatFormControl {
        /**
          * The caption for the form control.
         */
        "caption": string;
        "error": string;
        "inline": boolean;
        /**
          * The label for the form control.
         */
        "label": string;
        /**
          * Whether the form control is required.
         */
        "required": boolean;
        "success": string;
        "warning": string;
    }
    /**
     * @name Header
     * @description Headers are compositions that extend standard navbar functionalities.
     * @category Navigation
     * @img /assets/img/header.png
     * @imgDark /assets/img/header-dark.png
     */
    interface GoatHeader {
        "float": boolean;
    }
    interface GoatHeaderAction {
        "badge": string;
        "color": 'primary' | 'secondary' | 'success' | 'danger' | 'brand-primary' | 'brand-secondary';
        /**
          * Hyperlink to navigate to on click.
         */
        "href": string;
        /**
          * Icon which will displayed on button. Possible values are icon names.
         */
        "icon": string;
        /**
          * Button selection state.
         */
        "selected": boolean;
        /**
          * Button size. Possible values are `"sm"`, `"md"`, `"lg"`, `"xl"`, `"xxl"`, `"none"`. Defaults to `"md"`.
         */
        "size": 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'none';
        /**
          * Sets or retrieves the window or frame at which to target content.
         */
        "target": string;
        "variant": 'default' | 'outline' | 'ghost' | 'link';
    }
    interface GoatHeaderBrand {
        "color": string;
        "href": string;
        "logo": string;
        "name": string;
        "subTitle": string;
    }
    /**
     * @name HTML Editor
     * @description A browser based html editor.
     * @category Up coming
     * @tags input, form
     * @img /assets/img/html-editor.png
     * @imgDark /assets/img/html-editor-dark.png
     */
    interface GoatHtmlEditor {
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `onChange` event after each keystroke.
         */
        "debounce": number;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled": boolean;
        "getComponentId": () => Promise<string>;
        "lineNumbers": 'off' | 'on';
        /**
          * The input field name.
         */
        "name": string;
        "readonly": boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
         */
        "required": boolean;
        /**
          * Sets blur on the native `input` in `goat-input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input` in `goat-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        "theme": 'vs-light' | 'vs-dark';
        /**
          * The input field value.
         */
        "value": string;
    }
    /**
     * @name Icon
     * @description Icons are visual symbols used to represent ideas, objects, or actions. They communicate messages at a glance, afford interactivity, and draw attention to important information.
     * @category General
     * @example <goat-icon name="home" size="2rem"></goat-icon>
     */
    interface GoatIcon {
        "name": string;
        /**
          * The Icon size.
         */
        "size": string;
    }
    interface GoatImage {
        "darkSrc": string;
        "imageTitle": string;
        "src": string;
    }
    /**
     * @name Input
     * @description Enables native inputs to be used within a Form field.
     * @category Form Inputs
     * @tags input, form
     * @example <goat-input placeholder="Enter your name"></goat-input>
     */
    interface GoatInput {
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
         */
        "autocomplete": 'on' | 'off';
        /**
          * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
         */
        "clearable": boolean;
        "configAria": any;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `goatChange` event after each keystroke.
         */
        "debounce": number;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled": boolean;
        "getComponentId": () => Promise<string>;
        "hideActions": boolean;
        "inline": boolean;
        /**
          * The input field name.
         */
        "name": string;
        /**
          * The input field placeholder.
         */
        "placeholder": string;
        /**
          * If true, the user read the value cannot modify it. Defaults to `false`.
         */
        "readonly": boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
         */
        "required": boolean;
        /**
          * Sets blur on the native `input` in `goat-input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input` in `goat-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The input field size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
         */
        "size": 'sm' | 'md' | 'lg';
        /**
          * The input state. Possible values are: `"success"`, `"error"`, `"warning"`, 'default'. Defaults to `"default"`.
         */
        "state": 'success' | 'error' | 'warning' | 'default';
        /**
          * The type of control to display. Possible values are: `"text"`, `"password"`, `"email"`, `"tel"`. Defaults to `"text"`.
         */
        "type": 'text' | 'password' | 'email' | 'tel';
        /**
          * The input field value.
         */
        "value"?: string | number | null;
    }
    /**
     * @name Link
     * @description Links allow users to click their way from page to page.
     * @category Navigation
     * @example <goat-link href="#">Link</goat-link>
     */
    interface GoatLink {
        /**
          * Hyperlink to navigate to on click.
         */
        "href": string;
        /**
          * Sets or retrieves the window or frame at which to target content.
         */
        "target": string;
        "triggerClick": () => Promise<void>;
    }
    /**
     * @name Menu
     * @description Menus display a list of choices on temporary surfaces.
     * @category Navigation
     * @img /assets/img/menu.png
     * @imgDark /assets/img/menu-dark.png
     */
    interface GoatMenu {
        "empty": boolean;
        "emptyState": any;
        /**
          * Sets focus on first menu item. Use this method instead of the global `element.focus()`.
         */
        "setFocus": () => Promise<void>;
        "showLoader": boolean;
        "value"?: string | number;
    }
    interface GoatMenuItem {
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled": boolean;
        /**
          * Menu item selection state.
         */
        "selected": boolean;
        /**
          * Sets blur on the native `input` in `goat-input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input` in `goat-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The menu item value.
         */
        "value"?: string | number | null;
    }
    /**
     * @name Modal
     * @description Modals are used to display content in a layer above the app.
     * @tags controls
     */
    interface GoatModal {
        "show": boolean;
    }
    /**
     * @name Notification
     * @description Notifications are messages that communicate information to the user.
     * @category Feedback
     * @tags notification
     * @example <goat-notification state="success">
     *      <div slot='title'>Successful saved the record</div>
     *    </goat-notification>
     */
    interface GoatNotification {
        "actionLabel": string;
        "actionName": string;
        "actionable": boolean;
        "dismissible": boolean;
        "lowContrast": boolean;
        "state": 'success' | 'error' | 'info' | 'warning';
    }
    /**
     * @name Notification Manager
     * @description Manages alert, toasts and notifications.
     * @category Feedback
     * @tags notification
     * @img /assets/img/notification-manager.png
     * @imgDark /assets/img/notification-manager-dark.png
     */
    interface GoatNotificationManager {
        "name": string;
        "position": 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left';
    }
    /**
     * @name Number
     * @description Enables native inputs to be used within a Form field.
     * @category Form Inputs
     * @tags input, form
     * @example <goat-number value="100"></goat-input>
     */
    interface GoatNumber {
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
         */
        "autocomplete": 'on' | 'off';
        /**
          * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
         */
        "clearable": boolean;
        "configAria": any;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `goatChange` event after each keystroke.
         */
        "debounce": number;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled": boolean;
        "getComponentId": () => Promise<string>;
        "hideActions": boolean;
        /**
          * The input field name.
         */
        "name": string;
        /**
          * The input field placeholder.
         */
        "placeholder": string;
        /**
          * If true, the user read the value cannot modify it. Defaults to `false`.
         */
        "readonly": boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
         */
        "required": boolean;
        /**
          * Sets blur on the native `input` in `goat-input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input` in `goat-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The input field size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
         */
        "size": 'sm' | 'md' | 'lg';
        /**
          * The input state. Possible values are: `"success"`, `"error"`, `"warning"`, 'default'. Defaults to `"default"`.
         */
        "state": 'success' | 'error' | 'warning' | 'default';
        /**
          * The input field value.
         */
        "value"?: number | null;
    }
    /**
     * @name Progress
     * @description Progress indicators express an unspecified wait time or display the length of a process.
     * @category Feedback
     * @tags feedback, loading, progress, spinner
     * @example <goat-progress value="40" label="Progress" width="100%" helper-text="Optional helper text goes here..."></goat-progress>
     */
    interface GoatProgress {
        "helperText": string;
        "hideLabel": boolean;
        "label": string;
        /**
          * Possible values are: `"sm"` and `"md"` in pixel. Defaults to `"md"`.
         */
        "size": 'sm' | 'md';
        "status": 'active' | 'success' | 'error';
        "value": number;
    }
    /**
     * @name Select
     * @description Allows the user to select one or more options using a dropdown.
     * @category Form Inputs
     * @tags input, form
     * @img /assets/img/select.png
     * @imgDark /assets/img/select-dark.png
     */
    interface GoatSelect {
        /**
          * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
         */
        "clearable": boolean;
        "configAria": any;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `goatChange` event after each keystroke.
         */
        "debounce": number;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled": boolean;
        "getComponentId": () => Promise<string>;
        "hideDropdownIcon": boolean;
        "inline": boolean;
        "isOpen": boolean;
        /**
          * [{   label: 'Shivaji Varma',   value: 'shivaji-varma',   icon: 'person' }]
         */
        "items": any;
        "multiple": boolean;
        /**
          * The input field name.
         */
        "name": string;
        /**
          * The input field placeholder.
         */
        "placeholder": string;
        "positions": string;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "readonly": boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
         */
        "required": boolean;
        /**
          * Search type Possible values are `"none"`, `"initial"`, `"contains"`, `"managed"`. Defaults to `"none"`.
         */
        "search": 'none' | 'initial' | 'contains' | 'managed';
        /**
          * Sets blur on the native `input` in `goat-input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input` in `ion-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        "showLoader": boolean;
        /**
          * The select input size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
         */
        "size": 'sm' | 'md' | 'lg';
        /**
          * The input state. Possible values are: `"success"`, `"error"`, `"warning"`, 'default'. Defaults to `"default"`.
         */
        "state": 'success' | 'error' | 'warning' | 'default';
        /**
          * The input field value.
         */
        "value"?: string | number;
    }
    /**
     * @name1 Side Navigation
     * @description1 The side navigation component provides an easy way to navigate through your website / application.
     * @img1 /assets/img/sidenav.png
     */
    interface GoatSidenav {
        "showLoader": boolean;
    }
    interface GoatSidenavMenu {
        "empty": boolean;
        "emptyState": any;
        /**
          * Sets focus on first menu item. Use this method instead of the global `element.focus()`.
         */
        "setFocus": () => Promise<void>;
        "showLoader": boolean;
        "value"?: string | number;
    }
    interface GoatSidenavMenuItem {
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled": boolean;
        /**
          * Menu item selection state.
         */
        "selected": boolean;
        /**
          * Sets blur on the native `input` in `goat-input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input` in `goat-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The menu item value.
         */
        "value"?: string | number | null;
    }
    /**
     * @name Slider
     * @description Allows the user to select one or more options using a dropdown.
     * @category Form Inputs
     * @tags input, form
     * @img /assets/img/slider.png
     * @imgDark /assets/img/slider-dark.png
     */
    interface GoatSlider {
        "configAria": any;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `goatChange` event after each keystroke.
         */
        "debounce": number;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled": boolean;
        "getComponentId": () => Promise<string>;
        "max": number;
        "min": number;
        /**
          * The input field name.
         */
        "name": string;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "readonly": boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
         */
        "required": boolean;
        /**
          * Sets blur on the native `input` in `goat-input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input` in `ion-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The input field value.
         */
        "value"?: number;
    }
    /**
     * @name Spinner
     * @description Spinners provide a visual cue that an action is processing awaiting a course of change or a result.
     * @category Feedback
     * @tags feedback, loading, progress, spinner
     * @example <goat-spinner class="rainbow" size="2rem"></goat-spinner>
     */
    interface GoatSpinner {
        /**
          * The Icon size. Possible values are: `"sm"`, `"md"`, `"lg"`, `"xl"` and size in pixel. Defaults to `"md"`.
         */
        "size": 'sm' | 'md' | 'lg' | 'xl' | string;
    }
    /**
     * @name SVG
     * @description Render SVG content from an external source.
     * @category Data Display
     * @example <goat-svg src="https://icons.getbootstrap.com/assets/icons/bug.svg" size="2rem"></goat-svg>
     */
    interface GoatSvg {
        /**
          * The Icon size.
         */
        "size": string;
        "src": string;
    }
    interface GoatTab {
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled": boolean;
        "disabledReason": string;
        /**
          * Icon which will displayed on button. Possible values are bootstrap icon names.
         */
        "icon": string;
        "label": string;
        /**
          * Button selection state.
         */
        "selected": boolean;
        "setFocus": () => Promise<void>;
        /**
          * Show loader.
         */
        "showLoader": boolean;
        "target": string;
        "triggerClick": () => Promise<void>;
        "value": string;
    }
    interface GoatTabPanel {
        "active": boolean;
        "value": string;
    }
    /**
     * @name Table
     * @description A configurable component for displaying tabular data.
     * @category Data Display
     * @img /assets/img/table.png
     * @imgDark /assets/img/table-dark.png
     */
    interface GoatTable {
        /**
          * Grid columns configuration. [ {   "name":"name",   "label":"Name",   "width":300,   "fixed":true,   "template": function(row, column) { return row[column.name];}  }, {   "name":"age",   "label":"Age" } ]
         */
        "columns": any[];
        /**
          * Grid data to display on table [{  'id': '5e7118ddce4b3d577956457f',  'age': 21,  'name': 'John',  'company': 'India',  'email': 'john@example.com',  'phone': '+1 (839) 560-3581',  'address': '326 Irving Street, Grimsley, Texas, 4048'  }]
         */
        "data": any[];
        "emptyState": any;
        "keyField": string;
        "managed": boolean;
        "page": number;
        "pageSize": number;
        "paginate": boolean;
        "selectedRowKeys": string[];
        "selectionType": 'checkbox' | undefined;
        "sortBy": string;
        "sortOrder": 'asc' | 'desc';
        "sortable": boolean;
        "totalItems": any;
    }
    /**
     * @name Tabs
     * @description An interactive button with a range of presentation options.
     * @category Navigation
     * @tags navigation
     * @example <goat-tabs>
     * <goat-tabs-list>
     * <goat-tab selected >Tab 1</goat-tab>
     * <goat-tab>Tab 2</goat-tab>
     * </goat-tabs-list>
     * </goat-tabs>
     */
    interface GoatTabs {
    }
    interface GoatTabsList {
        "managed": boolean;
        "variant": 'line' | 'contained';
    }
    /**
     * @name Tag
     * @description Use tags to label, categorize, or organize items using keywords that describe them.
     * @category Data Display
     * @tag controls
     * @example <goat-tag class="color-red">Important</goat-tag>
     */
    interface GoatTag {
        "color": 'gray' | 'blue' | 'green' | 'red' | 'yellow' | 'primary' | 'success' | 'info' | 'warning' | 'error';
        "filter": boolean;
        "imageSrc": string;
        /**
          * Text size.
         */
        "size": 'sm' | 'md';
        "value": string;
    }
    /**
     * @name Text
     * @description Typography are used for rendering headlines, paragraphs and captions.
     * @category General
     * @example <goat-text type="heading" level="1">Heading</goat-typography>
     */
    interface GoatText {
        "color": 'primary' | 'secondary' | 'tertiary' | 'helper' | 'error' | 'on-color' | 'inverse';
        "configAria": any;
        "expressive": boolean;
        "headingLevel": 1 | 2 | 3 | 4 | 5 | 6;
        "headingSize": 1 | 2 | 3 | 4 | 5 | 6 | 7;
        "inline": boolean;
        "type": 'code' | 'helper-text' | 'label' | 'legal' | 'heading' | 'body' | 'body-compact' | 'heading-compact';
    }
    /**
     * @name Textarea
     * @description Enables native inputs to be used within a Form field.
     * @category Form Inputs
     * @tags input, form
     * @example <goat-textarea placeholder="Enter some description over here"></goat-textarea>
     */
    interface GoatTextarea {
        /**
          * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
         */
        "clearable": boolean;
        "configAria": any;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `goat:change` event after each keystroke.
         */
        "debounce": number;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled": boolean;
        "getComponentId": () => Promise<string>;
        /**
          * The input field name.
         */
        "name": string;
        /**
          * The input field placeholder.
         */
        "placeholder": string;
        /**
          * If true, the user read the value cannot modify it. Defaults to `false`.
         */
        "readonly": boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
         */
        "required": boolean;
        /**
          * Sets blur on the native `textarea` in `goat-textarea`. Use this method instead of the global `textarea.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `textarea` in `goat-textarea`. Use this method instead of the global `textarea.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The input state. Possible values are: `"success"`, `"error"`, `"warning"`, 'default'. Defaults to `"default"`.
         */
        "state": 'success' | 'error' | 'warning' | 'default';
        /**
          * The input field value.
         */
        "value": string;
    }
    /**
     * @name Time Picker
     * @description Captures time input.
     * @category Form Inputs
     * @tags input, form
     * @example <goat-time-picker value='true'></goat-time-picker>
     */
    interface GoatTimePicker {
        "configAria": any;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled": boolean;
        "getComponentId": () => Promise<string>;
        "inline": boolean;
        /**
          * The input field name.
         */
        "name": string;
        /**
          * The input field placeholder.
         */
        "placeholder": string;
        /**
          * If true, the user read the value cannot modify it. Defaults to `false`.
         */
        "readonly": boolean;
        /**
          * Sets blur on the native `input` in `goat-input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input` in `goat-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The input field size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
         */
        "size": 'sm' | 'md' | 'lg';
        /**
          * The input field value.
         */
        "value"?: string | number | null;
    }
    /**
     * @name Toast
     * @description Toasts are lightweight notifications.
     * @category Feedback
     * @example <goat-toast state="success" message="Successful saved the record"></goat-toast>
     */
    interface GoatToast {
        /**
          * Message to display in the toast.
         */
        "message": string;
        /**
          * Toast state. Possible values are `"success"`, `"error"`, `"info"`, `"warning"`. Defaults to `"info"`.
         */
        "state": 'success' | 'error' | 'info' | 'warning';
    }
    /**
     * @name Toggle
     * @description Captures boolean input with an optional indeterminate mode.
     * @category Form Inputs
     * @tags input, form
     * @example <goat-toggle value='true'>Want ice cream?</goat-toggle>
     */
    interface GoatToggle {
        "configAria": any;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled": boolean;
        "getComponentId": () => Promise<string>;
        /**
          * The checkbox label.
         */
        "label": string;
        /**
          * The input field name.
         */
        "name": string;
        "readonly": boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
         */
        "required": boolean;
        "rounded": boolean;
        /**
          * Sets blur on the native `input` in `goat-input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input` in `goat-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The button size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
         */
        "size": 'md' | 'lg';
        /**
          * The input field value.
         */
        "value": boolean;
    }
    interface GoatTreeNode {
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled": boolean;
        "expanded": boolean;
        /**
          * Hyperlink to navigate to on click.
         */
        "href": string;
        "label": string;
        "level": number;
        /**
          * Menu item selection state.
         */
        "selectedNode": string;
        /**
          * Sets blur on the native `input` in `goat-input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input` in `goat-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The menu item value.
         */
        "value"?: string | number | null;
    }
    /**
     * @name TreeView
     * @description A tree view is a hierarchical structure that provides nested levels of navigation.
     * @category Navigation
     * @img /assets/img/tree-view.png
     * @imgDark /assets/img/tree-view-dark.png
     */
    interface GoatTreeView {
        "empty": boolean;
        "emptyState": string;
        "getSelectedNode": () => Promise<string>;
        "selectedNode": string;
        /**
          * Sets focus on first menu item. Use this method instead of the global `element.focus()`.
         */
        "setFocus": () => Promise<void>;
        "subscribeToSelect": (cb: any) => Promise<void>;
    }
}
export interface GoatAccordionItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoatAccordionItemElement;
}
export interface GoatButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoatButtonElement;
}
export interface GoatCalendarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoatCalendarElement;
}
export interface GoatCalendarColumnViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoatCalendarColumnViewElement;
}
export interface GoatCalendarMonthViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoatCalendarMonthViewElement;
}
export interface GoatCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoatCheckboxElement;
}
export interface GoatCodeEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoatCodeEditorElement;
}
export interface GoatDatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoatDatePickerElement;
}
export interface GoatHtmlEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoatHtmlEditorElement;
}
export interface GoatInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoatInputElement;
}
export interface GoatMenuItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoatMenuItemElement;
}
export interface GoatNotificationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoatNotificationElement;
}
export interface GoatNumberCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoatNumberElement;
}
export interface GoatSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoatSelectElement;
}
export interface GoatSidenavMenuItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoatSidenavMenuItemElement;
}
export interface GoatSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoatSliderElement;
}
export interface GoatTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoatTabElement;
}
export interface GoatTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoatTableElement;
}
export interface GoatTagCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoatTagElement;
}
export interface GoatTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoatTextareaElement;
}
export interface GoatTimePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoatTimePickerElement;
}
export interface GoatToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoatToggleElement;
}
export interface GoatTreeNodeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGoatTreeNodeElement;
}
declare global {
    /**
     * @name Accordion
     * @description An accordion is a vertically stacked list of headers that reveal or hide associated sections of content.
     * @category Data Display
     * @tags display
     * @img /assets/img/accordion.png
     * @imgDark /assets/img/accordion-dark.png
     */
    interface HTMLGoatAccordionElement extends Components.GoatAccordion, HTMLStencilElement {
    }
    var HTMLGoatAccordionElement: {
        prototype: HTMLGoatAccordionElement;
        new (): HTMLGoatAccordionElement;
    };
    interface HTMLGoatAccordionItemElement extends Components.GoatAccordionItem, HTMLStencilElement {
    }
    var HTMLGoatAccordionItemElement: {
        prototype: HTMLGoatAccordionItemElement;
        new (): HTMLGoatAccordionItemElement;
    };
    /**
     * @name Avatar
     * @description Avatars in their simplest form display content within a circular container.
     * @category Data Display
     * @tags display
     * @example <goat-avatar size="5rem" name="Shivaji Varma" src="/assets/img/avatar.png"></goat-avatar>
     */
    interface HTMLGoatAvatarElement extends Components.GoatAvatar, HTMLStencilElement {
    }
    var HTMLGoatAvatarElement: {
        prototype: HTMLGoatAvatarElement;
        new (): HTMLGoatAvatarElement;
    };
    /**
     * @name Badge
     * @description Renders a specified badge.
     * @category Data Display
     * @tag content
     * @example <goat-badge content="5" class='color-error'> <goat-icon name="notification" size="lg"></goat-icon></goat-badge>
     */
    interface HTMLGoatBadgeElement extends Components.GoatBadge, HTMLStencilElement {
    }
    var HTMLGoatBadgeElement: {
        prototype: HTMLGoatBadgeElement;
        new (): HTMLGoatBadgeElement;
    };
    /**
     * @name Breadcrumb
     * @description Typography are used for rendering headlines, paragraphs and captions.
     * @category Navigation
     * @tags navigation
     * @example <goat-breadcrumb><goat-breadcrumb-item href="#">Home</goat-breadcrumb-item><goat-breadcrumb-item href="#" active>Page</goat-breadcrumb-item></goat-breadcrumb>
     */
    interface HTMLGoatBreadcrumbElement extends Components.GoatBreadcrumb, HTMLStencilElement {
    }
    var HTMLGoatBreadcrumbElement: {
        prototype: HTMLGoatBreadcrumbElement;
        new (): HTMLGoatBreadcrumbElement;
    };
    interface HTMLGoatBreadcrumbItemElement extends Components.GoatBreadcrumbItem, HTMLStencilElement {
    }
    var HTMLGoatBreadcrumbItemElement: {
        prototype: HTMLGoatBreadcrumbItemElement;
        new (): HTMLGoatBreadcrumbItemElement;
    };
    /**
     * @name Button
     * @description An interactive button with a range of presentation options.
     * @category General
     * @tags controls
     * @example <goat-button>
     * Button CTA
     * </goat-button>
     */
    interface HTMLGoatButtonElement extends Components.GoatButton, HTMLStencilElement {
    }
    var HTMLGoatButtonElement: {
        prototype: HTMLGoatButtonElement;
        new (): HTMLGoatButtonElement;
    };
    /**
     * @name Button Group
     * @description Group a series of buttons together on a single line with the button group, and super-power.
     * @category General
     * @tags controls
     * @example <goat-button-group>
     * <goat-button block icon="home"></goat-button>
     * <goat-button block icon="alarm"></goat-button>
     * </goat-button-group>
     */
    interface HTMLGoatButtonGroupElement extends Components.GoatButtonGroup, HTMLStencilElement {
    }
    var HTMLGoatButtonGroupElement: {
        prototype: HTMLGoatButtonGroupElement;
        new (): HTMLGoatButtonGroupElement;
    };
    /**
     * @name Calendar
     * @description The calendar component is used to display information in a daily, weekly, monthly, or category view.
     * @category Data Display
     * @tags calendar
     * @img /assets/img/calendar.png
     * @imgDark /assets/img/calendar-dark.png
     */
    interface HTMLGoatCalendarElement extends Components.GoatCalendar, HTMLStencilElement {
    }
    var HTMLGoatCalendarElement: {
        prototype: HTMLGoatCalendarElement;
        new (): HTMLGoatCalendarElement;
    };
    interface HTMLGoatCalendarColumnViewElement extends Components.GoatCalendarColumnView, HTMLStencilElement {
    }
    var HTMLGoatCalendarColumnViewElement: {
        prototype: HTMLGoatCalendarColumnViewElement;
        new (): HTMLGoatCalendarColumnViewElement;
    };
    interface HTMLGoatCalendarColumnViewBackgroundElement extends Components.GoatCalendarColumnViewBackground, HTMLStencilElement {
    }
    var HTMLGoatCalendarColumnViewBackgroundElement: {
        prototype: HTMLGoatCalendarColumnViewBackgroundElement;
        new (): HTMLGoatCalendarColumnViewBackgroundElement;
    };
    interface HTMLGoatCalendarMonthViewElement extends Components.GoatCalendarMonthView, HTMLStencilElement {
    }
    var HTMLGoatCalendarMonthViewElement: {
        prototype: HTMLGoatCalendarMonthViewElement;
        new (): HTMLGoatCalendarMonthViewElement;
    };
    interface HTMLGoatCalendarMonthViewBackgroundElement extends Components.GoatCalendarMonthViewBackground, HTMLStencilElement {
    }
    var HTMLGoatCalendarMonthViewBackgroundElement: {
        prototype: HTMLGoatCalendarMonthViewBackgroundElement;
        new (): HTMLGoatCalendarMonthViewBackgroundElement;
    };
    /**
     * @name Canvas
     * @category Up coming
     * @description Canvas for drawing lines and shapes on.
     * @img /assets/img/canvas.png
     */
    interface HTMLGoatCanvasElement extends Components.GoatCanvas, HTMLStencilElement {
    }
    var HTMLGoatCanvasElement: {
        prototype: HTMLGoatCanvasElement;
        new (): HTMLGoatCanvasElement;
    };
    interface HTMLGoatCardElement extends Components.GoatCard, HTMLStencilElement {
    }
    var HTMLGoatCardElement: {
        prototype: HTMLGoatCardElement;
        new (): HTMLGoatCardElement;
    };
    interface HTMLGoatCbCompoundExpressionElement extends Components.GoatCbCompoundExpression, HTMLStencilElement {
    }
    var HTMLGoatCbCompoundExpressionElement: {
        prototype: HTMLGoatCbCompoundExpressionElement;
        new (): HTMLGoatCbCompoundExpressionElement;
    };
    interface HTMLGoatCbDividerElement extends Components.GoatCbDivider, HTMLStencilElement {
    }
    var HTMLGoatCbDividerElement: {
        prototype: HTMLGoatCbDividerElement;
        new (): HTMLGoatCbDividerElement;
    };
    interface HTMLGoatCbExpressionElement extends Components.GoatCbExpression, HTMLStencilElement {
    }
    var HTMLGoatCbExpressionElement: {
        prototype: HTMLGoatCbExpressionElement;
        new (): HTMLGoatCbExpressionElement;
    };
    interface HTMLGoatCbPredicateElement extends Components.GoatCbPredicate, HTMLStencilElement {
    }
    var HTMLGoatCbPredicateElement: {
        prototype: HTMLGoatCbPredicateElement;
        new (): HTMLGoatCbPredicateElement;
    };
    /**
     * @name Checkbox
     * @description Captures boolean input with an optional indeterminate mode.
     * @category Form Inputs
     * @tags input, form
     * @example <goat-checkbox value='true'>Want ice cream?</goat-checkbox>
     */
    interface HTMLGoatCheckboxElement extends Components.GoatCheckbox, HTMLStencilElement {
    }
    var HTMLGoatCheckboxElement: {
        prototype: HTMLGoatCheckboxElement;
        new (): HTMLGoatCheckboxElement;
    };
    /**
     * @name Code Editor
     * @description A browser based code editor.
     * @category Form Inputs
     * @tags input, form
     * @img /assets/img/code-editor.png
     * @imgDark /assets/img/code-editor-dark.png
     */
    interface HTMLGoatCodeEditorElement extends Components.GoatCodeEditor, HTMLStencilElement {
    }
    var HTMLGoatCodeEditorElement: {
        prototype: HTMLGoatCodeEditorElement;
        new (): HTMLGoatCodeEditorElement;
    };
    /**
     * @name Code Highlighter
     * @description A browser based code highlighter.
     * @category Data Display
     * @tag display, code
     * @img /assets/img/code-highlighter.png
     * @imgDark /assets/img/code-highlighter-dark.png
     */
    interface HTMLGoatCodeHighlighterElement extends Components.GoatCodeHighlighter, HTMLStencilElement {
    }
    var HTMLGoatCodeHighlighterElement: {
        prototype: HTMLGoatCodeHighlighterElement;
        new (): HTMLGoatCodeHighlighterElement;
    };
    /**
     * @name Condition Builder
     * @description A condition builder is a component that allows users to build a condition using a set of rules.
     * @category Up coming
     * @category Data Display
     * @tag content
     * @img /assets/img/condition-builder.png
     */
    interface HTMLGoatConditionBuilderElement extends Components.GoatConditionBuilder, HTMLStencilElement {
    }
    var HTMLGoatConditionBuilderElement: {
        prototype: HTMLGoatConditionBuilderElement;
        new (): HTMLGoatConditionBuilderElement;
    };
    interface HTMLGoatContainerElement extends Components.GoatContainer, HTMLStencilElement {
    }
    var HTMLGoatContainerElement: {
        prototype: HTMLGoatContainerElement;
        new (): HTMLGoatContainerElement;
    };
    /**
     * @name Current Time
     * @description The current time component displays the current time in a 12-hour format.
     * @category General
     * @tags controls
     * @example <goat-current-time></goat-current-time>
     */
    interface HTMLGoatCurrentTimeElement extends Components.GoatCurrentTime, HTMLStencilElement {
    }
    var HTMLGoatCurrentTimeElement: {
        prototype: HTMLGoatCurrentTimeElement;
        new (): HTMLGoatCurrentTimeElement;
    };
    /**
     * @name Date Picker
     * @category Form Inputs
     * @description Captures date input.
     * @example <goat-date-picker value='true'></goat-date-picker>
     */
    interface HTMLGoatDatePickerElement extends Components.GoatDatePicker, HTMLStencilElement {
    }
    var HTMLGoatDatePickerElement: {
        prototype: HTMLGoatDatePickerElement;
        new (): HTMLGoatDatePickerElement;
    };
    /**
     * @name Divider
     * @description A divider can be used to segment content vertically or horizontally.
     * @category Layout
     * @example <goat-divider style="width: 12rem;">or</goat-divider>
     */
    interface HTMLGoatDividerElement extends Components.GoatDivider, HTMLStencilElement {
    }
    var HTMLGoatDividerElement: {
        prototype: HTMLGoatDividerElement;
        new (): HTMLGoatDividerElement;
    };
    /**
     * @name Dropdown
     * @description Enables native inputs to be used within a Form field.
     * @category Navigation
     * @img /assets/img/dropdown.png
     * @imgDark /assets/img/dropdown-dark.png
     */
    interface HTMLGoatDropdownElement extends Components.GoatDropdown, HTMLStencilElement {
    }
    var HTMLGoatDropdownElement: {
        prototype: HTMLGoatDropdownElement;
        new (): HTMLGoatDropdownElement;
    };
    /**
     * @name Empty State
     * @description A message that displays when there is no information to display.
     * @category Data Display
     * @example <goat-empty-state class="content-center" headline="Empty list" description="Nothing to display">
     * </goat-empty-state>
     */
    interface HTMLGoatEmptyStateElement extends Components.GoatEmptyState, HTMLStencilElement {
    }
    var HTMLGoatEmptyStateElement: {
        prototype: HTMLGoatEmptyStateElement;
        new (): HTMLGoatEmptyStateElement;
    };
    /**
     * @name Flow Designer
     * @category Up coming
     * @description An interactive button with a range of presentation options.
     * @img /assets/img/flow-designer.png
     */
    interface HTMLGoatFlowDesignerElement extends Components.GoatFlowDesigner, HTMLStencilElement {
    }
    var HTMLGoatFlowDesignerElement: {
        prototype: HTMLGoatFlowDesignerElement;
        new (): HTMLGoatFlowDesignerElement;
    };
    /**
     * @name Form Control
     * @description The Form Control component adds a label and caption for its child control.
     * @category Form Inputs
     * @tags form
     * @example <goat-form-control label='Full Name' required>
     * <goat-input type='text'></goat-input>
     * </goat-form-control>
     */
    interface HTMLGoatFormControlElement extends Components.GoatFormControl, HTMLStencilElement {
    }
    var HTMLGoatFormControlElement: {
        prototype: HTMLGoatFormControlElement;
        new (): HTMLGoatFormControlElement;
    };
    /**
     * @name Header
     * @description Headers are compositions that extend standard navbar functionalities.
     * @category Navigation
     * @img /assets/img/header.png
     * @imgDark /assets/img/header-dark.png
     */
    interface HTMLGoatHeaderElement extends Components.GoatHeader, HTMLStencilElement {
    }
    var HTMLGoatHeaderElement: {
        prototype: HTMLGoatHeaderElement;
        new (): HTMLGoatHeaderElement;
    };
    interface HTMLGoatHeaderActionElement extends Components.GoatHeaderAction, HTMLStencilElement {
    }
    var HTMLGoatHeaderActionElement: {
        prototype: HTMLGoatHeaderActionElement;
        new (): HTMLGoatHeaderActionElement;
    };
    interface HTMLGoatHeaderBrandElement extends Components.GoatHeaderBrand, HTMLStencilElement {
    }
    var HTMLGoatHeaderBrandElement: {
        prototype: HTMLGoatHeaderBrandElement;
        new (): HTMLGoatHeaderBrandElement;
    };
    /**
     * @name HTML Editor
     * @description A browser based html editor.
     * @category Up coming
     * @tags input, form
     * @img /assets/img/html-editor.png
     * @imgDark /assets/img/html-editor-dark.png
     */
    interface HTMLGoatHtmlEditorElement extends Components.GoatHtmlEditor, HTMLStencilElement {
    }
    var HTMLGoatHtmlEditorElement: {
        prototype: HTMLGoatHtmlEditorElement;
        new (): HTMLGoatHtmlEditorElement;
    };
    /**
     * @name Icon
     * @description Icons are visual symbols used to represent ideas, objects, or actions. They communicate messages at a glance, afford interactivity, and draw attention to important information.
     * @category General
     * @example <goat-icon name="home" size="2rem"></goat-icon>
     */
    interface HTMLGoatIconElement extends Components.GoatIcon, HTMLStencilElement {
    }
    var HTMLGoatIconElement: {
        prototype: HTMLGoatIconElement;
        new (): HTMLGoatIconElement;
    };
    interface HTMLGoatImageElement extends Components.GoatImage, HTMLStencilElement {
    }
    var HTMLGoatImageElement: {
        prototype: HTMLGoatImageElement;
        new (): HTMLGoatImageElement;
    };
    /**
     * @name Input
     * @description Enables native inputs to be used within a Form field.
     * @category Form Inputs
     * @tags input, form
     * @example <goat-input placeholder="Enter your name"></goat-input>
     */
    interface HTMLGoatInputElement extends Components.GoatInput, HTMLStencilElement {
    }
    var HTMLGoatInputElement: {
        prototype: HTMLGoatInputElement;
        new (): HTMLGoatInputElement;
    };
    /**
     * @name Link
     * @description Links allow users to click their way from page to page.
     * @category Navigation
     * @example <goat-link href="#">Link</goat-link>
     */
    interface HTMLGoatLinkElement extends Components.GoatLink, HTMLStencilElement {
    }
    var HTMLGoatLinkElement: {
        prototype: HTMLGoatLinkElement;
        new (): HTMLGoatLinkElement;
    };
    /**
     * @name Menu
     * @description Menus display a list of choices on temporary surfaces.
     * @category Navigation
     * @img /assets/img/menu.png
     * @imgDark /assets/img/menu-dark.png
     */
    interface HTMLGoatMenuElement extends Components.GoatMenu, HTMLStencilElement {
    }
    var HTMLGoatMenuElement: {
        prototype: HTMLGoatMenuElement;
        new (): HTMLGoatMenuElement;
    };
    interface HTMLGoatMenuItemElement extends Components.GoatMenuItem, HTMLStencilElement {
    }
    var HTMLGoatMenuItemElement: {
        prototype: HTMLGoatMenuItemElement;
        new (): HTMLGoatMenuItemElement;
    };
    /**
     * @name Modal
     * @description Modals are used to display content in a layer above the app.
     * @tags controls
     */
    interface HTMLGoatModalElement extends Components.GoatModal, HTMLStencilElement {
    }
    var HTMLGoatModalElement: {
        prototype: HTMLGoatModalElement;
        new (): HTMLGoatModalElement;
    };
    /**
     * @name Notification
     * @description Notifications are messages that communicate information to the user.
     * @category Feedback
     * @tags notification
     * @example <goat-notification state="success">
     *      <div slot='title'>Successful saved the record</div>
     *    </goat-notification>
     */
    interface HTMLGoatNotificationElement extends Components.GoatNotification, HTMLStencilElement {
    }
    var HTMLGoatNotificationElement: {
        prototype: HTMLGoatNotificationElement;
        new (): HTMLGoatNotificationElement;
    };
    /**
     * @name Notification Manager
     * @description Manages alert, toasts and notifications.
     * @category Feedback
     * @tags notification
     * @img /assets/img/notification-manager.png
     * @imgDark /assets/img/notification-manager-dark.png
     */
    interface HTMLGoatNotificationManagerElement extends Components.GoatNotificationManager, HTMLStencilElement {
    }
    var HTMLGoatNotificationManagerElement: {
        prototype: HTMLGoatNotificationManagerElement;
        new (): HTMLGoatNotificationManagerElement;
    };
    /**
     * @name Number
     * @description Enables native inputs to be used within a Form field.
     * @category Form Inputs
     * @tags input, form
     * @example <goat-number value="100"></goat-input>
     */
    interface HTMLGoatNumberElement extends Components.GoatNumber, HTMLStencilElement {
    }
    var HTMLGoatNumberElement: {
        prototype: HTMLGoatNumberElement;
        new (): HTMLGoatNumberElement;
    };
    /**
     * @name Progress
     * @description Progress indicators express an unspecified wait time or display the length of a process.
     * @category Feedback
     * @tags feedback, loading, progress, spinner
     * @example <goat-progress value="40" label="Progress" width="100%" helper-text="Optional helper text goes here..."></goat-progress>
     */
    interface HTMLGoatProgressElement extends Components.GoatProgress, HTMLStencilElement {
    }
    var HTMLGoatProgressElement: {
        prototype: HTMLGoatProgressElement;
        new (): HTMLGoatProgressElement;
    };
    /**
     * @name Select
     * @description Allows the user to select one or more options using a dropdown.
     * @category Form Inputs
     * @tags input, form
     * @img /assets/img/select.png
     * @imgDark /assets/img/select-dark.png
     */
    interface HTMLGoatSelectElement extends Components.GoatSelect, HTMLStencilElement {
    }
    var HTMLGoatSelectElement: {
        prototype: HTMLGoatSelectElement;
        new (): HTMLGoatSelectElement;
    };
    /**
     * @name1 Side Navigation
     * @description1 The side navigation component provides an easy way to navigate through your website / application.
     * @img1 /assets/img/sidenav.png
     */
    interface HTMLGoatSidenavElement extends Components.GoatSidenav, HTMLStencilElement {
    }
    var HTMLGoatSidenavElement: {
        prototype: HTMLGoatSidenavElement;
        new (): HTMLGoatSidenavElement;
    };
    interface HTMLGoatSidenavMenuElement extends Components.GoatSidenavMenu, HTMLStencilElement {
    }
    var HTMLGoatSidenavMenuElement: {
        prototype: HTMLGoatSidenavMenuElement;
        new (): HTMLGoatSidenavMenuElement;
    };
    interface HTMLGoatSidenavMenuItemElement extends Components.GoatSidenavMenuItem, HTMLStencilElement {
    }
    var HTMLGoatSidenavMenuItemElement: {
        prototype: HTMLGoatSidenavMenuItemElement;
        new (): HTMLGoatSidenavMenuItemElement;
    };
    /**
     * @name Slider
     * @description Allows the user to select one or more options using a dropdown.
     * @category Form Inputs
     * @tags input, form
     * @img /assets/img/slider.png
     * @imgDark /assets/img/slider-dark.png
     */
    interface HTMLGoatSliderElement extends Components.GoatSlider, HTMLStencilElement {
    }
    var HTMLGoatSliderElement: {
        prototype: HTMLGoatSliderElement;
        new (): HTMLGoatSliderElement;
    };
    /**
     * @name Spinner
     * @description Spinners provide a visual cue that an action is processing awaiting a course of change or a result.
     * @category Feedback
     * @tags feedback, loading, progress, spinner
     * @example <goat-spinner class="rainbow" size="2rem"></goat-spinner>
     */
    interface HTMLGoatSpinnerElement extends Components.GoatSpinner, HTMLStencilElement {
    }
    var HTMLGoatSpinnerElement: {
        prototype: HTMLGoatSpinnerElement;
        new (): HTMLGoatSpinnerElement;
    };
    /**
     * @name SVG
     * @description Render SVG content from an external source.
     * @category Data Display
     * @example <goat-svg src="https://icons.getbootstrap.com/assets/icons/bug.svg" size="2rem"></goat-svg>
     */
    interface HTMLGoatSvgElement extends Components.GoatSvg, HTMLStencilElement {
    }
    var HTMLGoatSvgElement: {
        prototype: HTMLGoatSvgElement;
        new (): HTMLGoatSvgElement;
    };
    interface HTMLGoatTabElement extends Components.GoatTab, HTMLStencilElement {
    }
    var HTMLGoatTabElement: {
        prototype: HTMLGoatTabElement;
        new (): HTMLGoatTabElement;
    };
    interface HTMLGoatTabPanelElement extends Components.GoatTabPanel, HTMLStencilElement {
    }
    var HTMLGoatTabPanelElement: {
        prototype: HTMLGoatTabPanelElement;
        new (): HTMLGoatTabPanelElement;
    };
    /**
     * @name Table
     * @description A configurable component for displaying tabular data.
     * @category Data Display
     * @img /assets/img/table.png
     * @imgDark /assets/img/table-dark.png
     */
    interface HTMLGoatTableElement extends Components.GoatTable, HTMLStencilElement {
    }
    var HTMLGoatTableElement: {
        prototype: HTMLGoatTableElement;
        new (): HTMLGoatTableElement;
    };
    /**
     * @name Tabs
     * @description An interactive button with a range of presentation options.
     * @category Navigation
     * @tags navigation
     * @example <goat-tabs>
     * <goat-tabs-list>
     * <goat-tab selected >Tab 1</goat-tab>
     * <goat-tab>Tab 2</goat-tab>
     * </goat-tabs-list>
     * </goat-tabs>
     */
    interface HTMLGoatTabsElement extends Components.GoatTabs, HTMLStencilElement {
    }
    var HTMLGoatTabsElement: {
        prototype: HTMLGoatTabsElement;
        new (): HTMLGoatTabsElement;
    };
    interface HTMLGoatTabsListElement extends Components.GoatTabsList, HTMLStencilElement {
    }
    var HTMLGoatTabsListElement: {
        prototype: HTMLGoatTabsListElement;
        new (): HTMLGoatTabsListElement;
    };
    /**
     * @name Tag
     * @description Use tags to label, categorize, or organize items using keywords that describe them.
     * @category Data Display
     * @tag controls
     * @example <goat-tag class="color-red">Important</goat-tag>
     */
    interface HTMLGoatTagElement extends Components.GoatTag, HTMLStencilElement {
    }
    var HTMLGoatTagElement: {
        prototype: HTMLGoatTagElement;
        new (): HTMLGoatTagElement;
    };
    /**
     * @name Text
     * @description Typography are used for rendering headlines, paragraphs and captions.
     * @category General
     * @example <goat-text type="heading" level="1">Heading</goat-typography>
     */
    interface HTMLGoatTextElement extends Components.GoatText, HTMLStencilElement {
    }
    var HTMLGoatTextElement: {
        prototype: HTMLGoatTextElement;
        new (): HTMLGoatTextElement;
    };
    /**
     * @name Textarea
     * @description Enables native inputs to be used within a Form field.
     * @category Form Inputs
     * @tags input, form
     * @example <goat-textarea placeholder="Enter some description over here"></goat-textarea>
     */
    interface HTMLGoatTextareaElement extends Components.GoatTextarea, HTMLStencilElement {
    }
    var HTMLGoatTextareaElement: {
        prototype: HTMLGoatTextareaElement;
        new (): HTMLGoatTextareaElement;
    };
    /**
     * @name Time Picker
     * @description Captures time input.
     * @category Form Inputs
     * @tags input, form
     * @example <goat-time-picker value='true'></goat-time-picker>
     */
    interface HTMLGoatTimePickerElement extends Components.GoatTimePicker, HTMLStencilElement {
    }
    var HTMLGoatTimePickerElement: {
        prototype: HTMLGoatTimePickerElement;
        new (): HTMLGoatTimePickerElement;
    };
    /**
     * @name Toast
     * @description Toasts are lightweight notifications.
     * @category Feedback
     * @example <goat-toast state="success" message="Successful saved the record"></goat-toast>
     */
    interface HTMLGoatToastElement extends Components.GoatToast, HTMLStencilElement {
    }
    var HTMLGoatToastElement: {
        prototype: HTMLGoatToastElement;
        new (): HTMLGoatToastElement;
    };
    /**
     * @name Toggle
     * @description Captures boolean input with an optional indeterminate mode.
     * @category Form Inputs
     * @tags input, form
     * @example <goat-toggle value='true'>Want ice cream?</goat-toggle>
     */
    interface HTMLGoatToggleElement extends Components.GoatToggle, HTMLStencilElement {
    }
    var HTMLGoatToggleElement: {
        prototype: HTMLGoatToggleElement;
        new (): HTMLGoatToggleElement;
    };
    interface HTMLGoatTreeNodeElement extends Components.GoatTreeNode, HTMLStencilElement {
    }
    var HTMLGoatTreeNodeElement: {
        prototype: HTMLGoatTreeNodeElement;
        new (): HTMLGoatTreeNodeElement;
    };
    /**
     * @name TreeView
     * @description A tree view is a hierarchical structure that provides nested levels of navigation.
     * @category Navigation
     * @img /assets/img/tree-view.png
     * @imgDark /assets/img/tree-view-dark.png
     */
    interface HTMLGoatTreeViewElement extends Components.GoatTreeView, HTMLStencilElement {
    }
    var HTMLGoatTreeViewElement: {
        prototype: HTMLGoatTreeViewElement;
        new (): HTMLGoatTreeViewElement;
    };
    interface HTMLElementTagNameMap {
        "goat-accordion": HTMLGoatAccordionElement;
        "goat-accordion-item": HTMLGoatAccordionItemElement;
        "goat-avatar": HTMLGoatAvatarElement;
        "goat-badge": HTMLGoatBadgeElement;
        "goat-breadcrumb": HTMLGoatBreadcrumbElement;
        "goat-breadcrumb-item": HTMLGoatBreadcrumbItemElement;
        "goat-button": HTMLGoatButtonElement;
        "goat-button-group": HTMLGoatButtonGroupElement;
        "goat-calendar": HTMLGoatCalendarElement;
        "goat-calendar-column-view": HTMLGoatCalendarColumnViewElement;
        "goat-calendar-column-view-background": HTMLGoatCalendarColumnViewBackgroundElement;
        "goat-calendar-month-view": HTMLGoatCalendarMonthViewElement;
        "goat-calendar-month-view-background": HTMLGoatCalendarMonthViewBackgroundElement;
        "goat-canvas": HTMLGoatCanvasElement;
        "goat-card": HTMLGoatCardElement;
        "goat-cb-compound-expression": HTMLGoatCbCompoundExpressionElement;
        "goat-cb-divider": HTMLGoatCbDividerElement;
        "goat-cb-expression": HTMLGoatCbExpressionElement;
        "goat-cb-predicate": HTMLGoatCbPredicateElement;
        "goat-checkbox": HTMLGoatCheckboxElement;
        "goat-code-editor": HTMLGoatCodeEditorElement;
        "goat-code-highlighter": HTMLGoatCodeHighlighterElement;
        "goat-condition-builder": HTMLGoatConditionBuilderElement;
        "goat-container": HTMLGoatContainerElement;
        "goat-current-time": HTMLGoatCurrentTimeElement;
        "goat-date-picker": HTMLGoatDatePickerElement;
        "goat-divider": HTMLGoatDividerElement;
        "goat-dropdown": HTMLGoatDropdownElement;
        "goat-empty-state": HTMLGoatEmptyStateElement;
        "goat-flow-designer": HTMLGoatFlowDesignerElement;
        "goat-form-control": HTMLGoatFormControlElement;
        "goat-header": HTMLGoatHeaderElement;
        "goat-header-action": HTMLGoatHeaderActionElement;
        "goat-header-brand": HTMLGoatHeaderBrandElement;
        "goat-html-editor": HTMLGoatHtmlEditorElement;
        "goat-icon": HTMLGoatIconElement;
        "goat-image": HTMLGoatImageElement;
        "goat-input": HTMLGoatInputElement;
        "goat-link": HTMLGoatLinkElement;
        "goat-menu": HTMLGoatMenuElement;
        "goat-menu-item": HTMLGoatMenuItemElement;
        "goat-modal": HTMLGoatModalElement;
        "goat-notification": HTMLGoatNotificationElement;
        "goat-notification-manager": HTMLGoatNotificationManagerElement;
        "goat-number": HTMLGoatNumberElement;
        "goat-progress": HTMLGoatProgressElement;
        "goat-select": HTMLGoatSelectElement;
        "goat-sidenav": HTMLGoatSidenavElement;
        "goat-sidenav-menu": HTMLGoatSidenavMenuElement;
        "goat-sidenav-menu-item": HTMLGoatSidenavMenuItemElement;
        "goat-slider": HTMLGoatSliderElement;
        "goat-spinner": HTMLGoatSpinnerElement;
        "goat-svg": HTMLGoatSvgElement;
        "goat-tab": HTMLGoatTabElement;
        "goat-tab-panel": HTMLGoatTabPanelElement;
        "goat-table": HTMLGoatTableElement;
        "goat-tabs": HTMLGoatTabsElement;
        "goat-tabs-list": HTMLGoatTabsListElement;
        "goat-tag": HTMLGoatTagElement;
        "goat-text": HTMLGoatTextElement;
        "goat-textarea": HTMLGoatTextareaElement;
        "goat-time-picker": HTMLGoatTimePickerElement;
        "goat-toast": HTMLGoatToastElement;
        "goat-toggle": HTMLGoatToggleElement;
        "goat-tree-node": HTMLGoatTreeNodeElement;
        "goat-tree-view": HTMLGoatTreeViewElement;
    }
}
declare namespace LocalJSX {
    /**
     * @name Accordion
     * @description An accordion is a vertically stacked list of headers that reveal or hide associated sections of content.
     * @category Data Display
     * @tags display
     * @img /assets/img/accordion.png
     * @imgDark /assets/img/accordion-dark.png
     */
    interface GoatAccordion {
        "align"?: 'start' | 'end';
        "multiple"?: boolean;
        /**
          * The According size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
         */
        "size"?: 'sm' | 'md' | 'lg';
    }
    interface GoatAccordionItem {
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled"?: boolean;
        /**
          * The menu item value.
         */
        "heading"?: string;
        "icon"?: boolean;
        /**
          * Emitted when the menu item is clicked.
         */
        "onGoat:accordion-item-click"?: (event: GoatAccordionItemCustomEvent<any>) => void;
        /**
          * Menu item selection state.
         */
        "open"?: boolean;
    }
    /**
     * @name Avatar
     * @description Avatars in their simplest form display content within a circular container.
     * @category Data Display
     * @tags display
     * @example <goat-avatar size="5rem" name="Shivaji Varma" src="/assets/img/avatar.png"></goat-avatar>
     */
    interface GoatAvatar {
        "name"?: string;
        /**
          * Avatar size.
         */
        "size"?: string;
        "src"?: string;
    }
    /**
     * @name Badge
     * @description Renders a specified badge.
     * @category Data Display
     * @tag content
     * @example <goat-badge content="5" class='color-error'> <goat-icon name="notification" size="lg"></goat-icon></goat-badge>
     */
    interface GoatBadge {
        "content"?: string;
    }
    /**
     * @name Breadcrumb
     * @description Typography are used for rendering headlines, paragraphs and captions.
     * @category Navigation
     * @tags navigation
     * @example <goat-breadcrumb><goat-breadcrumb-item href="#">Home</goat-breadcrumb-item><goat-breadcrumb-item href="#" active>Page</goat-breadcrumb-item></goat-breadcrumb>
     */
    interface GoatBreadcrumb {
    }
    interface GoatBreadcrumbItem {
        "active"?: boolean;
        /**
          * Hyperlink to navigate to on click.
         */
        "href"?: string;
        "position"?: string;
        /**
          * Sets or retrieves the window or frame at which to target content.
         */
        "target"?: string;
    }
    /**
     * @name Button
     * @description An interactive button with a range of presentation options.
     * @category General
     * @tags controls
     * @example <goat-button>
     * Button CTA
     * </goat-button>
     */
    interface GoatButton {
        "color"?: 'primary' | 'secondary' | 'success' | 'danger' | 'brand-primary' | 'brand-secondary' | 'dark' | 'light';
        "configAria"?: any;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled"?: boolean;
        "disabledReason"?: string;
        /**
          * Hyperlink to navigate to on click.
         */
        "href"?: string;
        /**
          * Icon which will displayed on button. Possible values are icon names.
         */
        "icon"?: string;
        /**
          * Icon position.
         */
        "iconAlign"?: 'start' | 'end';
        /**
          * Icon size.
         */
        "iconSize"?: 'sm' | 'md' | 'lg' | string;
        /**
          * Button kind. Possible values are `"default"`, `"simple"`, `"block"`. Defaults to `"default"`. `"default"` is a long button. `"simple"` is a text-only button. `"block"` is a full-width button.
         */
        "kind"?: 'default' | 'simple' | 'block';
        /**
          * On click of button, a CustomEvent 'goat:click' will be triggered.
         */
        "onGoat:click"?: (event: GoatButtonCustomEvent<any>) => void;
        /**
          * Button selection state.
         */
        "selected"?: boolean;
        /**
          * Show loader.
         */
        "showLoader"?: boolean;
        /**
          * Button size. Possible values are `"sm"`, `"md"`, `"lg"`, `"xl"`, `"xxl"`, `"full"`. Defaults to `"md"`.
         */
        "size"?: 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'full';
        /**
          * Sets or retrieves the window or frame at which to target content.
         */
        "target"?: string;
        "type"?: 'button' | 'submit' | 'reset';
        /**
          * Button variants. Possible values are `"default"`, `"outline"`, `"ghost"`. Defaults to `"default"`. `"default"` is a filled button. `"outline"` is an outlined button. `"ghost"` is a transparent button.
         */
        "variant"?: 'default' | 'outline' | 'ghost' | 'light' | 'link';
    }
    /**
     * @name Button Group
     * @description Group a series of buttons together on a single line with the button group, and super-power.
     * @category General
     * @tags controls
     * @example <goat-button-group>
     * <goat-button block icon="home"></goat-button>
     * <goat-button block icon="alarm"></goat-button>
     * </goat-button-group>
     */
    interface GoatButtonGroup {
    }
    /**
     * @name Calendar
     * @description The calendar component is used to display information in a daily, weekly, monthly, or category view.
     * @category Data Display
     * @tags calendar
     * @img /assets/img/calendar.png
     * @imgDark /assets/img/calendar-dark.png
     */
    interface GoatCalendar {
        "availableViews"?: any;
        "contextDate"?: any;
        "eventClickable"?: boolean;
        "events"?: any[];
        "onGoat:calendar-event-click"?: (event: GoatCalendarCustomEvent<any>) => void;
        /**
          * Show loader.
         */
        "showLoader"?: boolean;
        "timezone"?: any;
        "view"?: string;
    }
    interface GoatCalendarColumnView {
        "contextDate"?: Date;
        "currentTime"?: Date;
        "days"?: number;
        "eventClickable"?: boolean;
        "events"?: any[];
        "onGoat:column-view-date-click"?: (event: GoatCalendarColumnViewCustomEvent<any>) => void;
        "onGoat:column-view-event-click"?: (event: GoatCalendarColumnViewCustomEvent<any>) => void;
        "view"?: string;
    }
    interface GoatCalendarColumnViewBackground {
        "columns"?: number;
    }
    interface GoatCalendarMonthView {
        "contextDate"?: Date;
        "currentTime"?: Date;
        "eventClickable"?: boolean;
        "events"?: any[];
        "onGoat:month-view-date-click"?: (event: GoatCalendarMonthViewCustomEvent<any>) => void;
        "onGoat:month-view-event-click"?: (event: GoatCalendarMonthViewCustomEvent<any>) => void;
    }
    interface GoatCalendarMonthViewBackground {
        "columns"?: number;
    }
    /**
     * @name Canvas
     * @category Up coming
     * @description Canvas for drawing lines and shapes on.
     * @img /assets/img/canvas.png
     */
    interface GoatCanvas {
        "padding"?: number;
        "shapes"?: any[];
        "viewbox"?: string;
        "zoom"?: number;
    }
    interface GoatCard {
        "shadowLevel"?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | undefined;
    }
    interface GoatCbCompoundExpression {
        "conditionOperator"?: 'and' | 'or';
        "fieldLabel"?: string;
        "fieldName"?: string;
    }
    interface GoatCbDivider {
        "connectEnd"?: boolean;
        "connectStart"?: boolean;
        "vertical"?: boolean;
    }
    interface GoatCbExpression {
        "operatorValue"?: string;
        "operators"?: any[];
    }
    interface GoatCbPredicate {
        "conditionOperator"?: 'and' | 'or';
        "vertical"?: boolean;
    }
    /**
     * @name Checkbox
     * @description Captures boolean input with an optional indeterminate mode.
     * @category Form Inputs
     * @tags input, form
     * @example <goat-checkbox value='true'>Want ice cream?</goat-checkbox>
     */
    interface GoatCheckbox {
        "configAria"?: any;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled"?: boolean;
        "intermediate"?: boolean;
        /**
          * The checkbox label.
         */
        "label"?: string;
        /**
          * The input field name.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onGoat:blur"?: (event: GoatCheckboxCustomEvent<any>) => void;
        /**
          * On change of input a CustomEvent 'goat:change' will be triggered. Event details contains parent event, oldValue, newValue of input.
         */
        "onGoat:change"?: (event: GoatCheckboxCustomEvent<any>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onGoat:focus"?: (event: GoatCheckboxCustomEvent<any>) => void;
        "readonly"?: boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
         */
        "required"?: boolean;
        "rounded"?: boolean;
        /**
          * The button size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
         */
        "size"?: 'sm' | 'md' | 'lg';
        /**
          * The input field value.
         */
        "value"?: boolean;
    }
    /**
     * @name Code Editor
     * @description A browser based code editor.
     * @category Form Inputs
     * @tags input, form
     * @img /assets/img/code-editor.png
     * @imgDark /assets/img/code-editor-dark.png
     */
    interface GoatCodeEditor {
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `onChange` event after each keystroke.
         */
        "debounce"?: number;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled"?: boolean;
        "language"?: 'javascript' | 'json' | 'html';
        "lineNumbers"?: 'off' | 'on';
        /**
          * The input field name.
         */
        "name"?: string;
        /**
          * Emitted when the value has changed.
         */
        "onGoat:change"?: (event: GoatCodeEditorCustomEvent<any>) => void;
        "readonly"?: boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
         */
        "required"?: boolean;
        /**
          * The input field value.
         */
        "value"?: string;
    }
    /**
     * @name Code Highlighter
     * @description A browser based code highlighter.
     * @category Data Display
     * @tag display, code
     * @img /assets/img/code-highlighter.png
     * @imgDark /assets/img/code-highlighter-dark.png
     */
    interface GoatCodeHighlighter {
        "format"?: boolean;
        "language"?: string;
        "lineNumbers"?: boolean;
        "value"?: string;
    }
    /**
     * @name Condition Builder
     * @description A condition builder is a component that allows users to build a condition using a set of rules.
     * @category Up coming
     * @category Data Display
     * @tag content
     * @img /assets/img/condition-builder.png
     */
    interface GoatConditionBuilder {
        "content"?: string;
    }
    interface GoatContainer {
        "vertical"?: boolean;
    }
    /**
     * @name Current Time
     * @description The current time component displays the current time in a 12-hour format.
     * @category General
     * @tags controls
     * @example <goat-current-time></goat-current-time>
     */
    interface GoatCurrentTime {
        "timezone"?: string;
    }
    /**
     * @name Date Picker
     * @category Form Inputs
     * @description Captures date input.
     * @example <goat-date-picker value='true'></goat-date-picker>
     */
    interface GoatDatePicker {
        "configAria"?: any;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `goatChange` event after each keystroke.
         */
        "debounce"?: number;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled"?: boolean;
        "inline"?: boolean;
        /**
          * The input field name.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onGoat:blur"?: (event: GoatDatePickerCustomEvent<any>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onGoat:change"?: (event: GoatDatePickerCustomEvent<any>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onGoat:focus"?: (event: GoatDatePickerCustomEvent<any>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onGoat:input"?: (event: GoatDatePickerCustomEvent<any>) => void;
        /**
          * The input field placeholder.
         */
        "placeholder"?: string;
        /**
          * If true, the user read the value cannot modify it. Defaults to `false`.
         */
        "readonly"?: boolean;
        /**
          * The input field size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
         */
        "size"?: 'sm' | 'md' | 'lg';
        /**
          * The input field value.
         */
        "value"?: string | number | null;
    }
    /**
     * @name Divider
     * @description A divider can be used to segment content vertically or horizontally.
     * @category Layout
     * @example <goat-divider style="width: 12rem;">or</goat-divider>
     */
    interface GoatDivider {
        "vertical"?: boolean;
    }
    /**
     * @name Dropdown
     * @description Enables native inputs to be used within a Form field.
     * @category Navigation
     * @img /assets/img/dropdown.png
     * @imgDark /assets/img/dropdown-dark.png
     */
    interface GoatDropdown {
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled"?: boolean;
        "isOpen"?: boolean;
        "items"?: any[];
        "positions"?: string;
        /**
          * The button size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
         */
        "size"?: 'sm' | 'md' | 'lg';
    }
    /**
     * @name Empty State
     * @description A message that displays when there is no information to display.
     * @category Data Display
     * @example <goat-empty-state class="content-center" headline="Empty list" description="Nothing to display">
     * </goat-empty-state>
     */
    interface GoatEmptyState {
        "action"?: string;
        "actionDisabled"?: boolean;
        "actionUrl"?: string;
        "actionVariant"?: 'default' | 'outline' | 'ghost' | 'link';
        "description"?: string;
        "headline"?: string;
        "illustration"?: 'no-document';
    }
    /**
     * @name Flow Designer
     * @category Up coming
     * @description An interactive button with a range of presentation options.
     * @img /assets/img/flow-designer.png
     */
    interface GoatFlowDesigner {
        "blockSize"?: number;
        "data"?: any[];
        "disabled"?: boolean;
    }
    /**
     * @name Form Control
     * @description The Form Control component adds a label and caption for its child control.
     * @category Form Inputs
     * @tags form
     * @example <goat-form-control label='Full Name' required>
     * <goat-input type='text'></goat-input>
     * </goat-form-control>
     */
    interface GoatFormControl {
        /**
          * The caption for the form control.
         */
        "caption"?: string;
        "error"?: string;
        "inline"?: boolean;
        /**
          * The label for the form control.
         */
        "label"?: string;
        /**
          * Whether the form control is required.
         */
        "required"?: boolean;
        "success"?: string;
        "warning"?: string;
    }
    /**
     * @name Header
     * @description Headers are compositions that extend standard navbar functionalities.
     * @category Navigation
     * @img /assets/img/header.png
     * @imgDark /assets/img/header-dark.png
     */
    interface GoatHeader {
        "float"?: boolean;
    }
    interface GoatHeaderAction {
        "badge"?: string;
        "color"?: 'primary' | 'secondary' | 'success' | 'danger' | 'brand-primary' | 'brand-secondary';
        /**
          * Hyperlink to navigate to on click.
         */
        "href"?: string;
        /**
          * Icon which will displayed on button. Possible values are icon names.
         */
        "icon"?: string;
        /**
          * Button selection state.
         */
        "selected"?: boolean;
        /**
          * Button size. Possible values are `"sm"`, `"md"`, `"lg"`, `"xl"`, `"xxl"`, `"none"`. Defaults to `"md"`.
         */
        "size"?: 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'none';
        /**
          * Sets or retrieves the window or frame at which to target content.
         */
        "target"?: string;
        "variant"?: 'default' | 'outline' | 'ghost' | 'link';
    }
    interface GoatHeaderBrand {
        "color"?: string;
        "href"?: string;
        "logo"?: string;
        "name"?: string;
        "subTitle"?: string;
    }
    /**
     * @name HTML Editor
     * @description A browser based html editor.
     * @category Up coming
     * @tags input, form
     * @img /assets/img/html-editor.png
     * @imgDark /assets/img/html-editor-dark.png
     */
    interface GoatHtmlEditor {
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `onChange` event after each keystroke.
         */
        "debounce"?: number;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled"?: boolean;
        "lineNumbers"?: 'off' | 'on';
        /**
          * The input field name.
         */
        "name"?: string;
        /**
          * Emitted when the value has changed..
         */
        "onGoat:change"?: (event: GoatHtmlEditorCustomEvent<any>) => void;
        "readonly"?: boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
         */
        "required"?: boolean;
        "theme"?: 'vs-light' | 'vs-dark';
        /**
          * The input field value.
         */
        "value"?: string;
    }
    /**
     * @name Icon
     * @description Icons are visual symbols used to represent ideas, objects, or actions. They communicate messages at a glance, afford interactivity, and draw attention to important information.
     * @category General
     * @example <goat-icon name="home" size="2rem"></goat-icon>
     */
    interface GoatIcon {
        "name"?: string;
        /**
          * The Icon size.
         */
        "size"?: string;
    }
    interface GoatImage {
        "darkSrc"?: string;
        "imageTitle"?: string;
        "src"?: string;
    }
    /**
     * @name Input
     * @description Enables native inputs to be used within a Form field.
     * @category Form Inputs
     * @tags input, form
     * @example <goat-input placeholder="Enter your name"></goat-input>
     */
    interface GoatInput {
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
         */
        "autocomplete"?: 'on' | 'off';
        /**
          * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
         */
        "clearable"?: boolean;
        "configAria"?: any;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `goatChange` event after each keystroke.
         */
        "debounce"?: number;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled"?: boolean;
        "hideActions"?: boolean;
        "inline"?: boolean;
        /**
          * The input field name.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onGoat:blur"?: (event: GoatInputCustomEvent<any>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onGoat:change"?: (event: GoatInputCustomEvent<any>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onGoat:focus"?: (event: GoatInputCustomEvent<any>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onGoat:input"?: (event: GoatInputCustomEvent<any>) => void;
        /**
          * The input field placeholder.
         */
        "placeholder"?: string;
        /**
          * If true, the user read the value cannot modify it. Defaults to `false`.
         */
        "readonly"?: boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
         */
        "required"?: boolean;
        /**
          * The input field size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
         */
        "size"?: 'sm' | 'md' | 'lg';
        /**
          * The input state. Possible values are: `"success"`, `"error"`, `"warning"`, 'default'. Defaults to `"default"`.
         */
        "state"?: 'success' | 'error' | 'warning' | 'default';
        /**
          * The type of control to display. Possible values are: `"text"`, `"password"`, `"email"`, `"tel"`. Defaults to `"text"`.
         */
        "type"?: 'text' | 'password' | 'email' | 'tel';
        /**
          * The input field value.
         */
        "value"?: string | number | null;
    }
    /**
     * @name Link
     * @description Links allow users to click their way from page to page.
     * @category Navigation
     * @example <goat-link href="#">Link</goat-link>
     */
    interface GoatLink {
        /**
          * Hyperlink to navigate to on click.
         */
        "href"?: string;
        /**
          * Sets or retrieves the window or frame at which to target content.
         */
        "target"?: string;
    }
    /**
     * @name Menu
     * @description Menus display a list of choices on temporary surfaces.
     * @category Navigation
     * @img /assets/img/menu.png
     * @imgDark /assets/img/menu-dark.png
     */
    interface GoatMenu {
        "empty"?: boolean;
        "emptyState"?: any;
        "showLoader"?: boolean;
        "value"?: string | number;
    }
    interface GoatMenuItem {
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled"?: boolean;
        /**
          * Emitted when the menu item is clicked.
         */
        "onGoat:menu-item-click"?: (event: GoatMenuItemCustomEvent<any>) => void;
        /**
          * Menu item selection state.
         */
        "selected"?: boolean;
        /**
          * The menu item value.
         */
        "value"?: string | number | null;
    }
    /**
     * @name Modal
     * @description Modals are used to display content in a layer above the app.
     * @tags controls
     */
    interface GoatModal {
        "show"?: boolean;
    }
    /**
     * @name Notification
     * @description Notifications are messages that communicate information to the user.
     * @category Feedback
     * @tags notification
     * @example <goat-notification state="success">
     *      <div slot='title'>Successful saved the record</div>
     *    </goat-notification>
     */
    interface GoatNotification {
        "actionLabel"?: string;
        "actionName"?: string;
        "actionable"?: boolean;
        "dismissible"?: boolean;
        "lowContrast"?: boolean;
        "onGoat:dismiss"?: (event: GoatNotificationCustomEvent<any>) => void;
        "state"?: 'success' | 'error' | 'info' | 'warning';
    }
    /**
     * @name Notification Manager
     * @description Manages alert, toasts and notifications.
     * @category Feedback
     * @tags notification
     * @img /assets/img/notification-manager.png
     * @imgDark /assets/img/notification-manager-dark.png
     */
    interface GoatNotificationManager {
        "name"?: string;
        "position"?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left';
    }
    /**
     * @name Number
     * @description Enables native inputs to be used within a Form field.
     * @category Form Inputs
     * @tags input, form
     * @example <goat-number value="100"></goat-input>
     */
    interface GoatNumber {
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
         */
        "autocomplete"?: 'on' | 'off';
        /**
          * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
         */
        "clearable"?: boolean;
        "configAria"?: any;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `goatChange` event after each keystroke.
         */
        "debounce"?: number;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled"?: boolean;
        "hideActions"?: boolean;
        /**
          * The input field name.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onGoat:blur"?: (event: GoatNumberCustomEvent<any>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onGoat:change"?: (event: GoatNumberCustomEvent<any>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onGoat:focus"?: (event: GoatNumberCustomEvent<any>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onGoat:input"?: (event: GoatNumberCustomEvent<any>) => void;
        /**
          * The input field placeholder.
         */
        "placeholder"?: string;
        /**
          * If true, the user read the value cannot modify it. Defaults to `false`.
         */
        "readonly"?: boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
         */
        "required"?: boolean;
        /**
          * The input field size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
         */
        "size"?: 'sm' | 'md' | 'lg';
        /**
          * The input state. Possible values are: `"success"`, `"error"`, `"warning"`, 'default'. Defaults to `"default"`.
         */
        "state"?: 'success' | 'error' | 'warning' | 'default';
        /**
          * The input field value.
         */
        "value"?: number | null;
    }
    /**
     * @name Progress
     * @description Progress indicators express an unspecified wait time or display the length of a process.
     * @category Feedback
     * @tags feedback, loading, progress, spinner
     * @example <goat-progress value="40" label="Progress" width="100%" helper-text="Optional helper text goes here..."></goat-progress>
     */
    interface GoatProgress {
        "helperText"?: string;
        "hideLabel"?: boolean;
        "label"?: string;
        /**
          * Possible values are: `"sm"` and `"md"` in pixel. Defaults to `"md"`.
         */
        "size"?: 'sm' | 'md';
        "status"?: 'active' | 'success' | 'error';
        "value"?: number;
    }
    /**
     * @name Select
     * @description Allows the user to select one or more options using a dropdown.
     * @category Form Inputs
     * @tags input, form
     * @img /assets/img/select.png
     * @imgDark /assets/img/select-dark.png
     */
    interface GoatSelect {
        /**
          * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
         */
        "clearable"?: boolean;
        "configAria"?: any;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `goatChange` event after each keystroke.
         */
        "debounce"?: number;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled"?: boolean;
        "hideDropdownIcon"?: boolean;
        "inline"?: boolean;
        "isOpen"?: boolean;
        /**
          * [{   label: 'Shivaji Varma',   value: 'shivaji-varma',   icon: 'person' }]
         */
        "items"?: any;
        "multiple"?: boolean;
        /**
          * The input field name.
         */
        "name"?: string;
        /**
          * Emitted when the value has changed.
         */
        "onGoat:change"?: (event: GoatSelectCustomEvent<any>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onGoat:search"?: (event: GoatSelectCustomEvent<any>) => void;
        "onGoat:search-enter"?: (event: GoatSelectCustomEvent<any>) => void;
        /**
          * The input field placeholder.
         */
        "placeholder"?: string;
        "positions"?: string;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "readonly"?: boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
         */
        "required"?: boolean;
        /**
          * Search type Possible values are `"none"`, `"initial"`, `"contains"`, `"managed"`. Defaults to `"none"`.
         */
        "search"?: 'none' | 'initial' | 'contains' | 'managed';
        "showLoader"?: boolean;
        /**
          * The select input size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
         */
        "size"?: 'sm' | 'md' | 'lg';
        /**
          * The input state. Possible values are: `"success"`, `"error"`, `"warning"`, 'default'. Defaults to `"default"`.
         */
        "state"?: 'success' | 'error' | 'warning' | 'default';
        /**
          * The input field value.
         */
        "value"?: string | number;
    }
    /**
     * @name1 Side Navigation
     * @description1 The side navigation component provides an easy way to navigate through your website / application.
     * @img1 /assets/img/sidenav.png
     */
    interface GoatSidenav {
        "showLoader"?: boolean;
    }
    interface GoatSidenavMenu {
        "empty"?: boolean;
        "emptyState"?: any;
        "showLoader"?: boolean;
        "value"?: string | number;
    }
    interface GoatSidenavMenuItem {
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled"?: boolean;
        /**
          * Emitted when the menu item is clicked.
         */
        "onGoat:sidenav-menu-item-click"?: (event: GoatSidenavMenuItemCustomEvent<any>) => void;
        /**
          * Menu item selection state.
         */
        "selected"?: boolean;
        /**
          * The menu item value.
         */
        "value"?: string | number | null;
    }
    /**
     * @name Slider
     * @description Allows the user to select one or more options using a dropdown.
     * @category Form Inputs
     * @tags input, form
     * @img /assets/img/slider.png
     * @imgDark /assets/img/slider-dark.png
     */
    interface GoatSlider {
        "configAria"?: any;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `goatChange` event after each keystroke.
         */
        "debounce"?: number;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled"?: boolean;
        "max"?: number;
        "min"?: number;
        /**
          * The input field name.
         */
        "name"?: string;
        /**
          * Emitted when the value has changed.
         */
        "onGoat:change"?: (event: GoatSliderCustomEvent<any>) => void;
        "onGoat:input"?: (event: GoatSliderCustomEvent<any>) => void;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "readonly"?: boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
         */
        "required"?: boolean;
        /**
          * The input field value.
         */
        "value"?: number;
    }
    /**
     * @name Spinner
     * @description Spinners provide a visual cue that an action is processing awaiting a course of change or a result.
     * @category Feedback
     * @tags feedback, loading, progress, spinner
     * @example <goat-spinner class="rainbow" size="2rem"></goat-spinner>
     */
    interface GoatSpinner {
        /**
          * The Icon size. Possible values are: `"sm"`, `"md"`, `"lg"`, `"xl"` and size in pixel. Defaults to `"md"`.
         */
        "size"?: 'sm' | 'md' | 'lg' | 'xl' | string;
    }
    /**
     * @name SVG
     * @description Render SVG content from an external source.
     * @category Data Display
     * @example <goat-svg src="https://icons.getbootstrap.com/assets/icons/bug.svg" size="2rem"></goat-svg>
     */
    interface GoatSvg {
        /**
          * The Icon size.
         */
        "size"?: string;
        "src"?: string;
    }
    interface GoatTab {
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled"?: boolean;
        "disabledReason"?: string;
        /**
          * Icon which will displayed on button. Possible values are bootstrap icon names.
         */
        "icon"?: string;
        "label"?: string;
        /**
          * On click of tab, a CustomEvent 'goat:tab-click' will be triggered.
         */
        "onGoat:tab-click"?: (event: GoatTabCustomEvent<any>) => void;
        /**
          * Button selection state.
         */
        "selected"?: boolean;
        /**
          * Show loader.
         */
        "showLoader"?: boolean;
        "target"?: string;
        "value"?: string;
    }
    interface GoatTabPanel {
        "active"?: boolean;
        "value"?: string;
    }
    /**
     * @name Table
     * @description A configurable component for displaying tabular data.
     * @category Data Display
     * @img /assets/img/table.png
     * @imgDark /assets/img/table-dark.png
     */
    interface GoatTable {
        /**
          * Grid columns configuration. [ {   "name":"name",   "label":"Name",   "width":300,   "fixed":true,   "template": function(row, column) { return row[column.name];}  }, {   "name":"age",   "label":"Age" } ]
         */
        "columns"?: any[];
        /**
          * Grid data to display on table [{  'id': '5e7118ddce4b3d577956457f',  'age': 21,  'name': 'John',  'company': 'India',  'email': 'john@example.com',  'phone': '+1 (839) 560-3581',  'address': '326 Irving Street, Grimsley, Texas, 4048'  }]
         */
        "data"?: any[];
        "emptyState"?: any;
        "keyField"?: string;
        "managed"?: boolean;
        "onGoat:page"?: (event: GoatTableCustomEvent<any>) => void;
        "onGoat:sort"?: (event: GoatTableCustomEvent<any>) => void;
        "onGoat:table-cell-click"?: (event: GoatTableCustomEvent<any>) => void;
        "onGoat:table-select-change"?: (event: GoatTableCustomEvent<any>) => void;
        "page"?: number;
        "pageSize"?: number;
        "paginate"?: boolean;
        "selectedRowKeys"?: string[];
        "selectionType"?: 'checkbox' | undefined;
        "sortBy"?: string;
        "sortOrder"?: 'asc' | 'desc';
        "sortable"?: boolean;
        "totalItems"?: any;
    }
    /**
     * @name Tabs
     * @description An interactive button with a range of presentation options.
     * @category Navigation
     * @tags navigation
     * @example <goat-tabs>
     * <goat-tabs-list>
     * <goat-tab selected >Tab 1</goat-tab>
     * <goat-tab>Tab 2</goat-tab>
     * </goat-tabs-list>
     * </goat-tabs>
     */
    interface GoatTabs {
    }
    interface GoatTabsList {
        "managed"?: boolean;
        "variant"?: 'line' | 'contained';
    }
    /**
     * @name Tag
     * @description Use tags to label, categorize, or organize items using keywords that describe them.
     * @category Data Display
     * @tag controls
     * @example <goat-tag class="color-red">Important</goat-tag>
     */
    interface GoatTag {
        "color"?: 'gray' | 'blue' | 'green' | 'red' | 'yellow' | 'primary' | 'success' | 'info' | 'warning' | 'error';
        "filter"?: boolean;
        "imageSrc"?: string;
        "onGoat:click"?: (event: GoatTagCustomEvent<any>) => void;
        "onGoat:tag-dismiss"?: (event: GoatTagCustomEvent<any>) => void;
        /**
          * Text size.
         */
        "size"?: 'sm' | 'md';
        "value"?: string;
    }
    /**
     * @name Text
     * @description Typography are used for rendering headlines, paragraphs and captions.
     * @category General
     * @example <goat-text type="heading" level="1">Heading</goat-typography>
     */
    interface GoatText {
        "color"?: 'primary' | 'secondary' | 'tertiary' | 'helper' | 'error' | 'on-color' | 'inverse';
        "configAria"?: any;
        "expressive"?: boolean;
        "headingLevel"?: 1 | 2 | 3 | 4 | 5 | 6;
        "headingSize"?: 1 | 2 | 3 | 4 | 5 | 6 | 7;
        "inline"?: boolean;
        "type"?: 'code' | 'helper-text' | 'label' | 'legal' | 'heading' | 'body' | 'body-compact' | 'heading-compact';
    }
    /**
     * @name Textarea
     * @description Enables native inputs to be used within a Form field.
     * @category Form Inputs
     * @tags input, form
     * @example <goat-textarea placeholder="Enter some description over here"></goat-textarea>
     */
    interface GoatTextarea {
        /**
          * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
         */
        "clearable"?: boolean;
        "configAria"?: any;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `goat:change` event after each keystroke.
         */
        "debounce"?: number;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled"?: boolean;
        /**
          * The input field name.
         */
        "name"?: string;
        /**
          * Emitted when the action button is clicked.
         */
        "onGoat:action-click"?: (event: GoatTextareaCustomEvent<any>) => void;
        /**
          * Emitted when the input loses focus.
         */
        "onGoat:blur"?: (event: GoatTextareaCustomEvent<any>) => void;
        /**
          * Emitted when the value has changed..
         */
        "onGoat:change"?: (event: GoatTextareaCustomEvent<any>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onGoat:focus"?: (event: GoatTextareaCustomEvent<any>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onGoat:input"?: (event: GoatTextareaCustomEvent<any>) => void;
        /**
          * The input field placeholder.
         */
        "placeholder"?: string;
        /**
          * If true, the user read the value cannot modify it. Defaults to `false`.
         */
        "readonly"?: boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
         */
        "required"?: boolean;
        /**
          * The input state. Possible values are: `"success"`, `"error"`, `"warning"`, 'default'. Defaults to `"default"`.
         */
        "state"?: 'success' | 'error' | 'warning' | 'default';
        /**
          * The input field value.
         */
        "value"?: string;
    }
    /**
     * @name Time Picker
     * @description Captures time input.
     * @category Form Inputs
     * @tags input, form
     * @example <goat-time-picker value='true'></goat-time-picker>
     */
    interface GoatTimePicker {
        "configAria"?: any;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled"?: boolean;
        "inline"?: boolean;
        /**
          * The input field name.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onGoat:blur"?: (event: GoatTimePickerCustomEvent<any>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onGoat:change"?: (event: GoatTimePickerCustomEvent<any>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onGoat:focus"?: (event: GoatTimePickerCustomEvent<any>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onGoat:input"?: (event: GoatTimePickerCustomEvent<any>) => void;
        /**
          * The input field placeholder.
         */
        "placeholder"?: string;
        /**
          * If true, the user read the value cannot modify it. Defaults to `false`.
         */
        "readonly"?: boolean;
        /**
          * The input field size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
         */
        "size"?: 'sm' | 'md' | 'lg';
        /**
          * The input field value.
         */
        "value"?: string | number | null;
    }
    /**
     * @name Toast
     * @description Toasts are lightweight notifications.
     * @category Feedback
     * @example <goat-toast state="success" message="Successful saved the record"></goat-toast>
     */
    interface GoatToast {
        /**
          * Message to display in the toast.
         */
        "message"?: string;
        /**
          * Toast state. Possible values are `"success"`, `"error"`, `"info"`, `"warning"`. Defaults to `"info"`.
         */
        "state"?: 'success' | 'error' | 'info' | 'warning';
    }
    /**
     * @name Toggle
     * @description Captures boolean input with an optional indeterminate mode.
     * @category Form Inputs
     * @tags input, form
     * @example <goat-toggle value='true'>Want ice cream?</goat-toggle>
     */
    interface GoatToggle {
        "configAria"?: any;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled"?: boolean;
        /**
          * The checkbox label.
         */
        "label"?: string;
        /**
          * The input field name.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onGoat:blur"?: (event: GoatToggleCustomEvent<any>) => void;
        /**
          * On change of input a CustomEvent 'goat:change' will be triggered. Event details contains parent event, oldValue, newValue of input.
         */
        "onGoat:change"?: (event: GoatToggleCustomEvent<any>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onGoat:focus"?: (event: GoatToggleCustomEvent<any>) => void;
        "readonly"?: boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
         */
        "required"?: boolean;
        "rounded"?: boolean;
        /**
          * The button size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
         */
        "size"?: 'md' | 'lg';
        /**
          * The input field value.
         */
        "value"?: boolean;
    }
    interface GoatTreeNode {
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
         */
        "disabled"?: boolean;
        "expanded"?: boolean;
        /**
          * Hyperlink to navigate to on click.
         */
        "href"?: string;
        "label"?: string;
        "level"?: number;
        /**
          * Emitted when the menu item is clicked.
         */
        "onGoat:tree-node-click"?: (event: GoatTreeNodeCustomEvent<any>) => void;
        /**
          * Menu item selection state.
         */
        "selectedNode"?: string;
        /**
          * The menu item value.
         */
        "value"?: string | number | null;
    }
    /**
     * @name TreeView
     * @description A tree view is a hierarchical structure that provides nested levels of navigation.
     * @category Navigation
     * @img /assets/img/tree-view.png
     * @imgDark /assets/img/tree-view-dark.png
     */
    interface GoatTreeView {
        "empty"?: boolean;
        "emptyState"?: string;
        "selectedNode"?: string;
    }
    interface IntrinsicElements {
        "goat-accordion": GoatAccordion;
        "goat-accordion-item": GoatAccordionItem;
        "goat-avatar": GoatAvatar;
        "goat-badge": GoatBadge;
        "goat-breadcrumb": GoatBreadcrumb;
        "goat-breadcrumb-item": GoatBreadcrumbItem;
        "goat-button": GoatButton;
        "goat-button-group": GoatButtonGroup;
        "goat-calendar": GoatCalendar;
        "goat-calendar-column-view": GoatCalendarColumnView;
        "goat-calendar-column-view-background": GoatCalendarColumnViewBackground;
        "goat-calendar-month-view": GoatCalendarMonthView;
        "goat-calendar-month-view-background": GoatCalendarMonthViewBackground;
        "goat-canvas": GoatCanvas;
        "goat-card": GoatCard;
        "goat-cb-compound-expression": GoatCbCompoundExpression;
        "goat-cb-divider": GoatCbDivider;
        "goat-cb-expression": GoatCbExpression;
        "goat-cb-predicate": GoatCbPredicate;
        "goat-checkbox": GoatCheckbox;
        "goat-code-editor": GoatCodeEditor;
        "goat-code-highlighter": GoatCodeHighlighter;
        "goat-condition-builder": GoatConditionBuilder;
        "goat-container": GoatContainer;
        "goat-current-time": GoatCurrentTime;
        "goat-date-picker": GoatDatePicker;
        "goat-divider": GoatDivider;
        "goat-dropdown": GoatDropdown;
        "goat-empty-state": GoatEmptyState;
        "goat-flow-designer": GoatFlowDesigner;
        "goat-form-control": GoatFormControl;
        "goat-header": GoatHeader;
        "goat-header-action": GoatHeaderAction;
        "goat-header-brand": GoatHeaderBrand;
        "goat-html-editor": GoatHtmlEditor;
        "goat-icon": GoatIcon;
        "goat-image": GoatImage;
        "goat-input": GoatInput;
        "goat-link": GoatLink;
        "goat-menu": GoatMenu;
        "goat-menu-item": GoatMenuItem;
        "goat-modal": GoatModal;
        "goat-notification": GoatNotification;
        "goat-notification-manager": GoatNotificationManager;
        "goat-number": GoatNumber;
        "goat-progress": GoatProgress;
        "goat-select": GoatSelect;
        "goat-sidenav": GoatSidenav;
        "goat-sidenav-menu": GoatSidenavMenu;
        "goat-sidenav-menu-item": GoatSidenavMenuItem;
        "goat-slider": GoatSlider;
        "goat-spinner": GoatSpinner;
        "goat-svg": GoatSvg;
        "goat-tab": GoatTab;
        "goat-tab-panel": GoatTabPanel;
        "goat-table": GoatTable;
        "goat-tabs": GoatTabs;
        "goat-tabs-list": GoatTabsList;
        "goat-tag": GoatTag;
        "goat-text": GoatText;
        "goat-textarea": GoatTextarea;
        "goat-time-picker": GoatTimePicker;
        "goat-toast": GoatToast;
        "goat-toggle": GoatToggle;
        "goat-tree-node": GoatTreeNode;
        "goat-tree-view": GoatTreeView;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * @name Accordion
             * @description An accordion is a vertically stacked list of headers that reveal or hide associated sections of content.
             * @category Data Display
             * @tags display
             * @img /assets/img/accordion.png
             * @imgDark /assets/img/accordion-dark.png
             */
            "goat-accordion": LocalJSX.GoatAccordion & JSXBase.HTMLAttributes<HTMLGoatAccordionElement>;
            "goat-accordion-item": LocalJSX.GoatAccordionItem & JSXBase.HTMLAttributes<HTMLGoatAccordionItemElement>;
            /**
             * @name Avatar
             * @description Avatars in their simplest form display content within a circular container.
             * @category Data Display
             * @tags display
             * @example <goat-avatar size="5rem" name="Shivaji Varma" src="/assets/img/avatar.png"></goat-avatar>
             */
            "goat-avatar": LocalJSX.GoatAvatar & JSXBase.HTMLAttributes<HTMLGoatAvatarElement>;
            /**
             * @name Badge
             * @description Renders a specified badge.
             * @category Data Display
             * @tag content
             * @example <goat-badge content="5" class='color-error'> <goat-icon name="notification" size="lg"></goat-icon></goat-badge>
             */
            "goat-badge": LocalJSX.GoatBadge & JSXBase.HTMLAttributes<HTMLGoatBadgeElement>;
            /**
             * @name Breadcrumb
             * @description Typography are used for rendering headlines, paragraphs and captions.
             * @category Navigation
             * @tags navigation
             * @example <goat-breadcrumb><goat-breadcrumb-item href="#">Home</goat-breadcrumb-item><goat-breadcrumb-item href="#" active>Page</goat-breadcrumb-item></goat-breadcrumb>
             */
            "goat-breadcrumb": LocalJSX.GoatBreadcrumb & JSXBase.HTMLAttributes<HTMLGoatBreadcrumbElement>;
            "goat-breadcrumb-item": LocalJSX.GoatBreadcrumbItem & JSXBase.HTMLAttributes<HTMLGoatBreadcrumbItemElement>;
            /**
             * @name Button
             * @description An interactive button with a range of presentation options.
             * @category General
             * @tags controls
             * @example <goat-button>
             * Button CTA
             * </goat-button>
             */
            "goat-button": LocalJSX.GoatButton & JSXBase.HTMLAttributes<HTMLGoatButtonElement>;
            /**
             * @name Button Group
             * @description Group a series of buttons together on a single line with the button group, and super-power.
             * @category General
             * @tags controls
             * @example <goat-button-group>
             * <goat-button block icon="home"></goat-button>
             * <goat-button block icon="alarm"></goat-button>
             * </goat-button-group>
             */
            "goat-button-group": LocalJSX.GoatButtonGroup & JSXBase.HTMLAttributes<HTMLGoatButtonGroupElement>;
            /**
             * @name Calendar
             * @description The calendar component is used to display information in a daily, weekly, monthly, or category view.
             * @category Data Display
             * @tags calendar
             * @img /assets/img/calendar.png
             * @imgDark /assets/img/calendar-dark.png
             */
            "goat-calendar": LocalJSX.GoatCalendar & JSXBase.HTMLAttributes<HTMLGoatCalendarElement>;
            "goat-calendar-column-view": LocalJSX.GoatCalendarColumnView & JSXBase.HTMLAttributes<HTMLGoatCalendarColumnViewElement>;
            "goat-calendar-column-view-background": LocalJSX.GoatCalendarColumnViewBackground & JSXBase.HTMLAttributes<HTMLGoatCalendarColumnViewBackgroundElement>;
            "goat-calendar-month-view": LocalJSX.GoatCalendarMonthView & JSXBase.HTMLAttributes<HTMLGoatCalendarMonthViewElement>;
            "goat-calendar-month-view-background": LocalJSX.GoatCalendarMonthViewBackground & JSXBase.HTMLAttributes<HTMLGoatCalendarMonthViewBackgroundElement>;
            /**
             * @name Canvas
             * @category Up coming
             * @description Canvas for drawing lines and shapes on.
             * @img /assets/img/canvas.png
             */
            "goat-canvas": LocalJSX.GoatCanvas & JSXBase.HTMLAttributes<HTMLGoatCanvasElement>;
            "goat-card": LocalJSX.GoatCard & JSXBase.HTMLAttributes<HTMLGoatCardElement>;
            "goat-cb-compound-expression": LocalJSX.GoatCbCompoundExpression & JSXBase.HTMLAttributes<HTMLGoatCbCompoundExpressionElement>;
            "goat-cb-divider": LocalJSX.GoatCbDivider & JSXBase.HTMLAttributes<HTMLGoatCbDividerElement>;
            "goat-cb-expression": LocalJSX.GoatCbExpression & JSXBase.HTMLAttributes<HTMLGoatCbExpressionElement>;
            "goat-cb-predicate": LocalJSX.GoatCbPredicate & JSXBase.HTMLAttributes<HTMLGoatCbPredicateElement>;
            /**
             * @name Checkbox
             * @description Captures boolean input with an optional indeterminate mode.
             * @category Form Inputs
             * @tags input, form
             * @example <goat-checkbox value='true'>Want ice cream?</goat-checkbox>
             */
            "goat-checkbox": LocalJSX.GoatCheckbox & JSXBase.HTMLAttributes<HTMLGoatCheckboxElement>;
            /**
             * @name Code Editor
             * @description A browser based code editor.
             * @category Form Inputs
             * @tags input, form
             * @img /assets/img/code-editor.png
             * @imgDark /assets/img/code-editor-dark.png
             */
            "goat-code-editor": LocalJSX.GoatCodeEditor & JSXBase.HTMLAttributes<HTMLGoatCodeEditorElement>;
            /**
             * @name Code Highlighter
             * @description A browser based code highlighter.
             * @category Data Display
             * @tag display, code
             * @img /assets/img/code-highlighter.png
             * @imgDark /assets/img/code-highlighter-dark.png
             */
            "goat-code-highlighter": LocalJSX.GoatCodeHighlighter & JSXBase.HTMLAttributes<HTMLGoatCodeHighlighterElement>;
            /**
             * @name Condition Builder
             * @description A condition builder is a component that allows users to build a condition using a set of rules.
             * @category Up coming
             * @category Data Display
             * @tag content
             * @img /assets/img/condition-builder.png
             */
            "goat-condition-builder": LocalJSX.GoatConditionBuilder & JSXBase.HTMLAttributes<HTMLGoatConditionBuilderElement>;
            "goat-container": LocalJSX.GoatContainer & JSXBase.HTMLAttributes<HTMLGoatContainerElement>;
            /**
             * @name Current Time
             * @description The current time component displays the current time in a 12-hour format.
             * @category General
             * @tags controls
             * @example <goat-current-time></goat-current-time>
             */
            "goat-current-time": LocalJSX.GoatCurrentTime & JSXBase.HTMLAttributes<HTMLGoatCurrentTimeElement>;
            /**
             * @name Date Picker
             * @category Form Inputs
             * @description Captures date input.
             * @example <goat-date-picker value='true'></goat-date-picker>
             */
            "goat-date-picker": LocalJSX.GoatDatePicker & JSXBase.HTMLAttributes<HTMLGoatDatePickerElement>;
            /**
             * @name Divider
             * @description A divider can be used to segment content vertically or horizontally.
             * @category Layout
             * @example <goat-divider style="width: 12rem;">or</goat-divider>
             */
            "goat-divider": LocalJSX.GoatDivider & JSXBase.HTMLAttributes<HTMLGoatDividerElement>;
            /**
             * @name Dropdown
             * @description Enables native inputs to be used within a Form field.
             * @category Navigation
             * @img /assets/img/dropdown.png
             * @imgDark /assets/img/dropdown-dark.png
             */
            "goat-dropdown": LocalJSX.GoatDropdown & JSXBase.HTMLAttributes<HTMLGoatDropdownElement>;
            /**
             * @name Empty State
             * @description A message that displays when there is no information to display.
             * @category Data Display
             * @example <goat-empty-state class="content-center" headline="Empty list" description="Nothing to display">
             * </goat-empty-state>
             */
            "goat-empty-state": LocalJSX.GoatEmptyState & JSXBase.HTMLAttributes<HTMLGoatEmptyStateElement>;
            /**
             * @name Flow Designer
             * @category Up coming
             * @description An interactive button with a range of presentation options.
             * @img /assets/img/flow-designer.png
             */
            "goat-flow-designer": LocalJSX.GoatFlowDesigner & JSXBase.HTMLAttributes<HTMLGoatFlowDesignerElement>;
            /**
             * @name Form Control
             * @description The Form Control component adds a label and caption for its child control.
             * @category Form Inputs
             * @tags form
             * @example <goat-form-control label='Full Name' required>
             * <goat-input type='text'></goat-input>
             * </goat-form-control>
             */
            "goat-form-control": LocalJSX.GoatFormControl & JSXBase.HTMLAttributes<HTMLGoatFormControlElement>;
            /**
             * @name Header
             * @description Headers are compositions that extend standard navbar functionalities.
             * @category Navigation
             * @img /assets/img/header.png
             * @imgDark /assets/img/header-dark.png
             */
            "goat-header": LocalJSX.GoatHeader & JSXBase.HTMLAttributes<HTMLGoatHeaderElement>;
            "goat-header-action": LocalJSX.GoatHeaderAction & JSXBase.HTMLAttributes<HTMLGoatHeaderActionElement>;
            "goat-header-brand": LocalJSX.GoatHeaderBrand & JSXBase.HTMLAttributes<HTMLGoatHeaderBrandElement>;
            /**
             * @name HTML Editor
             * @description A browser based html editor.
             * @category Up coming
             * @tags input, form
             * @img /assets/img/html-editor.png
             * @imgDark /assets/img/html-editor-dark.png
             */
            "goat-html-editor": LocalJSX.GoatHtmlEditor & JSXBase.HTMLAttributes<HTMLGoatHtmlEditorElement>;
            /**
             * @name Icon
             * @description Icons are visual symbols used to represent ideas, objects, or actions. They communicate messages at a glance, afford interactivity, and draw attention to important information.
             * @category General
             * @example <goat-icon name="home" size="2rem"></goat-icon>
             */
            "goat-icon": LocalJSX.GoatIcon & JSXBase.HTMLAttributes<HTMLGoatIconElement>;
            "goat-image": LocalJSX.GoatImage & JSXBase.HTMLAttributes<HTMLGoatImageElement>;
            /**
             * @name Input
             * @description Enables native inputs to be used within a Form field.
             * @category Form Inputs
             * @tags input, form
             * @example <goat-input placeholder="Enter your name"></goat-input>
             */
            "goat-input": LocalJSX.GoatInput & JSXBase.HTMLAttributes<HTMLGoatInputElement>;
            /**
             * @name Link
             * @description Links allow users to click their way from page to page.
             * @category Navigation
             * @example <goat-link href="#">Link</goat-link>
             */
            "goat-link": LocalJSX.GoatLink & JSXBase.HTMLAttributes<HTMLGoatLinkElement>;
            /**
             * @name Menu
             * @description Menus display a list of choices on temporary surfaces.
             * @category Navigation
             * @img /assets/img/menu.png
             * @imgDark /assets/img/menu-dark.png
             */
            "goat-menu": LocalJSX.GoatMenu & JSXBase.HTMLAttributes<HTMLGoatMenuElement>;
            "goat-menu-item": LocalJSX.GoatMenuItem & JSXBase.HTMLAttributes<HTMLGoatMenuItemElement>;
            /**
             * @name Modal
             * @description Modals are used to display content in a layer above the app.
             * @tags controls
             */
            "goat-modal": LocalJSX.GoatModal & JSXBase.HTMLAttributes<HTMLGoatModalElement>;
            /**
             * @name Notification
             * @description Notifications are messages that communicate information to the user.
             * @category Feedback
             * @tags notification
             * @example <goat-notification state="success">
             *      <div slot='title'>Successful saved the record</div>
             *    </goat-notification>
             */
            "goat-notification": LocalJSX.GoatNotification & JSXBase.HTMLAttributes<HTMLGoatNotificationElement>;
            /**
             * @name Notification Manager
             * @description Manages alert, toasts and notifications.
             * @category Feedback
             * @tags notification
             * @img /assets/img/notification-manager.png
             * @imgDark /assets/img/notification-manager-dark.png
             */
            "goat-notification-manager": LocalJSX.GoatNotificationManager & JSXBase.HTMLAttributes<HTMLGoatNotificationManagerElement>;
            /**
             * @name Number
             * @description Enables native inputs to be used within a Form field.
             * @category Form Inputs
             * @tags input, form
             * @example <goat-number value="100"></goat-input>
             */
            "goat-number": LocalJSX.GoatNumber & JSXBase.HTMLAttributes<HTMLGoatNumberElement>;
            /**
             * @name Progress
             * @description Progress indicators express an unspecified wait time or display the length of a process.
             * @category Feedback
             * @tags feedback, loading, progress, spinner
             * @example <goat-progress value="40" label="Progress" width="100%" helper-text="Optional helper text goes here..."></goat-progress>
             */
            "goat-progress": LocalJSX.GoatProgress & JSXBase.HTMLAttributes<HTMLGoatProgressElement>;
            /**
             * @name Select
             * @description Allows the user to select one or more options using a dropdown.
             * @category Form Inputs
             * @tags input, form
             * @img /assets/img/select.png
             * @imgDark /assets/img/select-dark.png
             */
            "goat-select": LocalJSX.GoatSelect & JSXBase.HTMLAttributes<HTMLGoatSelectElement>;
            /**
             * @name1 Side Navigation
             * @description1 The side navigation component provides an easy way to navigate through your website / application.
             * @img1 /assets/img/sidenav.png
             */
            "goat-sidenav": LocalJSX.GoatSidenav & JSXBase.HTMLAttributes<HTMLGoatSidenavElement>;
            "goat-sidenav-menu": LocalJSX.GoatSidenavMenu & JSXBase.HTMLAttributes<HTMLGoatSidenavMenuElement>;
            "goat-sidenav-menu-item": LocalJSX.GoatSidenavMenuItem & JSXBase.HTMLAttributes<HTMLGoatSidenavMenuItemElement>;
            /**
             * @name Slider
             * @description Allows the user to select one or more options using a dropdown.
             * @category Form Inputs
             * @tags input, form
             * @img /assets/img/slider.png
             * @imgDark /assets/img/slider-dark.png
             */
            "goat-slider": LocalJSX.GoatSlider & JSXBase.HTMLAttributes<HTMLGoatSliderElement>;
            /**
             * @name Spinner
             * @description Spinners provide a visual cue that an action is processing awaiting a course of change or a result.
             * @category Feedback
             * @tags feedback, loading, progress, spinner
             * @example <goat-spinner class="rainbow" size="2rem"></goat-spinner>
             */
            "goat-spinner": LocalJSX.GoatSpinner & JSXBase.HTMLAttributes<HTMLGoatSpinnerElement>;
            /**
             * @name SVG
             * @description Render SVG content from an external source.
             * @category Data Display
             * @example <goat-svg src="https://icons.getbootstrap.com/assets/icons/bug.svg" size="2rem"></goat-svg>
             */
            "goat-svg": LocalJSX.GoatSvg & JSXBase.HTMLAttributes<HTMLGoatSvgElement>;
            "goat-tab": LocalJSX.GoatTab & JSXBase.HTMLAttributes<HTMLGoatTabElement>;
            "goat-tab-panel": LocalJSX.GoatTabPanel & JSXBase.HTMLAttributes<HTMLGoatTabPanelElement>;
            /**
             * @name Table
             * @description A configurable component for displaying tabular data.
             * @category Data Display
             * @img /assets/img/table.png
             * @imgDark /assets/img/table-dark.png
             */
            "goat-table": LocalJSX.GoatTable & JSXBase.HTMLAttributes<HTMLGoatTableElement>;
            /**
             * @name Tabs
             * @description An interactive button with a range of presentation options.
             * @category Navigation
             * @tags navigation
             * @example <goat-tabs>
             * <goat-tabs-list>
             * <goat-tab selected >Tab 1</goat-tab>
             * <goat-tab>Tab 2</goat-tab>
             * </goat-tabs-list>
             * </goat-tabs>
             */
            "goat-tabs": LocalJSX.GoatTabs & JSXBase.HTMLAttributes<HTMLGoatTabsElement>;
            "goat-tabs-list": LocalJSX.GoatTabsList & JSXBase.HTMLAttributes<HTMLGoatTabsListElement>;
            /**
             * @name Tag
             * @description Use tags to label, categorize, or organize items using keywords that describe them.
             * @category Data Display
             * @tag controls
             * @example <goat-tag class="color-red">Important</goat-tag>
             */
            "goat-tag": LocalJSX.GoatTag & JSXBase.HTMLAttributes<HTMLGoatTagElement>;
            /**
             * @name Text
             * @description Typography are used for rendering headlines, paragraphs and captions.
             * @category General
             * @example <goat-text type="heading" level="1">Heading</goat-typography>
             */
            "goat-text": LocalJSX.GoatText & JSXBase.HTMLAttributes<HTMLGoatTextElement>;
            /**
             * @name Textarea
             * @description Enables native inputs to be used within a Form field.
             * @category Form Inputs
             * @tags input, form
             * @example <goat-textarea placeholder="Enter some description over here"></goat-textarea>
             */
            "goat-textarea": LocalJSX.GoatTextarea & JSXBase.HTMLAttributes<HTMLGoatTextareaElement>;
            /**
             * @name Time Picker
             * @description Captures time input.
             * @category Form Inputs
             * @tags input, form
             * @example <goat-time-picker value='true'></goat-time-picker>
             */
            "goat-time-picker": LocalJSX.GoatTimePicker & JSXBase.HTMLAttributes<HTMLGoatTimePickerElement>;
            /**
             * @name Toast
             * @description Toasts are lightweight notifications.
             * @category Feedback
             * @example <goat-toast state="success" message="Successful saved the record"></goat-toast>
             */
            "goat-toast": LocalJSX.GoatToast & JSXBase.HTMLAttributes<HTMLGoatToastElement>;
            /**
             * @name Toggle
             * @description Captures boolean input with an optional indeterminate mode.
             * @category Form Inputs
             * @tags input, form
             * @example <goat-toggle value='true'>Want ice cream?</goat-toggle>
             */
            "goat-toggle": LocalJSX.GoatToggle & JSXBase.HTMLAttributes<HTMLGoatToggleElement>;
            "goat-tree-node": LocalJSX.GoatTreeNode & JSXBase.HTMLAttributes<HTMLGoatTreeNodeElement>;
            /**
             * @name TreeView
             * @description A tree view is a hierarchical structure that provides nested levels of navigation.
             * @category Navigation
             * @img /assets/img/tree-view.png
             * @imgDark /assets/img/tree-view-dark.png
             */
            "goat-tree-view": LocalJSX.GoatTreeView & JSXBase.HTMLAttributes<HTMLGoatTreeViewElement>;
        }
    }
}
