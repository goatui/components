@use "sass:map";
@import "../../styles/scss/commons";

:host {
  display: block;
  padding-bottom: v(--space-3);
  --input-border-radius: #{v(--border-radius)};
  --input-border-style: solid;
}

.input-container {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;

  background-color: v(--color-white);
  border: 1px var(--input-border-style) v(--border-color);
  border-radius: var(--input-border-radius);
  overflow: hidden;
  cursor: text;
  font-weight: var(--font-weight-regular);

  .input {
    flex: 1;
    border: none;
    outline: none;
    background: none;
    width: 100%;
    cursor: inherit;
    padding: 0;

    &::placeholder {
      color: v(--color-grey-400);
    }
  }

  .slot-wrapper {
    display: flex;
    align-items: center;
    justify-content: center;
    line-height: 0;

    slot::slotted(*) {
      padding-bottom: 0 !important;
      margin-bottom: 0 !important;
      color: v(--color-grey-400);

      goat-icon {
        --color: #{v(--color-grey-400)};
      }
    }

  }

  &.start-slot-has-content {
    .input {
      padding-left: v(--space-2);
    }
  }

  &.end-slot-has-content {
    .input {
      padding-right: v(--space-2);
    }
  }

  &:not(.start-slot-has-content) {
    .slot-container.start {
      display: none;
    }
  }

  &:not(.end-slot-has-content) {
    .slot-container.end {
      display: none;
    }
  }
}

@mixin inputState($color) {
  .input-container {
    border-color: v(--color-#{$color}-500);
  }

  &:host([focused]) {
    .input-container {
      box-shadow: 0 0 0 0.25rem rgba(map.get(map.get($colors, $color), 500), 25%);
    }
  }
}

/**
 * States
 */
:host([state="default"]) {
  &:host([focused]) {
    .input-container {
      @include focus-ring
    }
  }
}

:host([state="success"]) {
  @include inputState(success);
}

:host([state="error"]) {
  @include inputState(error);
}

:host([state="warning"]) {
  @include inputState(warning);
}

:host([size="sm"]) .input-container {
  padding: 0.5rem 0.75rem;

  .input {
    @include font-style(text-sm);
  }

  slot::slotted(*) {
    @include font-style(text-sm);
  }
}

:host([size="md"]) .input-container {
  padding: 0.625rem 0.875rem;

  .input {
    @include font-style(text-md);
  }

  slot::slotted(*) {
    @include font-style(text-md);
  }
}

:host([size="lg"]) .input-container {
  padding: 0.75rem 1rem;

  .input {
    @include font-style(text-lg);
  }

  slot::slotted(*) {
    @include font-style(text-lg);
  }
}


:host([success]) {
  .input-container {
    border-color: v(--color-success-500);

  }
}

:host([error]) {
  .input-container {
    border-color: v(--color-error-500);
    box-shadow: 0 0 0 0.25rem rgba(#ef4444, 25%);
  }
}

:host([disabled]) {
  .input-container {
    cursor: not-allowed;
    background-color: v(--color-grey-100) !important;
    border-color: v(--border-color) !important;
    opacity: 1 !important;

    .input {
      color: v(--color-grey-400) !important;
    }
  }
}

