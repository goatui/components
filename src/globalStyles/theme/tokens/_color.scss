@use "sass:map";

$colors: (
  black: (
    100: #000000,
  ),
  blue: (
    10: #edf5ff,
    20: #d0e2ff,
    30: #a6c8ff,
    40: #78a9ff,
    50: #4589ff,
    60: #0f62fe,
    70: #0043ce,
    80: #002d9c,
    90: #001d6c,
    100: #001141,
  ),
  cool-gray: (
    10: #f2f4f8,
    20: #dde1e6,
    30: #c1c7cd,
    40: #a2a9b0,
    50: #878d96,
    60: #697077,
    70: #4d5358,
    80: #343a3f,
    90: #21272a,
    100: #121619,
  ),
  coolGray: (
    10: #f2f4f8,
    20: #dde1e6,
    30: #c1c7cd,
    40: #a2a9b0,
    50: #878d96,
    60: #697077,
    70: #4d5358,
    80: #343a3f,
    90: #21272a,
    100: #121619,
  ),
  cyan: (
    10: #e5f6ff,
    20: #bae6ff,
    30: #82cfff,
    40: #33b1ff,
    50: #1192e8,
    60: #0072c3,
    70: #00539a,
    80: #003a6d,
    90: #012749,
    100: #061727,
  ),
  gray: (
    10: #f4f4f4,
    20: #e0e0e0,
    30: #c6c6c6,
    40: #a8a8a8,
    50: #8d8d8d,
    60: #6f6f6f,
    70: #525252,
    80: #393939,
    90: #262626,
    100: #161616,
  ),
  green: (
    10: #defbe6,
    20: #a7f0ba,
    30: #6fdc8c,
    40: #42be65,
    50: #24a148,
    60: #198038,
    70: #0e6027,
    80: #044317,
    90: #022d0d,
    100: #071908,
  ),
  magenta: (
    10: #fff0f7,
    20: #ffd6e8,
    30: #ffafd2,
    40: #ff7eb6,
    50: #ee5396,
    60: #d02670,
    70: #9f1853,
    80: #740937,
    90: #510224,
    100: #2a0a18,
  ),
  orange: (
    10: #fff2e8,
    20: #ffd9be,
    30: #ffb784,
    40: #ff832b,
    50: #eb6200,
    60: #ba4e00,
    70: #8a3800,
    80: #5e2900,
    90: #3e1a00,
    100: #231000,
  ),
  purple: (
    10: #f6f2ff,
    20: #e8daff,
    30: #d4bbff,
    40: #be95ff,
    50: #a56eff,
    60: #8a3ffc,
    70: #6929c4,
    80: #491d8b,
    90: #31135e,
    100: #1c0f30,
  ),
  red: (
    10: #fff1f1,
    20: #ffd7d9,
    30: #ffb3b8,
    40: #ff8389,
    50: #fa4d56,
    60: #da1e28,
    70: #a2191f,
    80: #750e13,
    90: #520408,
    100: #2d0709,
  ),
  teal: (
    10: #d9fbfb,
    20: #9ef0f0,
    30: #3ddbd9,
    40: #08bdba,
    50: #009d9a,
    60: #007d79,
    70: #005d5d,
    80: #004144,
    90: #022b30,
    100: #081a1c,
  ),
  warm-gray: (
    10: #f7f3f2,
    20: #e5e0df,
    30: #cac5c4,
    40: #ada8a8,
    50: #8f8b8b,
    60: #726e6e,
    70: #565151,
    80: #3c3838,
    90: #272525,
    100: #171414,
  ),
  warmGray: (
    10: #f7f3f2,
    20: #e5e0df,
    30: #cac5c4,
    40: #ada8a8,
    50: #8f8b8b,
    60: #726e6e,
    70: #565151,
    80: #3c3838,
    90: #272525,
    100: #171414,
  ),
  white: (
    0: #ffffff,
  ),
  yellow: (
    10: #fcf4d6,
    20: #fddc69,
    30: #f1c21b,
    40: #d2a106,
    50: #b28600,
    60: #8e6a00,
    70: #684e00,
    80: #483700,
    90: #302400,
    100: #1c1500,
  ),
  new-purple: (
    10: #fff1f1,
    20: #F2CAFD,
    30: #E197FB,
    40: #C662F5,
    50: #A93BEC,
    60: #7F00E0,
    70: #6200C0,
    80: #4900A1,
    90: #330081,
    100: #24006B,
  ),
  new-teal: (
    10: #F3FEFD,
    20:#EFFEFD,
    30:#E0FCFD,
    40:#CFF5F9,
    50:#C0EAF3,
    60:#AADCEC,
    70:#7CB2CA,
    80:#5589A9,
    90:#366388,
    100:#204671
  )
);

@function getColor($colorName, $grade) {
  @return map.get(map.get($colors, $colorName), $grade);
}

@mixin cloneColor($to, $from) {
  $colors: map-merge($colors, ($to: map.get($colors, $from))) !global;
}


@mixin referColor($to, $from) {
  $toMap: ();
  @for $i from 1 through 10 {
    $toMap: map-merge($toMap, (($i*10): var(--color-#{$from}-#{$i * 10}, getColor($from, $i * 10))));
  }

  $colors: map-merge($colors, ($to: $toMap)) !global;
}


/*
 * Theme colors
 */
@include cloneColor(brand-primary, purple);
@include cloneColor(brand-secondary, teal);

/*
 * Application colors
 */
@include referColor(neutral, gray);
@include referColor(primary, blue);
@include referColor(secondary, warmGray);


/*
 * Alert colors
 */
@include cloneColor(info, blue);
@include cloneColor(success, green);
@include cloneColor(warning, yellow);
@include cloneColor(error, red);


/*
 * Tokens for developers
 */
$color-css-variables: ();
$dark-color-css-variables: ();

@each $colorName, $colorMap in $colors {
  @each $weight, $value in $colorMap {
    $map: ();
    $map: map-merge($map, (--color-#{$colorName}-#{$weight}: $value));
    @if $weight == 60 {
      $map: map-merge($map, (--color-#{$colorName}: $value));
    }
    $color-css-variables: map-merge($color-css-variables, $map);
  }
}

@mixin defineVariable($key, $value, $darkValue: "") {
  $color-css-variables: map-merge($color-css-variables, ($key: $value)) !global;
  @if $darkValue != "" {
    $dark-color-css-variables: map-merge($dark-color-css-variables, ($key: $darkValue)) !global;
  }
}

@include defineVariable(--color-white, getColor(white, 0));
@include defineVariable(--color-black, getColor(black, 100));
@include defineVariable(--border-color, getColor(neutral, 50));

/*
 * Default page background;
 * UI Shell base color
 */
@include defineVariable(--background, getColor(white, 0), getColor(neutral, 100));
@include defineVariable(--ui-01, getColor(neutral, 20), getColor(neutral, 80));

/*
Container background on $ui-01;
`Light` variant background
 */
@include defineVariable(--ui-02, getColor(white, 0), getColor(neutral, 80));

/*
Subtle border;
Tertiary background
 */
@include defineVariable(--ui-03, getColor(neutral, 20), getColor(neutral, 60));


@include defineVariable(--ui-04, getColor(neutral, 50), getColor(neutral, 10));

@include defineVariable(--background-inverse, getColor(neutral, 80), getColor(neutral, 10));
/**
Primary text;
Body copy;
Headers;
Hover text color for --text-secondary
 */
@include defineVariable(--text-primary, getColor(neutral, 100), getColor(neutral, 10));

/**
Secondary text;
Input labels
 */
@include defineVariable(--text-secondary, getColor(neutral, 70), getColor(neutral, 30));

/**
Placeholder text
 */
@include defineVariable(--text-placeholder, getColor(neutral, 40), getColor(neutral, 60));

/**
Text on interactive colors
 */
@include defineVariable(--text-04, getColor(white, 0), getColor(white, 0));


/**
Tertiary text;
Help text
 */
@include defineVariable(--text-05, getColor(neutral, 60), getColor(neutral, 50));

/**
Inverse text color
 */
@include defineVariable(--text-inverse, getColor(white, 0), getColor(neutral, 100));

/*
Default input fields;
Fields on $backgrounds
 */
@include defineVariable(--field-01, getColor(neutral, 10), getColor(neutral, 90));
@include defineVariable(--field-02, getColor(white, 0), getColor(neutral, 80));

/*
Selected UI elements
 */
@include defineVariable(--selected-ui, getColor(neutral, 20), getColor(neutral, 80));

/**
* Disabled fields;
* Disabled backgrounds;
* Disabled border
*/
@include defineVariable(--disabled-01, getColor(neutral, 10), getColor(neutral, 90));

/**
* Disabled elements on $disabled-01;
* Disabled label;
* Disabled text on $disabled-01;
* Disabled icons;
* Disabled border
*/
@include defineVariable(--text-disabled, getColor(neutral, 30), getColor(neutral, 70));
@include defineVariable(--border-disabled, getColor(neutral, 30), getColor(neutral, 70));

/**
* Disabled text on $disabled-02;
* Disabled icons on $disabled-02
*/
@include defineVariable(--disabled-03, getColor(neutral, 50), getColor(neutral, 60));

/**
* Primary links;
* Ghost button
*/
@include defineVariable(--link-01, getColor(primary, 60));

/**
Secondary link color for lower contrast backgrounds
 */
@include defineVariable(--link-02, getColor(primary, 60));

@include defineVariable(--hover-primary, getColor(primary, 60));
@include defineVariable(--hover-primary-text, getColor(primary, 70));

@include defineVariable(--visited-link, getColor(purple, 60), getColor(purple, 40));

/**
* Secondary link color for lower contrast backgrounds
*/
@include defineVariable(--link-02, getColor(primary, 40));

@include defineVariable(--icon-01, getColor(neutral, 100), getColor(neutral, 10));
@include defineVariable(--icon-02, getColor(neutral, 70), getColor(neutral, 30));


@include defineVariable(--hover-ui, getColor(neutral, 10), getColor(neutral, 90));
@include defineVariable(--active-ui, getColor(neutral, 30), getColor(neutral, 30));

@include defineVariable(--border-subtle-00, getColor(neutral, 30), getColor(neutral, 30));

@include defineVariable(--border-strong-01, getColor(neutral, 50), getColor(neutral, 60));

@include defineVariable(--danger-01, getColor(red, 60));

@include defineVariable(--danger-02, getColor(red, 60), getColor(red, 50));

@include defineVariable(--support-error, getColor(error, 60), getColor(error, 50));
@include defineVariable(--support-success, getColor(success, 60), getColor(success, 40));
@include defineVariable(--support-warning, getColor(warning, 30), getColor(warning, 30));
@include defineVariable(--support-info, getColor(info, 70), getColor(info, 50));

@include defineVariable(--support-error-inverse, getColor(error, 50), getColor(error, 60));
@include defineVariable(--support-success-inverse, getColor(success, 40), getColor(success, 50));
@include defineVariable(--support-warning-inverse, getColor(warning, 30), getColor(warning, 30));
@include defineVariable(--support-info-inverse, getColor(info, 50), getColor(info, 70));


@each $color in [gray, blue, green, red, yellow, primary, success, info, warning, error] {
  @include defineVariable(--tag-background-#{$color}, getColor($color, 20), getColor($color, 80));
  @include defineVariable(--tag-hover-#{$color}, getColor($color, 30), getColor($color, 70));
  @include defineVariable(--tag-color-#{$color}, getColor($color, 80), getColor($color, 30));
}
