{"version":3,"sources":["../scss/functions.scss","theme.scss","../scss/mixins.scss"],"names":[],"mappings":"AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAKA;AAAA;AAAA;ACnjCA;EACA;EACA;EACA;;;AD8BA;ECjCA;EACA;EACA;EACA;;;AD8BA;ECjCA;EACA;EACA;EACA;;;AD8BA;ECjCA;EACA;EACA;EACA;;;AD8BA;ECjCA;EACA;EACA;EACA;;;AD8BA;ECjCA;EACA;EACA;EACA;;;AD8BA;ECjCA;EACA;EACA;EACA;;;AD8BA;ECjCA;EACA;EACA;EACA;;;AD8BA;ECjCA;EACA;EACA;EACA;;;AD8BA;ECjCA;EACA;EACA;EACA","file":"theme.css","sourcesContent":["@use \"sass:map\";\n@use \"sass:list\";\n@import '../theme/color';\n@import '../theme/shadow';\n@import '../theme/spacing';\n@import '../theme/typography';\n@import '../theme/others';\n\n$css-variables: ();\n$css-variables: map-merge($css-variables, (\"--font-family-base\": $font-family-base));\n$css-variables: map-merge($css-variables, (\"--color-white\": #ffffff));\n$css-variables: map-merge($css-variables, (\"--color-black\": #000000));\n$css-variables: map-merge($css-variables, (\"--border-color\": map.get(map.get($colors, neutral), 300)));\n\n$primary-color-weight: 900;\n$secondary-color-weight: 600;\n$tertiary-color-weight: 500;\n$placeholder-color-weight: 300;\n\n/**\nPrimary text;\nBody copy;\nHeaders;\nHover text color for --text-color-secondary\n */\n$css-variables: map-merge($css-variables, (\"--text-color-primary\": map-get(map-get($colors, neutral), 900)));\n\n/**\nSecondary text;\nInput labels\n */\n$css-variables: map-merge($css-variables, (\"--text-color-secondary\": map.get(map.get($colors, neutral), 600)));\n\n/**\nTertiary text;\nHelp text\n */\n$css-variables: map-merge($css-variables, (\"--text-color-tertiary\":  map.get(map.get($colors, neutral), 500)));\n\n/**\nPlaceholder text\n */\n$css-variables: map-merge($css-variables, (\"--text-color-placeholder\": map.get(map.get($colors, neutral), 400)));\n\n/**\nText on interactive colors\n */\n$css-variables: map-merge($css-variables, (\"--text-color-interactive\": white));\n\n$css-variables: map-merge($css-variables, (\"--ui-background-color\": white));\n\n$css-variables: map-merge($css-variables, (\"--ui-background-secondary\": map.get(map.get($colors, neutral), 100)));\n\n@each $key, $value in $font-weights {\n  $map: ();\n  $map: map-merge($map, (\"--font-weight-\"+$key: $value));\n  $css-variables: map-merge($css-variables, $map);\n}\n\n@each $key, $value in $typography {\n  $map: ();\n  $map: map-merge($map, (\"--\"+$key+\"-font-size\": #{list.nth($value,1)}rem));\n  $map: map-merge($map, (\"--\"+$key+\"-line-height\": #{list.nth($value,2)}rem));\n  $map: map-merge($map, (\"--\"+$key+\"-letter-spacing\": #{list.nth($value,3)}rem));\n  $css-variables: map-merge($css-variables, $map);\n}\n\n@each $key, $value in $space {\n  $map: ();\n  $map: map-merge($map, (\"--space-\"+$key: #{$value}rem));\n  $css-variables: map-merge($css-variables, $map);\n}\n\n@each $key, $value in $container-space {\n  $map: ();\n  $map: map-merge($map, (\"--container-space-\"+$key: #{$value}rem));\n  $css-variables: map-merge($css-variables, $map);\n}\n\n@each $colorName, $colorMap in $colors {\n  @each $weight, $value in $colorMap {\n    $map: ();\n    $map: map-merge($map, (\"--color-\"+$colorName+\"-\"+$weight: $value));\n    $css-variables: map-merge($css-variables, $map);\n  }\n}\n\n@each $key, $value in $shadows {\n  $map: ();\n  $map: map-merge($map, (\"--shadow-\"+$key: $value));\n  $css-variables: map-merge($css-variables, $map);\n}\n\n@each $key, $value in $others {\n  $map: ();\n  $map: map-merge($map, (\"--\"+$key: $value));\n  $css-variables: map-merge($css-variables, $map);\n}\n\n@function v($name) {\n  @return var(#{$name}, map.get($css-variables, $name));\n}\n","@use \"sass:map\";\n@use \"sass:list\";\n@import 'color';\n@import 'spacing';\n@import 'typography';\n@import 'shadow';\n@import 'others';\n@import \"../scss/mixins\";\n\n@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n\n:root {\n  @each $name, $value in $css-variables {\n   #{$name}: #{$value};\n  }\n}\n\n[data-theme=\"dark\"] {\n  --ui-background-color: var(--color-neutral-900);\n  --ui-background-secondary: var(--color-neutral-800);\n  --text-color-primary: var(--color-neutral-100);\n  --text-color-secondary: var(--color-neutral-400);\n  --text-color-tertiary: var(--color-neutral-500);\n  --text-color-placeholder: var(--color-neutral-600);\n}\n\nhtml {\n  font-size: 16px;\n  background-color: var(--ui-background-color);\n  color: var(--text-color-primary);\n}\n\np {\n  @include font-style(text-md);\n}\n\n@each $name, $value in $typography {\n  .#{$name} {\n    @include font-style($name)\n  }\n}\n\n\n\n\n","@use \"sass:map\";\n@import \"functions\";\n\n@mixin font-style($type) {\n  font-family: v(--font-family-base), serif;\n  font-size: v(--#{$type}-font-size);\n  line-height: v(--#{$type}-line-height);\n  letter-spacing: v(--#{$type}-letter-spacing);\n}\n\n@mixin color($type) {\n  font-size: var(--#{$type}-font-size);\n  line-height: var(--#{$type}-line-height);\n  letter-spacing: var(--#{$type}-letter-spacing);\n}\n\n@mixin font-common {\n  font-family: #{v(font-family)};\n  font-style: normal;\n}\n\n\n@mixin font-no-weight-variant($type) {\n  @include font-common;\n  font-size: v(font-size-#{$type});\n  line-height: v(line-height-#{$type});\n  letter-spacing: -0.04em;\n}\n\n@mixin font-variant($type) {\n  @include font-no-weight-variant($type);\n  font-weight: normal;\n  font-size: v(font-size-#{$type});\n  line-height: v(line-height-#{$type});\n  letter-spacing: -0.04em;\n}\n\n@mixin focus-ring($color:primary) {\n  outline: none;\n  @if $color {\n    box-shadow: 0 0 0 0.25rem rgba(map.get(map.get($colors, $color), 500), 25%);\n  } @else {\n    box-shadow: 0 0 0 0.25rem rgba(map.get(map.get($colors, blue-light), 500), 25%);\n  }\n}\n\n@mixin text-color($color, $important: false) {\n\n  @if $important {\n    color: $color !important;\n    --text-color: $color !important;\n  } @else {\n    color: $color;\n    --text-color: $color;\n  }\n}\n\n@mixin for-phone-only {\n  @media (max-width: 599px) { @content; }\n}\n@mixin for-tablet-portrait-up {\n  @media (min-width: 600px) { @content; }\n}\n@mixin for-tablet-landscape-up {\n  @media (min-width: 900px) { @content; }\n}\n@mixin for-desktop-up {\n  @media (min-width: 1200px) { @content; }\n}\n@mixin for-big-desktop-up {\n  @media (min-width: 1800px) { @content; }\n}\n"]}