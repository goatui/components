@use "sass:map";
@use "sass:list";
@import '../theme/color';
@import '../theme/shadow';
@import '../theme/spacing';
@import '../theme/typography';
@import '../theme/others';

$css-variables: ();
$css-variables: map-merge($css-variables, ("--font-family-base": $font-family-base));
$css-variables: map-merge($css-variables, ("--color-white": #ffffff));
$css-variables: map-merge($css-variables, ("--color-black": #000000));
$css-variables: map-merge($css-variables, ("--border-color": map.get(map.get($colors, neutral), 300)));

$primary-color-weight: 900;
$secondary-color-weight: 600;
$tertiary-color-weight: 500;
$placeholder-color-weight: 300;

/**
Primary text;
Body copy;
Headers;
Hover text color for --text-color-secondary
 */
$css-variables: map-merge($css-variables, ("--text-color-primary": map-get(map-get($colors, neutral), 900)));

/**
Secondary text;
Input labels
 */
$css-variables: map-merge($css-variables, ("--text-color-secondary": map.get(map.get($colors, neutral), 600)));

/**
Tertiary text;
Help text
 */
$css-variables: map-merge($css-variables, ("--text-color-tertiary":  map.get(map.get($colors, neutral), 500)));

/**
Placeholder text
 */
$css-variables: map-merge($css-variables, ("--text-color-placeholder": map.get(map.get($colors, neutral), 400)));

/**
Text on interactive colors
 */
$css-variables: map-merge($css-variables, ("--text-color-interactive": white));

$css-variables: map-merge($css-variables, ("--ui-background-color": white));

$css-variables: map-merge($css-variables, ("--ui-background-secondary": map.get(map.get($colors, neutral), 100)));

@each $key, $value in $font-weights {
  $map: ();
  $map: map-merge($map, ("--font-weight-"+$key: $value));
  $css-variables: map-merge($css-variables, $map);
}

@each $key, $value in $typography {
  $map: ();
  $map: map-merge($map, ("--"+$key+"-font-size": #{list.nth($value,1)}rem));
  $map: map-merge($map, ("--"+$key+"-line-height": #{list.nth($value,2)}rem));
  $map: map-merge($map, ("--"+$key+"-letter-spacing": #{list.nth($value,3)}rem));
  $css-variables: map-merge($css-variables, $map);
}

@each $key, $value in $space {
  $map: ();
  $map: map-merge($map, ("--space-"+$key: #{$value}rem));
  $css-variables: map-merge($css-variables, $map);
}

@each $key, $value in $container-space {
  $map: ();
  $map: map-merge($map, ("--container-space-"+$key: #{$value}rem));
  $css-variables: map-merge($css-variables, $map);
}

@each $colorName, $colorMap in $colors {
  @each $weight, $value in $colorMap {
    $map: ();
    $map: map-merge($map, ("--color-"+$colorName+"-"+$weight: $value));
    $css-variables: map-merge($css-variables, $map);
  }
}

@each $key, $value in $shadows {
  $map: ();
  $map: map-merge($map, ("--shadow-"+$key: $value));
  $css-variables: map-merge($css-variables, $map);
}

@each $key, $value in $others {
  $map: ();
  $map: map-merge($map, ("--"+$key: $value));
  $css-variables: map-merge($css-variables, $map);
}

@function v($name) {
  @return var(#{$name}, map.get($css-variables, $name));
}
