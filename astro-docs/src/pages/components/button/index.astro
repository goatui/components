---
import Layout from '../../../layouts/Component.astro';
import { getComponentDetails } from '../../../_data/getComponentDetails.ts';
import ApiPanel from '../../../components/ApiPanel.astro';
const componentDetails = getComponentDetails('goat-button');

import UsageSection from './_sections/Usage.astro';
import KindSection from './_sections/Kind.astro';
import SizesSection from './_sections/Sizes.astro';
import StatesSection from './_sections/States.astro';
import VariantsSection from './_sections/Variants.astro';
import ColorsSection from './_sections/Colors.astro';
import EventsSection from './_sections/Events.astro';
import IconSection from './_sections/Icon.astro';
import OverviewPanel from '../../../components/OverviewPanel.astro';

const sections = [
  {
    'title': 'Usage',
    'Component': UsageSection,
  }, {
    'title': 'Kind',
    'Component': KindSection,
  }, {
    'title': 'Variants',
    'Component': VariantsSection,
  }, {
    'title': 'Colors',
    'Component': ColorsSection,
  }, {
    'title': 'Sizes',
    'Component': SizesSection,
  }, {
    'title': 'Icon',
    'Component': IconSection,
  }, {
    'title': 'States',
    'Component': StatesSection,
  }, {
    'title': 'Events',
    'Component': EventsSection,
  }];
---
<Layout componentDetails={componentDetails}>
  <goat-tabs class='page-tabs'>
    <goat-tabs-list>
      <goat-tab selected='true'>Overview</goat-tab>
      <goat-tab>Playground</goat-tab>
      <goat-tab>API</goat-tab>
    </goat-tabs-list>
    <goat-tab-panel>
      <OverviewPanel componentDetails={componentDetails} sections={sections} />
    </goat-tab-panel>
    <goat-tab-panel>
      <div class='playground-tab'>
        <div class='playground-container' id='playground-controller'>
          <div class='playground'>
            <div class='demo-area' id='demo-area'></div>
            <div class='demo-controls' id='demo-controls'>

              <goat-select label='Variant' id='comp-variant' search='contains' placeholder='Select'
                           clearable></goat-select>

              <goat-select label='Color' id='comp-color' search='contains' placeholder='Select' clearable></goat-select>

              <goat-select label='Size' id='comp-size' search='contains' placeholder='Select' clearable></goat-select>


            </div>
          </div>
          <div class='code-editor-container'>
            <goat-code-editor class='code-editor no-border' theme='vs-dark'></goat-code-editor>
          </div>
        </div>
      </div>
    </goat-tab-panel>
    <goat-tab-panel>
      <ApiPanel componentDetails={componentDetails} />
    </goat-tab-panel>
  </goat-tabs>
</Layout>

<script is:inline define:vars={{ props: componentDetails.props }}>
  class Playground {

    constructor(elm) {
      this.elm = elm;
    }

    init() {
      const $codeEditor = this.elm.querySelector('.code-editor');
      const $demoArea = this.elm.querySelector('.demo-area');

      $codeEditor.value = `
    <goat-button icon='arrow--right'>Button</goat-button>
    `;
      $codeEditor.addEventListener('goat:change', (e) => {
        $demoArea.innerHTML = e.target.value;
      });
      $demoArea.innerHTML = $codeEditor.value;
    }

    resetFields() {
      this.updateProperty('computed-color', false);
    }

    populateDropdown(elm, prop, value) {
      elm.items = this.getPropertyValues(prop).map((item) => {
        return {
          label: item,
          value: item,
        };
      });
      elm.value = value;
      elm.addEventListener('goat:change', (evt) => {
        this.resetFields();
        this.updateProperty(prop, evt.detail.value);
      });
    }

    updateProperty(propertyName, propertyValue) {
      const $codeEditor = this.elm.querySelector('.code-editor');
      const $demoArea = this.elm.querySelector('.demo-area');
      if (propertyValue === '' || propertyValue === false) {
        $demoArea.children[0].removeAttribute(propertyName);
      } else {
        $demoArea.children[0].setAttribute(propertyName, propertyValue);
      }
      $codeEditor.value = $demoArea.innerHTML;
    }

    getPropertyValues (name) {
      return props.find(prop => prop.name === name).values.map(value => value.value)
    }
  }


  const playground = new Playground(document.getElementById('playground-controller'));
  playground.init();


  const $size = document.getElementById('comp-size');
  playground.populateDropdown($size, 'size', 'md');

  const $variant = document.getElementById('comp-variant');
  playground.populateDropdown($variant, 'variant', 'default');

  const $color = document.getElementById('comp-color');
  playground.populateDropdown($color, 'color', 'primary');


</script>
