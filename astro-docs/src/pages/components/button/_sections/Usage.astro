---
import { getComponentDetails } from '../../../../_data/getComponentDetails';
const componentDetails = getComponentDetails('goat-button');
---

<div class='playground-tab'>
  <div class='playground-container' id='playground-controller'>
    <div class='playground'>
      <div class='demo-area' id='demo-area'></div>
      <div class='demo-controls' id='demo-controls'>

        <goat-select label='Variant' id='comp-variant' search='contains' placeholder='Select'
                     clearable></goat-select>

        <goat-select label='Color' id='comp-color' search='contains' placeholder='Select' clearable></goat-select>

        <goat-select label='Size' id='comp-size' search='contains' placeholder='Select' clearable></goat-select>


      </div>
    </div>
    <div class='code-editor-container'>
      <goat-code-editor language='html'
                        class='code-editor no-border'
                        theme='vs-dark'>

      </goat-code-editor>
    </div>
  </div>
</div>

<script is:inline define:vars={{ props: componentDetails.props }}>
  class Playground {

    constructor(elm) {
      this.elm = elm;
    }

    init() {
      const $codeEditor = this.elm.querySelector('.code-editor');
      const $demoArea = this.elm.querySelector('.demo-area');

      $codeEditor.value = `<goat-button icon='arrow--right'>
  Button
</goat-button>
`;
      $codeEditor.addEventListener('goat-code-editor--change', (e) => {
        $demoArea.innerHTML = e.target.value;
      });
      $demoArea.innerHTML = $codeEditor.value;
    }

    resetFields() {
      this.updateProperty('computed-color', false);
    }

    populateDropdown(elm, prop, value) {
      elm.items = this.getPropertyValues(prop).map((item) => {
        return {
          label: item,
          value: item,
        };
      });
      elm.value = value;
      elm.addEventListener('goat-select--change', (evt) => {
        this.resetFields();
        this.updateProperty(prop, evt.detail.value);
      });
    }

    updateProperty(propertyName, propertyValue) {
      const $codeEditor = this.elm.querySelector('.code-editor');
      const $demoArea = this.elm.querySelector('.demo-area');
      if (propertyValue === '' || propertyValue === false) {
        $demoArea.children[0].removeAttribute(propertyName);
      } else {
        $demoArea.children[0].setAttribute(propertyName, propertyValue);
      }
      $codeEditor.value = $demoArea.innerHTML;
    }

    getPropertyValues (name) {
      return props.find(prop => prop.name === name).values.map(value => value.value)
    }
  }


  const playground = new Playground(document.getElementById('playground-controller'));
  playground.init();


  const $size = document.getElementById('comp-size');
  playground.populateDropdown($size, 'size', 'md');

  const $variant = document.getElementById('comp-variant');
  playground.populateDropdown($variant, 'variant', 'default');

  const $color = document.getElementById('comp-color');
  playground.populateDropdown($color, 'color', 'primary');


</script>
