{
  "timestamp": "2025-05-22T05:28:43",
  "compiler": {
    "name": "@stencil/core",
    "version": "4.19.2",
    "typescriptVersion": "5.4.5"
  },
  "components": [
    {
      "dirPath": "/workspaces/goatui-components/src/components/accordion/accordion",
      "filePath": "src/components/accordion/accordion/accordion.tsx",
      "fileName": "accordion.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/accordion/accordion/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/accordion/accordion/usage",
      "tag": "goat-accordion",
      "readme": "# goat-avatar\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "align",
          "type": "\"end\" | \"start\"",
          "complexType": {
            "original": "'start' | 'end'",
            "resolved": "\"end\" | \"start\"",
            "references": {}
          },
          "mutable": false,
          "attr": "align",
          "reflectToAttr": true,
          "docs": "Accordion item dropdown alignment.",
          "docsTags": [],
          "default": "'end'",
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"lg\" | \"md\" | \"sm\"",
          "complexType": {
            "original": "'sm' | 'md' | 'lg'",
            "resolved": "\"lg\" | \"md\" | \"sm\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "The According size.",
          "docsTags": [],
          "default": "'md'",
          "values": [
            {
              "value": "lg",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            },
            {
              "value": "sm",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [
        {
          "event": "goat-accordion-item-click",
          "capture": false,
          "passive": false
        }
      ],
      "metadata": {
        "name": "Accordion",
        "description": "An accordion is a vertically stacked list of headers that reveal or hide associated sections of content.",
        "overview": " <p>The accordion component delivers large amounts of content in a small space through progressive disclosure. The header title give the user a high level overview of the content allowing the user to decide which sections to read.</p>\n <p>Accordions can make information processing and discovering more effective. However, it does hide content from users and it’s important to account for a user not noticing or reading all of the included content. If a user is likely to read all of the content then don’t use an accordion as it adds the burden of an extra click; instead use a full scrolling page with normal headers.</p>",
        "category": "Data Display",
        "subcategory": "Accordion",
        "tags": [
          "display"
        ],
        "img": "/assets/img/accordion.webp",
        "imgDark": "/assets/img/accordion-dark.webp"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/accordion/accordion-item",
      "filePath": "src/components/accordion/accordion-item/accordion-item.tsx",
      "fileName": "accordion-item.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/accordion/accordion-item/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/accordion/accordion-item/usage",
      "tag": "goat-accordion-item",
      "readme": "# goat-menu-item\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [
        "goat-icon"
      ],
      "dependencyGraph": {
        "goat-accordion-item": [
          "goat-icon"
        ]
      },
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If true, the user cannot interact with the button. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "heading",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": false,
          "docs": "The menu item value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "Menu item selection state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "goat-accordion-item--click",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the menu item is clicked.",
          "docsTags": []
        }
      ],
      "styles": [
        {
          "name": "--goat-accordion-item-heading-background - Background color of the accordion item header",
          "annotation": "prop",
          "docs": ""
        },
        {
          "name": "--goat-accordion-item-heading-background-hover - Background color of the accordion item header on hover",
          "annotation": "prop",
          "docs": ""
        },
        {
          "name": "--goat-accordion-item-title-align - Alignment of the accordion title",
          "annotation": "prop",
          "docs": ""
        }
      ],
      "slots": [],
      "parts": [
        {
          "name": "title",
          "docs": ""
        }
      ],
      "listeners": [],
      "metadata": {
        "name": "Accordion Item",
        "description": "An accordion item is single item in an accordion list. It contains a header and a content section that can be expanded or collapsed by the user.",
        "overview": " <p>The accordion item component is a single item in an accordion list. It contains a header and a content section that can be expanded or collapsed by the user. The accordion item can be used in conjunction with the accordion component to create a list of expandable items.</p>",
        "category": "Data Display",
        "subcategory": "Accordion",
        "childComponent": "true"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/avatar",
      "filePath": "src/components/avatar/avatar.tsx",
      "fileName": "avatar.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/avatar/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/avatar/usage",
      "tag": "goat-avatar",
      "readme": "# goat-avatar\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Avatar size.",
          "docsTags": [],
          "default": "'2rem'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "src",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "src",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "Avatar",
        "description": "The Avatar component is used to represent user, and displays the profile picture, initials or fallback icon.",
        "category": "Data Display",
        "tags": [
          "display"
        ],
        "example": "<goat-avatar size=\"5rem\" name=\"Shivaji Varma\" src=\"/assets/img/avatar.webp\"></goat-avatar>"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/badge",
      "filePath": "src/components/badge/badge.tsx",
      "fileName": "badge.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/badge/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/badge/usage",
      "tag": "goat-badge",
      "readme": "# goat-icon\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "color",
          "type": "\"error\" | \"primary\" | \"secondary\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "| 'primary'\n    | 'secondary'\n    | 'success'\n    | 'error'\n    | 'warning'",
            "resolved": "\"error\" | \"primary\" | \"secondary\" | \"success\" | \"warning\"",
            "references": {}
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "'error'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "content",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "content",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "Badge",
        "description": "The badge component is used to display a small amount of information to the user.",
        "category": "Informational",
        "tag": "content",
        "example": "<goat-badge content=\"5\"> <goat-icon name=\"notification\" size=\"2rem\"></goat-icon></goat-badge>"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/breadcrumb",
      "filePath": "src/components/breadcrumb/breadcrumb.tsx",
      "fileName": "breadcrumb.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/breadcrumb/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/breadcrumb/usage",
      "tag": "goat-breadcrumb",
      "readme": "# goat-heading\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "Breadcrumb",
        "description": "A breadcrumb is a secondary navigation scheme that reveals the user's location in a website or web application.",
        "category": "Navigation",
        "tags": [
          "navigation"
        ],
        "example": "<goat-breadcrumb><goat-breadcrumb-item href=\"#\">Home</goat-breadcrumb-item><goat-breadcrumb-item href=\"#\" active>Page</goat-breadcrumb-item></goat-breadcrumb>"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/breadcrumb/breadcrumb-item",
      "filePath": "src/components/breadcrumb/breadcrumb-item/breadcrumb-item.tsx",
      "fileName": "breadcrumb-item.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/breadcrumb/breadcrumb-item/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/breadcrumb/breadcrumb-item/usage",
      "tag": "goat-breadcrumb-item",
      "readme": "# goat-tab\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [
        "goat-text",
        "goat-link"
      ],
      "dependencyGraph": {
        "goat-breadcrumb-item": [
          "goat-text",
          "goat-link"
        ]
      },
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": true,
          "docs": "Hyperlink to navigate to on click.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "position",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "Sets or retrieves the window or frame at which to target content.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {}
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/button/button",
      "filePath": "src/components/button/button/button.tsx",
      "fileName": "button.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/button/button/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/button/button/usage",
      "tag": "goat-button",
      "readme": "# goat-button\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [
        "goat-calendar",
        "goat-code-highlighter",
        "goat-date-picker",
        "goat-empty-state",
        "goat-flow-designer",
        "goat-header-action",
        "goat-header-brand",
        "goat-html-editor",
        "goat-input",
        "goat-modal",
        "goat-notification",
        "goat-number",
        "goat-select",
        "goat-table",
        "goat-textarea",
        "goat-time-picker"
      ],
      "dependencies": [
        "goat-spinner",
        "goat-icon"
      ],
      "dependencyGraph": {
        "goat-button": [
          "goat-spinner",
          "goat-icon"
        ],
        "goat-calendar": [
          "goat-button"
        ],
        "goat-code-highlighter": [
          "goat-button"
        ],
        "goat-date-picker": [
          "goat-button"
        ],
        "goat-empty-state": [
          "goat-button"
        ],
        "goat-flow-designer": [
          "goat-button"
        ],
        "goat-header-action": [
          "goat-button"
        ],
        "goat-header-brand": [
          "goat-button"
        ],
        "goat-html-editor": [
          "goat-button"
        ],
        "goat-input": [
          "goat-button"
        ],
        "goat-modal": [
          "goat-button"
        ],
        "goat-notification": [
          "goat-button"
        ],
        "goat-number": [
          "goat-button"
        ],
        "goat-select": [
          "goat-button"
        ],
        "goat-table": [
          "goat-button"
        ],
        "goat-textarea": [
          "goat-button"
        ],
        "goat-time-picker": [
          "goat-button"
        ]
      },
      "props": [
        {
          "name": "appendData",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "append-data",
          "reflectToAttr": false,
          "docs": "The `appendData` property allows you to attach additional data to the button component. This data can be of any type, making it versatile for various use cases. It's particularly useful for passing extra context or information that can be accessed in event handlers or other component logic.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "color",
          "type": "\"black\" | \"danger\" | \"primary\" | \"secondary\" | \"success\" | \"warning\" | \"white\"",
          "complexType": {
            "original": "| 'primary'\n    | 'secondary'\n    | 'success'\n    | 'danger'\n    | 'warning'\n    | 'white'\n    | 'black'",
            "resolved": "\"black\" | \"danger\" | \"primary\" | \"secondary\" | \"success\" | \"warning\" | \"white\"",
            "references": {}
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "Defines the primary color of the button. This can be set to predefined color names to apply specific color themes.",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "value": "black",
              "type": "string"
            },
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "value": "white",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "configAria",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "config-aria",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "{}",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "darkModeColor",
          "type": "\"black\" | \"danger\" | \"primary\" | \"secondary\" | \"success\" | \"warning\" | \"white\"",
          "complexType": {
            "original": "| 'primary'\n    | 'secondary'\n    | 'success'\n    | 'danger'\n    | 'warning'\n    | 'white'\n    | 'black'",
            "resolved": "\"black\" | \"danger\" | \"primary\" | \"secondary\" | \"success\" | \"warning\" | \"white\"",
            "references": {}
          },
          "mutable": false,
          "attr": "dark-mode-color",
          "reflectToAttr": true,
          "docs": "Color variant for dark mode, applicable when [data-theme=\"dark\"] is set.",
          "docsTags": [],
          "values": [
            {
              "value": "black",
              "type": "string"
            },
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "value": "white",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "If true, the user cannot interact with the button. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabledReason",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled-reason",
          "reflectToAttr": false,
          "docs": "If button is disabled, the reason why it is disabled.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": true,
          "docs": "Hyperlink to navigate to on click.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Icon which will displayed on button.\nPossible values are icon names.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "iconAlign",
          "type": "\"end\" | \"start\"",
          "complexType": {
            "original": "'start' | 'end'",
            "resolved": "\"end\" | \"start\"",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-align",
          "reflectToAttr": false,
          "docs": "Icon alignment.\nPossible values are `\"start\"`, `\"end\"`. Defaults to `\"end\"`.",
          "docsTags": [],
          "default": "'end'",
          "values": [
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "Button selection state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showLoader",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-loader",
          "reflectToAttr": false,
          "docs": "If true, a loader will be displayed on button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"2xl\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\"",
          "complexType": {
            "original": "'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl'",
            "resolved": "\"2xl\" | \"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "Button size.\nPossible values are `\"sm\"`, `\"md\"`, `\"lg\"`, `\"xl\"`, `\"2xl\"`, `\"full\"`. Defaults to `\"md\"`.",
          "docsTags": [],
          "default": "'md'",
          "values": [
            {
              "value": "2xl",
              "type": "string"
            },
            {
              "value": "lg",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            },
            {
              "value": "sm",
              "type": "string"
            },
            {
              "value": "xl",
              "type": "string"
            },
            {
              "value": "xs",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "Sets or retrieves the window or frame at which to target content.",
          "docsTags": [],
          "default": "'_self'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "throttleDelay",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "throttle-delay",
          "reflectToAttr": false,
          "docs": "Sets the delay for throttle in milliseconds. Defaults to 200 milliseconds.",
          "docsTags": [],
          "default": "200",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "toggle",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "toggle",
          "reflectToAttr": false,
          "docs": "If true, the button will be in a toggled state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"button\" | \"reset\" | \"submit\"",
          "complexType": {
            "original": "'button' | 'submit' | 'reset'",
            "resolved": "\"button\" | \"reset\" | \"submit\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Button type based on which actions are performed when the button is clicked.",
          "docsTags": [],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "\"default\" | \"default.simple\" | \"ghost\" | \"ghost.simple\" | \"light\" | \"light.simple\" | \"link\" | \"link.simple\" | \"neo\" | \"neo.simple\" | \"outline\" | \"outline.simple\"",
          "complexType": {
            "original": "| 'default'\n    | 'outline'\n    | 'ghost'\n    | 'light'\n    | 'neo'\n    | 'link'\n    | 'default.simple'\n    | 'outline.simple'\n    | 'ghost.simple'\n    | 'light.simple'\n    | 'neo.simple'\n    | 'link.simple'",
            "resolved": "\"default\" | \"default.simple\" | \"ghost\" | \"ghost.simple\" | \"light\" | \"light.simple\" | \"link\" | \"link.simple\" | \"neo\" | \"neo.simple\" | \"outline\" | \"outline.simple\"",
            "references": {}
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": true,
          "docs": "The visual style of the button.\n\n Possible variant values:\n`\"default\"` is a filled button.\n`\"outline\"` is an outlined button.\n`\"ghost\"` is a transparent button.\n`\"light\"` is a light color button.\n\nPossible sub-variant values:\n`\"simple\"` is a simple button without default padding at end.\n`\"block\"` is a full-width button that spans the full width of its container.\n\n\n Mix and match the `variant` and `sub-variant` to create a variety of buttons.\n `\"default.simple\"`, `\"outline.block\"` etc.",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "default.simple",
              "type": "string"
            },
            {
              "value": "ghost",
              "type": "string"
            },
            {
              "value": "ghost.simple",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "light.simple",
              "type": "string"
            },
            {
              "value": "link",
              "type": "string"
            },
            {
              "value": "link.simple",
              "type": "string"
            },
            {
              "value": "neo",
              "type": "string"
            },
            {
              "value": "neo.simple",
              "type": "string"
            },
            {
              "value": "outline",
              "type": "string"
            },
            {
              "value": "outline.simple",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setBlur",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setBlur() => Promise<void>",
          "parameters": [],
          "docs": "Sets blur on the native `button` in `goat-button`. Use this method instead of the global\n`button.blur()`.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the native `button` in `goat-button`. Use this method instead of the global\n`button.focus()`.",
          "docsTags": []
        },
        {
          "name": "triggerClick",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "triggerClick() => Promise<void>",
          "parameters": [],
          "docs": "Triggers a click event on the native `button` in `goat-button`. Use this method instead of the global\n`button.click()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "goat-button--click",
          "detail": "{ appendData: any; }",
          "bubbles": true,
          "complexType": {
            "original": "{\n    appendData: any;\n  }",
            "resolved": "{ appendData: any; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the button is clicked.",
          "docsTags": []
        }
      ],
      "styles": [
        {
          "name": "--goat-button-border-radius",
          "annotation": "prop",
          "docs": "Button border radius."
        },
        {
          "name": "--goat-button-border-style",
          "annotation": "prop",
          "docs": "Button border style."
        },
        {
          "name": "--goat-button-color",
          "annotation": "prop",
          "docs": "Button filling color."
        },
        {
          "name": "--goat-button-color-active",
          "annotation": "prop",
          "docs": "Button filling color on active."
        },
        {
          "name": "--goat-button-color-hover",
          "annotation": "prop",
          "docs": "Button filling color on hover."
        },
        {
          "name": "--goat-button-color-light",
          "annotation": "prop",
          "docs": "Button filling color for light variant."
        },
        {
          "name": "--goat-button-padding",
          "annotation": "prop",
          "docs": "Button padding."
        },
        {
          "name": "--goat-button-support-contrast-color",
          "annotation": "prop",
          "docs": "Button support color (text or border). Should be white or black based on weight of button filling color."
        },
        {
          "name": "--goat-theme-button-border-radius",
          "annotation": "prop",
          "docs": "Theme level button border radius. (applies to all buttons)"
        },
        {
          "name": "--goat-theme-button-border-style",
          "annotation": "prop",
          "docs": "Theme level button border style. (applies to all buttons)"
        }
      ],
      "slots": [],
      "parts": [],
      "listeners": [
        {
          "event": "mouseup",
          "target": "window",
          "capture": false,
          "passive": true
        },
        {
          "event": "keyup",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "metadata": {
        "name": "Button",
        "description": "Buttons are used to initialize an action. Button labels express what action will occur when the user interacts with it.",
        "overview": " <p>Buttons are clickable elements that are used to trigger actions. They communicate calls to action to the user and allow users to interact with pages in a variety of ways. Button labels express what action will occur when the user interacts with it.</p>",
        "category": "General",
        "tags": [
          "controls"
        ],
        "example": "<goat-button>\nButton CTA\n</goat-button>"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/button/button-group",
      "filePath": "src/components/button/button-group/button-group.tsx",
      "fileName": "button-group.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/button/button-group/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/button/button-group/usage",
      "tag": "goat-button-group",
      "readme": "# goat-button-group\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [
        "goat-flow-designer"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "goat-flow-designer": [
          "goat-button-group"
        ]
      },
      "props": [],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "Button Group",
        "description": "Group a series of buttons together on a single line with the button group, and super-power.",
        "category": "General",
        "tags": [
          "controls"
        ],
        "example": "<goat-button-group>\n<goat-button block icon=\"home\"></goat-button>\n<goat-button block icon=\"alarm\"></goat-button>\n</goat-button-group>"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/application/calendar/calendar",
      "filePath": "src/components/application/calendar/calendar/calendar.tsx",
      "fileName": "calendar.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/application/calendar/calendar/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/application/calendar/calendar/usage",
      "tag": "goat-calendar",
      "readme": "# goat-avatar\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [
        "goat-button",
        "goat-select",
        "goat-calendar-column-view",
        "goat-calendar-month-view"
      ],
      "dependencyGraph": {
        "goat-calendar": [
          "goat-button",
          "goat-select",
          "goat-calendar-column-view",
          "goat-calendar-month-view"
        ],
        "goat-button": [
          "goat-spinner",
          "goat-icon"
        ],
        "goat-select": [
          "goat-icon",
          "goat-tag",
          "goat-button",
          "goat-spinner",
          "goat-menu",
          "goat-text",
          "goat-menu-item"
        ],
        "goat-tag": [
          "goat-icon"
        ],
        "goat-menu": [
          "goat-empty-state"
        ],
        "goat-empty-state": [
          "goat-svg",
          "goat-button"
        ],
        "goat-menu-item": [
          "goat-icon"
        ],
        "goat-calendar-column-view": [
          "goat-calendar-column-view-background"
        ]
      },
      "props": [
        {
          "name": "availableViews",
          "type": "CalendarViewType[]",
          "complexType": {
            "original": "CalendarViewType[]",
            "resolved": "CalendarViewType[]",
            "references": {
              "CalendarViewType": {
                "location": "import",
                "path": "./types",
                "id": "src/components/application/calendar/calendar/types.tsx::CalendarViewType"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Available views.",
          "docsTags": [],
          "default": "[\n    {\n      label: 'Day',\n      value: 'day',\n      type: 'column',\n      days: 1,\n    },\n    {\n      label: 'Week',\n      value: 'week',\n      type: 'column',\n      days: 7,\n    },\n    {\n      label: 'Month',\n      value: 'month',\n      type: 'month',\n    },\n  ]",
          "values": [
            {
              "type": "CalendarViewType[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "contextDate",
          "type": "Date",
          "complexType": {
            "original": "Date",
            "resolved": "Date",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Context date.",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "eventClickable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "event-clickable",
          "reflectToAttr": false,
          "docs": "Event clickable.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "events",
          "type": "EventType[]",
          "complexType": {
            "original": "EventType[]",
            "resolved": "EventType[]",
            "references": {
              "EventType": {
                "location": "import",
                "path": "./types",
                "id": "src/components/application/calendar/calendar/types.tsx::EventType"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Calendar events.",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "EventType[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showLoader",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-loader",
          "reflectToAttr": false,
          "docs": "Show loader.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "timezone",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "timezone",
          "reflectToAttr": false,
          "docs": "Timezone.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "view",
          "type": "string",
          "complexType": {
            "original": "'day' | 'week' | 'month' | string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "view",
          "reflectToAttr": false,
          "docs": "Calendar view.",
          "docsTags": [],
          "default": "'week'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "goat-calendar--event-click",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Calendar event click.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [
        {
          "event": "internal-column-view-date-click",
          "capture": false,
          "passive": false
        },
        {
          "event": "internal-column-view-event-click",
          "capture": false,
          "passive": false
        },
        {
          "event": "internal-month-view-event-click",
          "capture": false,
          "passive": false
        }
      ],
      "metadata": {
        "name": "Calendar",
        "description": "The calendar component is used to display information in a daily, weekly, monthly, or category view.",
        "category": "Data Display",
        "tags": [
          "calendar"
        ],
        "img": "/assets/img/calendar.webp",
        "imgDark": "/assets/img/calendar-dark.webp"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/application/calendar/calendar/column-view",
      "filePath": "src/components/application/calendar/calendar/column-view/column-view.tsx",
      "fileName": "column-view.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/application/calendar/calendar/column-view/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/application/calendar/calendar/column-view/usage",
      "tag": "goat-calendar-column-view",
      "readme": "# goat-calendar-column-view\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [
        "goat-calendar"
      ],
      "dependencies": [
        "goat-calendar-column-view-background"
      ],
      "dependencyGraph": {
        "goat-calendar-column-view": [
          "goat-calendar-column-view-background"
        ],
        "goat-calendar": [
          "goat-calendar-column-view"
        ]
      },
      "props": [
        {
          "name": "contextDate",
          "type": "Date",
          "complexType": {
            "original": "Date",
            "resolved": "Date",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "currentTime",
          "type": "Date",
          "complexType": {
            "original": "Date",
            "resolved": "Date",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "days",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "days",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "7",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "eventClickable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "event-clickable",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "events",
          "type": "any[]",
          "complexType": {
            "original": "any[]",
            "resolved": "any[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "view",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "view",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'week'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "internal-column-view-date-click",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "internal-column-view-event-click",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {}
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/application/calendar/calendar/column-view/column-view-background",
      "filePath": "src/components/application/calendar/calendar/column-view/column-view-background/column-view-background.tsx",
      "fileName": "column-view-background.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/application/calendar/calendar/column-view/column-view-background/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/application/calendar/calendar/column-view/column-view-background/usage",
      "tag": "goat-calendar-column-view-background",
      "readme": "# goat-calendar-column-view-background\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [
        "goat-calendar-column-view"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "goat-calendar-column-view": [
          "goat-calendar-column-view-background"
        ]
      },
      "props": [
        {
          "name": "currentTime",
          "type": "Date",
          "complexType": {
            "original": "Date",
            "resolved": "Date",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dateRange",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "date-range",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {}
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/application/calendar/calendar/month-view",
      "filePath": "src/components/application/calendar/calendar/month-view/month-view.tsx",
      "fileName": "month-view.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/application/calendar/calendar/month-view/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/application/calendar/calendar/month-view/usage",
      "tag": "goat-calendar-month-view",
      "readme": "# goat-calendar-column-view\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [
        "goat-calendar"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "goat-calendar": [
          "goat-calendar-month-view"
        ]
      },
      "props": [
        {
          "name": "contextDate",
          "type": "Date",
          "complexType": {
            "original": "Date",
            "resolved": "Date",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "currentTime",
          "type": "Date",
          "complexType": {
            "original": "Date",
            "resolved": "Date",
            "references": {
              "Date": {
                "location": "global",
                "id": "global::Date"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "Date"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "eventClickable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "event-clickable",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "events",
          "type": "any[]",
          "complexType": {
            "original": "any[]",
            "resolved": "any[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "internal-month-view-date-click",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "internal-month-view-event-click",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {}
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/application/calendar/calendar/month-view/month-view-background",
      "filePath": "src/components/application/calendar/calendar/month-view/month-view-background/month-view-background.tsx",
      "fileName": "month-view-background.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/application/calendar/calendar/month-view/month-view-background/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/application/calendar/calendar/month-view/month-view-background/usage",
      "tag": "goat-calendar-month-view-background",
      "readme": "# goat-calendar-column-view-background\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "columns",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "columns",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {}
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/application/flow-designer/canvas",
      "filePath": "src/components/application/flow-designer/canvas/canvas.tsx",
      "fileName": "canvas.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/application/flow-designer/canvas/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/application/flow-designer/canvas/usage",
      "tag": "goat-canvas",
      "readme": "# goat-flow-designer\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [
        "goat-flow-designer"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "goat-flow-designer": [
          "goat-canvas"
        ]
      },
      "props": [
        {
          "name": "padding",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "padding",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "shapes",
          "type": "any[]",
          "complexType": {
            "original": "any[]",
            "resolved": "any[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "viewbox",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "viewbox",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "zoom",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "zoom",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "Canvas",
        "category": "Up coming",
        "description": "Canvas for drawing lines and shapes on.",
        "img": "/assets/img/canvas.webp"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/card",
      "filePath": "src/components/card/card.tsx",
      "fileName": "card.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/card/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/card/usage",
      "tag": "goat-card",
      "readme": "# goat-heading\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "shadowLevel",
          "type": "\"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\" | \"xxl\"",
          "complexType": {
            "original": "'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | undefined",
            "resolved": "\"lg\" | \"md\" | \"sm\" | \"xl\" | \"xs\" | \"xxl\"",
            "references": {}
          },
          "mutable": false,
          "attr": "shadow-level",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "lg",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            },
            {
              "value": "sm",
              "type": "string"
            },
            {
              "value": "xl",
              "type": "string"
            },
            {
              "value": "xs",
              "type": "string"
            },
            {
              "value": "xxl",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {}
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/application/condition-builder/cb-compound-expression",
      "filePath": "src/components/application/condition-builder/cb-compound-expression/cb-compound-expression.tsx",
      "fileName": "cb-compound-expression.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/application/condition-builder/cb-compound-expression/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/application/condition-builder/cb-compound-expression/usage",
      "tag": "goat-cb-compound-expression",
      "readme": "# goat-icon\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [
        "goat-text",
        "goat-cb-divider",
        "goat-tag"
      ],
      "dependencyGraph": {
        "goat-cb-compound-expression": [
          "goat-text",
          "goat-cb-divider",
          "goat-tag"
        ],
        "goat-tag": [
          "goat-icon"
        ]
      },
      "props": [
        {
          "name": "conditionOperator",
          "type": "\"and\" | \"or\"",
          "complexType": {
            "original": "'and' | 'or'",
            "resolved": "\"and\" | \"or\"",
            "references": {}
          },
          "mutable": false,
          "attr": "condition-operator",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "and",
              "type": "string"
            },
            {
              "value": "or",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fieldLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "field-label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "fieldName",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "field-name",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {}
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/application/condition-builder/cb-divider",
      "filePath": "src/components/application/condition-builder/cb-divider/cb-divider.tsx",
      "fileName": "cb-divider.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/application/condition-builder/cb-divider/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/application/condition-builder/cb-divider/usage",
      "tag": "goat-cb-divider",
      "readme": "# goat-icon\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [
        "goat-cb-compound-expression",
        "goat-cb-predicate",
        "goat-condition-builder"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "goat-cb-compound-expression": [
          "goat-cb-divider"
        ],
        "goat-cb-predicate": [
          "goat-cb-divider"
        ],
        "goat-condition-builder": [
          "goat-cb-divider"
        ]
      },
      "props": [
        {
          "name": "connectEnd",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "connect-end",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "connectStart",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "connect-start",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "vertical",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "vertical",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {}
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/application/condition-builder/cb-expression",
      "filePath": "src/components/application/condition-builder/cb-expression/cb-expression.tsx",
      "fileName": "cb-expression.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/application/condition-builder/cb-expression/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/application/condition-builder/cb-expression/usage",
      "tag": "goat-cb-expression",
      "readme": "# goat-icon\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [
        "goat-select"
      ],
      "dependencyGraph": {
        "goat-cb-expression": [
          "goat-select"
        ],
        "goat-select": [
          "goat-icon",
          "goat-tag",
          "goat-button",
          "goat-spinner",
          "goat-menu",
          "goat-text",
          "goat-menu-item"
        ],
        "goat-tag": [
          "goat-icon"
        ],
        "goat-button": [
          "goat-spinner",
          "goat-icon"
        ],
        "goat-menu": [
          "goat-empty-state"
        ],
        "goat-empty-state": [
          "goat-svg",
          "goat-button"
        ],
        "goat-menu-item": [
          "goat-icon"
        ]
      },
      "props": [
        {
          "name": "operatorValue",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "operator-value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "operators",
          "type": "any[]",
          "complexType": {
            "original": "any[]",
            "resolved": "any[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {}
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/application/condition-builder/cb-predicate",
      "filePath": "src/components/application/condition-builder/cb-predicate/cb-predicate.tsx",
      "fileName": "cb-predicate.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/application/condition-builder/cb-predicate/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/application/condition-builder/cb-predicate/usage",
      "tag": "goat-cb-predicate",
      "readme": "# goat-icon\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [
        "goat-cb-divider",
        "goat-tag"
      ],
      "dependencyGraph": {
        "goat-cb-predicate": [
          "goat-cb-divider",
          "goat-tag"
        ],
        "goat-tag": [
          "goat-icon"
        ]
      },
      "props": [
        {
          "name": "conditionOperator",
          "type": "\"and\" | \"or\"",
          "complexType": {
            "original": "'and' | 'or'",
            "resolved": "\"and\" | \"or\"",
            "references": {}
          },
          "mutable": false,
          "attr": "condition-operator",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "and",
              "type": "string"
            },
            {
              "value": "or",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "vertical",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "vertical",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {}
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/charts/chart-doughnut",
      "filePath": "src/components/charts/chart-doughnut/chart-doughnut.tsx",
      "fileName": "chart-doughnut.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/charts/chart-doughnut/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/charts/chart-doughnut/usage",
      "tag": "goat-chart-doughnut",
      "readme": "# goat-heading\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "data",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "data",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "margin",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "margin",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "10",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showLabels",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-labels",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "width",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "width",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "Chart Doughnut",
        "description": "A doughnut chart is a circular chart with a blank center. The chart is similar to a pie chart with the center cut out. The area in the center can be used to display information.",
        "category": "Charts",
        "tag": "chart",
        "img": "/assets/img/chart-doughnut.webp",
        "imgDark": "/assets/img/chart-doughnut-dark.webp"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/charts/chart-pie",
      "filePath": "src/components/charts/chart-pie/chart-pie.tsx",
      "fileName": "chart-pie.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/charts/chart-pie/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/charts/chart-pie/usage",
      "tag": "goat-chart-pie",
      "readme": "# goat-heading\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "data",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "data",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "margin",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "margin",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "10",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showLabels",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-labels",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "width",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "width",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "Chart Pie",
        "description": "A pie chart (also known as a circle chart) is a circular statistical graphic that visually represents numerical proportions. It is commonly used to illustrate how parts relate to the whole for a specific categorical variable.",
        "category": "Charts",
        "tag": "chart",
        "img": "/assets/img/chart-pie.webp",
        "imgDark": "/assets/img/chart-pie-dark.webp"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/input-controls/checkbox",
      "filePath": "src/components/input-controls/checkbox/checkbox.tsx",
      "fileName": "checkbox.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/input-controls/checkbox/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/input-controls/checkbox/usage",
      "tag": "goat-checkbox",
      "readme": "# goat-checkbox\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [
        "goat-table"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "goat-table": [
          "goat-checkbox"
        ]
      },
      "props": [
        {
          "name": "configAria",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "config-aria",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "{}",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "If true, the user cannot interact with the button. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "intermediate",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "intermediate",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The checkbox label.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layer",
          "type": "\"01\" | \"02\" | \"background\"",
          "complexType": {
            "original": "'background' | '01' | '02'",
            "resolved": "\"01\" | \"02\" | \"background\"",
            "references": {}
          },
          "mutable": false,
          "attr": "layer",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "01",
              "type": "string"
            },
            {
              "value": "02",
              "type": "string"
            },
            {
              "value": "background",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The input field name.",
          "docsTags": [],
          "default": "`goat-input-${this.gid}`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "If true, required icon is show. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rounded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "rounded",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"lg\" | \"md\" | \"sm\"",
          "complexType": {
            "original": "'sm' | 'md' | 'lg'",
            "resolved": "\"lg\" | \"md\" | \"sm\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The button size.\nPossible values are: `\"sm\"`, `\"md\"`, `\"lg\"`. Defaults to `\"md\"`.",
          "docsTags": [],
          "default": "'md'",
          "values": [
            {
              "value": "lg",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            },
            {
              "value": "sm",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The input field value.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getComponentId",
          "returns": {
            "type": "Promise<string>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<string>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<string>"
          },
          "signature": "getComponentId() => Promise<string>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "setBlur",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setBlur() => Promise<void>",
          "parameters": [],
          "docs": "Sets blur on the native `input` in `goat-input`. Use this method instead of the global\n`input.blur()`.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the native `input` in `goat-input`. Use this method instead of the global\n`input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "goat-checkbox--blur",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input loses focus.",
          "docsTags": []
        },
        {
          "event": "goat-checkbox--change",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "On change of input a CustomEvent 'goat-checkbox--change' will be triggered. Event details contains parent event, oldValue, newValue of input.",
          "docsTags": []
        },
        {
          "event": "goat-checkbox--focus",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has focus.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [
        {
          "event": "mouseup",
          "target": "window",
          "capture": false,
          "passive": true
        },
        {
          "event": "keyup",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "metadata": {
        "name": "Checkbox",
        "description": "Captures boolean input with an optional indeterminate mode.",
        "category": "Form Inputs",
        "tags": [
          "input",
          " form"
        ],
        "example": "<goat-checkbox value='true'>Want ice cream?</goat-checkbox>"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/input-controls/code-editor",
      "filePath": "src/components/input-controls/code-editor/code-editor.tsx",
      "fileName": "code-editor.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/input-controls/code-editor/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/input-controls/code-editor/usage",
      "tag": "goat-code-editor",
      "readme": "# goat-code-editor\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [
        "goat-html-editor"
      ],
      "dependencies": [
        "goat-tag",
        "goat-spinner"
      ],
      "dependencyGraph": {
        "goat-code-editor": [
          "goat-tag",
          "goat-spinner"
        ],
        "goat-tag": [
          "goat-icon"
        ],
        "goat-html-editor": [
          "goat-code-editor"
        ]
      },
      "props": [
        {
          "name": "debounce",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "Set the amount of time, in milliseconds, to wait to trigger the `onChange` event after each keystroke.",
          "docsTags": [],
          "default": "250",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "If true, the user cannot interact with the button. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "language",
          "type": "\"html\" | \"javascript\" | \"json\"",
          "complexType": {
            "original": "'javascript' | 'json' | 'html'",
            "resolved": "\"html\" | \"javascript\" | \"json\"",
            "references": {}
          },
          "mutable": false,
          "attr": "language",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'javascript'",
          "values": [
            {
              "value": "html",
              "type": "string"
            },
            {
              "value": "javascript",
              "type": "string"
            },
            {
              "value": "json",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "libSource",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "lib-source",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "lineNumbers",
          "type": "\"off\" | \"on\"",
          "complexType": {
            "original": "'off' | 'on'",
            "resolved": "\"off\" | \"on\"",
            "references": {}
          },
          "mutable": false,
          "attr": "line-numbers",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'on'",
          "values": [
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "on",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "minimap",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "minimap",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The input field name.",
          "docsTags": [],
          "default": "`goat-input-${this.gid}`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "If true, required icon is show. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The input field value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getComponentId",
          "returns": {
            "type": "Promise<string>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<string>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<string>"
          },
          "signature": "getComponentId() => Promise<string>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "setBlur",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setBlur() => Promise<void>",
          "parameters": [],
          "docs": "Sets blur on the native `input` in `goat-input`. Use this method instead of the global\n`input.blur()`.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the native `input` in `goat-input`. Use this method instead of the global\n`input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "goat-code-editor--change",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value has changed.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "Code Editor",
        "description": "A browser based code editor.",
        "category": "Form Inputs",
        "tags": [
          "input",
          " form"
        ],
        "img": "/assets/img/code-editor.webp",
        "imgDark": "/assets/img/code-editor-dark.webp"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/application/code-highlighter",
      "filePath": "src/components/application/code-highlighter/code-highlighter.tsx",
      "fileName": "code-highlighter.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/application/code-highlighter/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/application/code-highlighter/usage",
      "tag": "goat-code-highlighter",
      "readme": "# goat-code-editor\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [
        "goat-tooltip",
        "goat-button",
        "goat-spinner"
      ],
      "dependencyGraph": {
        "goat-code-highlighter": [
          "goat-tooltip",
          "goat-button",
          "goat-spinner"
        ],
        "goat-tooltip": [
          "goat-popover",
          "goat-popover-content"
        ],
        "goat-button": [
          "goat-spinner",
          "goat-icon"
        ]
      },
      "props": [
        {
          "name": "format",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "format",
          "reflectToAttr": true,
          "docs": "Format the code snippet.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideCopy",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-copy",
          "reflectToAttr": false,
          "docs": "Hide the copy button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "inline",
          "reflectToAttr": true,
          "docs": "Display the code snippet inline.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "language",
          "type": "\"json\" | \"http\" | \"html\" | \"q\" | \"d\" | \"r\" | \"c\" | \"markup\" | \"css\" | \"clike\" | \"javascript\" | \"abap\" | \"actionscript\" | \"ada\" | \"apacheconf\" | \"apl\" | \"applescript\" | \"arduino\" | \"arff\" | \"asciidoc\" | \"asm6502\" | \"aspnet\" | \"autohotkey\" | \"autoit\" | \"bash\" | \"basic\" | \"batch\" | \"bison\" | \"brainfuck\" | \"bro\" | \"csharp\" | \"cpp\" | \"coffeescript\" | \"clojure\" | \"crystal\" | \"csp\" | \"css-extras\" | \"dart\" | \"diff\" | \"django\" | \"docker\" | \"eiffel\" | \"elixir\" | \"elm\" | \"erb\" | \"erlang\" | \"fsharp\" | \"flow\" | \"fortran\" | \"gedcom\" | \"gherkin\" | \"git\" | \"glsl\" | \"go\" | \"graphql\" | \"groovy\" | \"haml\" | \"handlebars\" | \"haskell\" | \"haxe\" | \"hpkp\" | \"hsts\" | \"ichigojam\" | \"icon\" | \"inform7\" | \"ini\" | \"io\" | \"j\" | \"java\" | \"jolie\" | \"jsx\" | \"julia\" | \"keyman\" | \"kotlin\" | \"latex\" | \"less\" | \"lilypond\" | \"liquid\" | \"lisp\" | \"livescript\" | \"lolcode\" | \"lua\" | \"makefile\" | \"markdown\" | \"markup-templating\" | \"matlab\" | \"mel\" | \"mizar\" | \"monkey\" | \"n4js\" | \"nasm\" | \"nginx\" | \"nim\" | \"nix\" | \"nsis\" | \"objectivec\" | \"ocaml\" | \"opencl\" | \"oz\" | \"parigp\" | \"parser\" | \"pascal\" | \"perl\" | \"php\" | \"php-extras\" | \"plsql\" | \"powershell\" | \"processing\" | \"prolog\" | \"properties\" | \"protobuf\" | \"pug\" | \"puppet\" | \"pure\" | \"python\" | \"qore\"",
          "complexType": {
            "original": "Language",
            "resolved": "\"json\" | \"http\" | \"html\" | \"q\" | \"d\" | \"r\" | \"c\" | \"markup\" | \"css\" | \"clike\" | \"javascript\" | \"abap\" | \"actionscript\" | \"ada\" | \"apacheconf\" | \"apl\" | \"applescript\" | \"arduino\" | \"arff\" | \"asciidoc\" | \"asm6502\" | \"aspnet\" | \"autohotkey\" | \"autoit\" | \"bash\" | \"basic\" | \"batch\" | \"bison\" | \"brainfuck\" | \"bro\" | \"csharp\" | \"cpp\" | \"coffeescript\" | \"clojure\" | \"crystal\" | \"csp\" | \"css-extras\" | \"dart\" | \"diff\" | \"django\" | \"docker\" | \"eiffel\" | \"elixir\" | \"elm\" | \"erb\" | \"erlang\" | \"fsharp\" | \"flow\" | \"fortran\" | \"gedcom\" | \"gherkin\" | \"git\" | \"glsl\" | \"go\" | \"graphql\" | \"groovy\" | \"haml\" | \"handlebars\" | \"haskell\" | \"haxe\" | \"hpkp\" | \"hsts\" | \"ichigojam\" | \"icon\" | \"inform7\" | \"ini\" | \"io\" | \"j\" | \"java\" | \"jolie\" | \"jsx\" | \"julia\" | \"keyman\" | \"kotlin\" | \"latex\" | \"less\" | \"lilypond\" | \"liquid\" | \"lisp\" | \"livescript\" | \"lolcode\" | \"lua\" | \"makefile\" | \"markdown\" | \"markup-templating\" | \"matlab\" | \"mel\" | \"mizar\" | \"monkey\" | \"n4js\" | \"nasm\" | \"nginx\" | \"nim\" | \"nix\" | \"nsis\" | \"objectivec\" | \"ocaml\" | \"opencl\" | \"oz\" | \"parigp\" | \"parser\" | \"pascal\" | \"perl\" | \"php\" | \"php-extras\" | \"plsql\" | \"powershell\" | \"processing\" | \"prolog\" | \"properties\" | \"protobuf\" | \"pug\" | \"puppet\" | \"pure\" | \"python\" | \"qore\"",
            "references": {
              "Language": {
                "location": "import",
                "path": "./constants",
                "id": "src/components/application/code-highlighter/constants.ts::Language"
              }
            }
          },
          "mutable": false,
          "attr": "language",
          "reflectToAttr": true,
          "docs": "The language of the code snippet.",
          "docsTags": [],
          "default": "'javascript'",
          "values": [
            {
              "value": "json",
              "type": "string"
            },
            {
              "value": "http",
              "type": "string"
            },
            {
              "value": "html",
              "type": "string"
            },
            {
              "value": "q",
              "type": "string"
            },
            {
              "value": "d",
              "type": "string"
            },
            {
              "value": "r",
              "type": "string"
            },
            {
              "value": "c",
              "type": "string"
            },
            {
              "value": "markup",
              "type": "string"
            },
            {
              "value": "css",
              "type": "string"
            },
            {
              "value": "clike",
              "type": "string"
            },
            {
              "value": "javascript",
              "type": "string"
            },
            {
              "value": "abap",
              "type": "string"
            },
            {
              "value": "actionscript",
              "type": "string"
            },
            {
              "value": "ada",
              "type": "string"
            },
            {
              "value": "apacheconf",
              "type": "string"
            },
            {
              "value": "apl",
              "type": "string"
            },
            {
              "value": "applescript",
              "type": "string"
            },
            {
              "value": "arduino",
              "type": "string"
            },
            {
              "value": "arff",
              "type": "string"
            },
            {
              "value": "asciidoc",
              "type": "string"
            },
            {
              "value": "asm6502",
              "type": "string"
            },
            {
              "value": "aspnet",
              "type": "string"
            },
            {
              "value": "autohotkey",
              "type": "string"
            },
            {
              "value": "autoit",
              "type": "string"
            },
            {
              "value": "bash",
              "type": "string"
            },
            {
              "value": "basic",
              "type": "string"
            },
            {
              "value": "batch",
              "type": "string"
            },
            {
              "value": "bison",
              "type": "string"
            },
            {
              "value": "brainfuck",
              "type": "string"
            },
            {
              "value": "bro",
              "type": "string"
            },
            {
              "value": "csharp",
              "type": "string"
            },
            {
              "value": "cpp",
              "type": "string"
            },
            {
              "value": "coffeescript",
              "type": "string"
            },
            {
              "value": "clojure",
              "type": "string"
            },
            {
              "value": "crystal",
              "type": "string"
            },
            {
              "value": "csp",
              "type": "string"
            },
            {
              "value": "css-extras",
              "type": "string"
            },
            {
              "value": "dart",
              "type": "string"
            },
            {
              "value": "diff",
              "type": "string"
            },
            {
              "value": "django",
              "type": "string"
            },
            {
              "value": "docker",
              "type": "string"
            },
            {
              "value": "eiffel",
              "type": "string"
            },
            {
              "value": "elixir",
              "type": "string"
            },
            {
              "value": "elm",
              "type": "string"
            },
            {
              "value": "erb",
              "type": "string"
            },
            {
              "value": "erlang",
              "type": "string"
            },
            {
              "value": "fsharp",
              "type": "string"
            },
            {
              "value": "flow",
              "type": "string"
            },
            {
              "value": "fortran",
              "type": "string"
            },
            {
              "value": "gedcom",
              "type": "string"
            },
            {
              "value": "gherkin",
              "type": "string"
            },
            {
              "value": "git",
              "type": "string"
            },
            {
              "value": "glsl",
              "type": "string"
            },
            {
              "value": "go",
              "type": "string"
            },
            {
              "value": "graphql",
              "type": "string"
            },
            {
              "value": "groovy",
              "type": "string"
            },
            {
              "value": "haml",
              "type": "string"
            },
            {
              "value": "handlebars",
              "type": "string"
            },
            {
              "value": "haskell",
              "type": "string"
            },
            {
              "value": "haxe",
              "type": "string"
            },
            {
              "value": "hpkp",
              "type": "string"
            },
            {
              "value": "hsts",
              "type": "string"
            },
            {
              "value": "ichigojam",
              "type": "string"
            },
            {
              "value": "icon",
              "type": "string"
            },
            {
              "value": "inform7",
              "type": "string"
            },
            {
              "value": "ini",
              "type": "string"
            },
            {
              "value": "io",
              "type": "string"
            },
            {
              "value": "j",
              "type": "string"
            },
            {
              "value": "java",
              "type": "string"
            },
            {
              "value": "jolie",
              "type": "string"
            },
            {
              "value": "jsx",
              "type": "string"
            },
            {
              "value": "julia",
              "type": "string"
            },
            {
              "value": "keyman",
              "type": "string"
            },
            {
              "value": "kotlin",
              "type": "string"
            },
            {
              "value": "latex",
              "type": "string"
            },
            {
              "value": "less",
              "type": "string"
            },
            {
              "value": "lilypond",
              "type": "string"
            },
            {
              "value": "liquid",
              "type": "string"
            },
            {
              "value": "lisp",
              "type": "string"
            },
            {
              "value": "livescript",
              "type": "string"
            },
            {
              "value": "lolcode",
              "type": "string"
            },
            {
              "value": "lua",
              "type": "string"
            },
            {
              "value": "makefile",
              "type": "string"
            },
            {
              "value": "markdown",
              "type": "string"
            },
            {
              "value": "markup-templating",
              "type": "string"
            },
            {
              "value": "matlab",
              "type": "string"
            },
            {
              "value": "mel",
              "type": "string"
            },
            {
              "value": "mizar",
              "type": "string"
            },
            {
              "value": "monkey",
              "type": "string"
            },
            {
              "value": "n4js",
              "type": "string"
            },
            {
              "value": "nasm",
              "type": "string"
            },
            {
              "value": "nginx",
              "type": "string"
            },
            {
              "value": "nim",
              "type": "string"
            },
            {
              "value": "nix",
              "type": "string"
            },
            {
              "value": "nsis",
              "type": "string"
            },
            {
              "value": "objectivec",
              "type": "string"
            },
            {
              "value": "ocaml",
              "type": "string"
            },
            {
              "value": "opencl",
              "type": "string"
            },
            {
              "value": "oz",
              "type": "string"
            },
            {
              "value": "parigp",
              "type": "string"
            },
            {
              "value": "parser",
              "type": "string"
            },
            {
              "value": "pascal",
              "type": "string"
            },
            {
              "value": "perl",
              "type": "string"
            },
            {
              "value": "php",
              "type": "string"
            },
            {
              "value": "php-extras",
              "type": "string"
            },
            {
              "value": "plsql",
              "type": "string"
            },
            {
              "value": "powershell",
              "type": "string"
            },
            {
              "value": "processing",
              "type": "string"
            },
            {
              "value": "prolog",
              "type": "string"
            },
            {
              "value": "properties",
              "type": "string"
            },
            {
              "value": "protobuf",
              "type": "string"
            },
            {
              "value": "pug",
              "type": "string"
            },
            {
              "value": "puppet",
              "type": "string"
            },
            {
              "value": "pure",
              "type": "string"
            },
            {
              "value": "python",
              "type": "string"
            },
            {
              "value": "qore",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "lineNumbers",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "line-numbers",
          "reflectToAttr": true,
          "docs": "Display line numbers.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The code snippet to highlight.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [
        {
          "name": "--goat-code-highlighter-background",
          "annotation": "prop",
          "docs": "Code Highlighter background color"
        }
      ],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "Code Highlighter",
        "description": "A browser based code highlighter.",
        "category": "Data Display",
        "tag": "display, code",
        "img": "/assets/img/code-highlighter.webp",
        "imgDark": "/assets/img/code-highlighter-dark.webp"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/application/condition-builder/condition-builder",
      "filePath": "src/components/application/condition-builder/condition-builder/condition-builder.tsx",
      "fileName": "condition-builder.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/application/condition-builder/condition-builder/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/application/condition-builder/condition-builder/usage",
      "tag": "goat-condition-builder",
      "readme": "# goat-icon\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [
        "goat-select",
        "goat-input",
        "goat-text",
        "goat-cb-divider",
        "goat-tag"
      ],
      "dependencyGraph": {
        "goat-condition-builder": [
          "goat-select",
          "goat-input",
          "goat-text",
          "goat-cb-divider",
          "goat-tag"
        ],
        "goat-select": [
          "goat-icon",
          "goat-tag",
          "goat-button",
          "goat-spinner",
          "goat-menu",
          "goat-text",
          "goat-menu-item"
        ],
        "goat-tag": [
          "goat-icon"
        ],
        "goat-button": [
          "goat-spinner",
          "goat-icon"
        ],
        "goat-menu": [
          "goat-empty-state"
        ],
        "goat-empty-state": [
          "goat-svg",
          "goat-button"
        ],
        "goat-menu-item": [
          "goat-icon"
        ],
        "goat-input": [
          "goat-tooltip",
          "goat-button"
        ],
        "goat-tooltip": [
          "goat-popover",
          "goat-popover-content"
        ]
      },
      "props": [
        {
          "name": "content",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "content",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "Condition Builder",
        "description": "A condition builder is a component that allows users to build a condition using a set of rules.",
        "category": "Up coming",
        "tag": "content",
        "img": "/assets/img/condition-builder.webp"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/container",
      "filePath": "src/components/container/container.tsx",
      "fileName": "container.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/container/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/container/usage",
      "tag": "goat-container",
      "readme": "# goat-heading\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "size",
          "type": "\"full\" | \"lg\" | \"max\" | \"md\" | \"sm\" | \"xl\"",
          "complexType": {
            "original": "'max' | 'xl' | 'lg' | 'md' | 'sm' | 'full'",
            "resolved": "\"full\" | \"lg\" | \"max\" | \"md\" | \"sm\" | \"xl\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "'full'",
          "values": [
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "lg",
              "type": "string"
            },
            {
              "value": "max",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            },
            {
              "value": "sm",
              "type": "string"
            },
            {
              "value": "xl",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {}
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/application/current-time",
      "filePath": "src/components/application/current-time/current-time.tsx",
      "fileName": "current-time.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/application/current-time/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/application/current-time/usage",
      "tag": "goat-current-time",
      "readme": "# goat-current-time\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "timezone",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "timezone",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "Current Time",
        "description": "Displays the current time in a given timezone.",
        "category": "Others",
        "example": "<goat-current-time></goat-current-time>"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/input-controls/data-and-time/date/date-picker",
      "filePath": "src/components/input-controls/data-and-time/date/date-picker/date-picker.tsx",
      "fileName": "date-picker.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/input-controls/data-and-time/date/date-picker/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/input-controls/data-and-time/date/date-picker/usage",
      "tag": "goat-date-picker",
      "readme": "# goat-date-picker\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [
        "goat-button"
      ],
      "dependencyGraph": {
        "goat-date-picker": [
          "goat-button"
        ],
        "goat-button": [
          "goat-spinner",
          "goat-icon"
        ]
      },
      "props": [
        {
          "name": "configAria",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "config-aria",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "{}",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "debounce",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "Set the amount of time, in milliseconds, to wait to trigger the `goatChange` event after each keystroke.",
          "docsTags": [],
          "default": "300",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "If true, the user cannot interact with the button. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helperText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "helper-text",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "inline",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalidText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid-text",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The input field name.",
          "docsTags": [],
          "default": "`goat-input-${this.gid}`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "The input field placeholder.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": true,
          "docs": "If true, the user read the value cannot modify it. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "If true, required icon is show. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"lg\" | \"md\" | \"sm\"",
          "complexType": {
            "original": "'sm' | 'md' | 'lg'",
            "resolved": "\"lg\" | \"md\" | \"sm\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "The input field size.\nPossible values are: `\"sm\"`, `\"md\"`, `\"lg\"`. Defaults to `\"md\"`.",
          "docsTags": [],
          "default": "'md'",
          "values": [
            {
              "value": "lg",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            },
            {
              "value": "sm",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number | string",
          "complexType": {
            "original": "string | number | null",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The input field value.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "warn",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "warn",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "warnText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "warn-text",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getComponentId",
          "returns": {
            "type": "Promise<string>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<string>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<string>"
          },
          "signature": "getComponentId() => Promise<string>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "setBlur",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setBlur() => Promise<void>",
          "parameters": [],
          "docs": "Sets blur on the native `input` in `goat-input`. Use this method instead of the global\n`input.blur()`.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the native `input` in `goat-input`. Use this method instead of the global\n`input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "goat-date-picker--blur",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input loses focus.",
          "docsTags": []
        },
        {
          "event": "goat-date-picker--change",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value has changed.",
          "docsTags": []
        },
        {
          "event": "goat-date-picker--focus",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has focus.",
          "docsTags": []
        },
        {
          "event": "goat-date-picker--input",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "Date Picker",
        "category": "Form Inputs",
        "description": "Captures date input.",
        "example": "<goat-date-picker value='true'></goat-date-picker>"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/divider",
      "filePath": "src/components/divider/divider.tsx",
      "fileName": "divider.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/divider/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/divider/usage",
      "tag": "goat-divider",
      "readme": "# goat-heading\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [
        "goat-header-brand"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "goat-header-brand": [
          "goat-divider"
        ]
      },
      "props": [
        {
          "name": "vertical",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "vertical",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [
        {
          "name": "--goat-divider-color",
          "annotation": "prop",
          "docs": "Color of the divider"
        },
        {
          "name": "--goat-divider-padding",
          "annotation": "prop",
          "docs": "Padding of the divider"
        }
      ],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "Divider",
        "description": "A divider can be used to segment content vertically or horizontally.",
        "category": "Layout",
        "example": "<goat-divider style=\"width: 12rem;\">or</goat-divider>"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/dropdown/dropdown",
      "filePath": "src/components/dropdown/dropdown/dropdown.tsx",
      "fileName": "dropdown.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/dropdown/dropdown/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/dropdown/dropdown/usage",
      "tag": "goat-dropdown",
      "readme": "# goat-dropdown\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If true, the user cannot interact with the button. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "managed",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "managed",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placements",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placements",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "'bottom-start,top-start,bottom-end,top-end'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trigger",
          "type": "\"click\" | \"hover\" | \"manual\"",
          "complexType": {
            "original": "'click' | 'hover' | 'manual'",
            "resolved": "\"click\" | \"hover\" | \"manual\"",
            "references": {}
          },
          "mutable": false,
          "attr": "trigger",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "'click'",
          "values": [
            {
              "value": "click",
              "type": "string"
            },
            {
              "value": "hover",
              "type": "string"
            },
            {
              "value": "manual",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "goat-dropdown--close",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the dropdown is closed.",
          "docsTags": []
        },
        {
          "event": "goat-dropdown--item-click",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "goat-dropdown--open",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the dropdown is opened.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [
        {
          "event": "resize",
          "target": "window",
          "capture": false,
          "passive": true
        },
        {
          "event": "click",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "metadata": {
        "name": "Dropdown",
        "description": "Enables native inputs to be used within a Form field.",
        "category": "Navigation",
        "subcategory": "Dropdown",
        "img": "/assets/img/dropdown.webp",
        "imgDark": "/assets/img/dropdown-dark.webp"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/dropdown/dropdown-menu",
      "filePath": "src/components/dropdown/dropdown-menu/dropdown-menu.tsx",
      "fileName": "dropdown-menu.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/dropdown/dropdown-menu/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/dropdown/dropdown-menu/usage",
      "tag": "goat-dropdown-menu",
      "readme": "# goat-dropdown\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [
        "goat-menu"
      ],
      "dependencyGraph": {
        "goat-dropdown-menu": [
          "goat-menu"
        ],
        "goat-menu": [
          "goat-empty-state"
        ],
        "goat-empty-state": [
          "goat-svg",
          "goat-button"
        ],
        "goat-button": [
          "goat-spinner",
          "goat-icon"
        ]
      },
      "props": [],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on first menu item. Use this method instead of the global\n`element.focus()`.",
          "docsTags": []
        }
      ],
      "events": [],
      "styles": [
        {
          "name": "--goat-dropdown-menu-max-height",
          "annotation": "prop",
          "docs": "Maximum height of the menu"
        }
      ],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "Dropdown Menu",
        "description": "The Dropdown Menu component is used to display a list of options.",
        "category": "Navigation",
        "subcategory": "Dropdown",
        "childComponent": "true"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/application/empty-state",
      "filePath": "src/components/application/empty-state/empty-state.tsx",
      "fileName": "empty-state.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/application/empty-state/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/application/empty-state/usage",
      "tag": "goat-empty-state",
      "readme": "# goat-heading\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [
        "goat-menu",
        "goat-sidenav-menu",
        "goat-table",
        "goat-tree-view"
      ],
      "dependencies": [
        "goat-svg",
        "goat-button"
      ],
      "dependencyGraph": {
        "goat-empty-state": [
          "goat-svg",
          "goat-button"
        ],
        "goat-button": [
          "goat-spinner",
          "goat-icon"
        ],
        "goat-menu": [
          "goat-empty-state"
        ],
        "goat-sidenav-menu": [
          "goat-empty-state"
        ],
        "goat-table": [
          "goat-empty-state"
        ],
        "goat-tree-view": [
          "goat-empty-state"
        ]
      },
      "props": [
        {
          "name": "action",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "action",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "actionDisabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "action-disabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "actionUrl",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "action-url",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "actionVariant",
          "type": "\"default\" | \"ghost\" | \"outline\"",
          "complexType": {
            "original": "'default' | 'outline' | 'ghost'",
            "resolved": "\"default\" | \"ghost\" | \"outline\"",
            "references": {}
          },
          "mutable": false,
          "attr": "action-variant",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "ghost",
              "type": "string"
            },
            {
              "value": "outline",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "description",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "description",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headline",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "headline",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "illustration",
          "type": "\"no-document\"",
          "complexType": {
            "original": "'no-document'",
            "resolved": "\"no-document\"",
            "references": {}
          },
          "mutable": false,
          "attr": "illustration",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "'no-document'",
          "values": [
            {
              "value": "no-document",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [
        {
          "event": "resize",
          "target": "window",
          "capture": false,
          "passive": true
        }
      ],
      "metadata": {
        "name": "Empty State",
        "description": "A message that displays when there is no information to display.",
        "category": "Data Display",
        "img": "/assets/img/empty-state.webp",
        "imgDark": "/assets/img/empty-state-dark.webp"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/application/flow-designer/flow-designer",
      "filePath": "src/components/application/flow-designer/flow-designer/flow-designer.tsx",
      "fileName": "flow-designer.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/application/flow-designer/flow-designer/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/application/flow-designer/flow-designer/usage",
      "tag": "goat-flow-designer",
      "readme": "# goat-flow-designer\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [
        "goat-canvas",
        "goat-icon",
        "goat-tag",
        "goat-button-group",
        "goat-button"
      ],
      "dependencyGraph": {
        "goat-flow-designer": [
          "goat-canvas",
          "goat-icon",
          "goat-tag",
          "goat-button-group",
          "goat-button"
        ],
        "goat-tag": [
          "goat-icon"
        ],
        "goat-button": [
          "goat-spinner",
          "goat-icon"
        ]
      },
      "props": [
        {
          "name": "blockSize",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "block-size",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "16",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "data",
          "type": "any[]",
          "complexType": {
            "original": "any[]",
            "resolved": "any[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [
        {
          "event": "mouseup",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "metadata": {
        "name": "Flow Designer",
        "category": "Up coming",
        "description": "Flow Designer is a component that allows users to create and edit flows.",
        "img": "/assets/img/flow-designer.webp"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/application/footer/footer",
      "filePath": "src/components/application/footer/footer/footer.tsx",
      "fileName": "footer.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/application/footer/footer/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/application/footer/footer/usage",
      "tag": "goat-footer",
      "readme": "# p4-top-navigation\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "variant",
          "type": "\"simple\"",
          "complexType": {
            "original": "'simple'",
            "resolved": "\"simple\"",
            "references": {}
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "'simple'",
          "values": [
            {
              "value": "simple",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "year",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "year",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "new Date().getFullYear()",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "Footer",
        "description": "The footer component provides a container for displaying additional navigation information about a site.",
        "overview": "<p>The footer is one of the most underestimated sections of a website being located at the very bottom of every page, however, it can be used as a way to try to convince users to stay on your website if they haven’t found the information they’ve been looking for inside the main content area.</p>",
        "category": "Navigation",
        "img": "/assets/img/footer.webp",
        "imgDark": "/assets/img/footer-dark.webp"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/application/footer/footer-copyright",
      "filePath": "src/components/application/footer/footer-copyright/footer-copyright.tsx",
      "fileName": "footer-copyright.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/application/footer/footer-copyright/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/application/footer/footer-copyright/usage",
      "tag": "goat-footer-copyright",
      "readme": "# p4-top-navigation\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [
        "goat-text",
        "goat-link"
      ],
      "dependencyGraph": {
        "goat-footer-copyright": [
          "goat-text",
          "goat-link"
        ]
      },
      "props": [
        {
          "name": "copyright",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "copyright",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "copyrightHref",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "copyright-href",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "year",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "year",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "new Date().getFullYear()",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {}
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/application/footer/footer-links",
      "filePath": "src/components/application/footer/footer-links/footer-links.tsx",
      "fileName": "footer-links.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/application/footer/footer-links/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/application/footer/footer-links/usage",
      "tag": "goat-footer-links",
      "readme": "# p4-top-navigation\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [
        "goat-link"
      ],
      "dependencyGraph": {
        "goat-footer-links": [
          "goat-link"
        ]
      },
      "props": [
        {
          "name": "links",
          "type": "{ name: string; href: string; }[]",
          "complexType": {
            "original": "{ name: string; href: string }[]",
            "resolved": "{ name: string; href: string; }[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "{ name: string; href: string; }[]"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {}
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/input-controls/form-control",
      "filePath": "src/components/input-controls/form-control/form-control.tsx",
      "fileName": "form-control.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/input-controls/form-control/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/input-controls/form-control/usage",
      "tag": "goat-form-control",
      "readme": "# goat-field-group\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "helperText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "helper-text",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "inline",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalidText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid-text",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Whether the form control is required.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "skeleton",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "skeleton",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "warn",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "warn",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "warnText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "warn-text",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "Form Control",
        "description": "The Form Control component adds a label and caption for its child control.",
        "category": "Form Inputs",
        "tags": [
          "form"
        ],
        "example": "<goat-form-control label='Full Name' required>\n<goat-input type='text'></goat-input>\n</goat-form-control>"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/application/header/header",
      "filePath": "src/components/application/header/header/header.tsx",
      "fileName": "header.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/application/header/header/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/application/header/header/usage",
      "tag": "goat-header",
      "readme": "# p4-top-navigation\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "color",
          "type": "string",
          "complexType": {
            "original": "| 'primary'\n    | 'secondary'\n    | 'success'\n    | 'danger'\n    | 'warning'\n    | 'white'\n    | 'black'\n    | string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Defines the primary color of the header. This can be set to predefined color names to apply specific color themes.",
          "docsTags": [],
          "default": "'black'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "darkModeColor",
          "type": "string",
          "complexType": {
            "original": "| 'primary'\n    | 'secondary'\n    | 'success'\n    | 'danger'\n    | 'warning'\n    | 'white'\n    | 'black'\n    | string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "dark-mode-color",
          "reflectToAttr": false,
          "docs": "Color variant for dark mode, applicable when [data-theme=\"dark\"] is set.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "float",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "float",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [
        {
          "name": "--goat-header-height",
          "annotation": "prop",
          "docs": "Height of the header. Defaults to 3rem."
        },
        {
          "name": "--goat-header-width",
          "annotation": "prop",
          "docs": "Width of the header. Defaults to 100%."
        }
      ],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "Header",
        "description": "Header component is used to display a header with a brand, navigation, and actions.",
        "category": "Navigation",
        "img": "/assets/img/header.webp",
        "imgDark": "/assets/img/header-dark.webp"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/application/header/header-action",
      "filePath": "src/components/application/header/header-action/header-action.tsx",
      "fileName": "header-action.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/application/header/header-action/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/application/header/header-action/usage",
      "tag": "goat-header-action",
      "readme": "# p4-top-navigation\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [
        "goat-button"
      ],
      "dependencyGraph": {
        "goat-header-action": [
          "goat-button"
        ],
        "goat-button": [
          "goat-spinner",
          "goat-icon"
        ]
      },
      "props": [
        {
          "name": "badge",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "badge",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'_self'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "configAria",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "config-aria",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "{}",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": true,
          "docs": "Hyperlink to navigate to on click.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Icon which will displayed on button.\nPossible values are icon names.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": false,
          "docs": "Button selection state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"lg\" | \"md\" | \"none\" | \"sm\" | \"xl\" | \"xxl\"",
          "complexType": {
            "original": "'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'none'",
            "resolved": "\"lg\" | \"md\" | \"none\" | \"sm\" | \"xl\" | \"xxl\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Button size.\nPossible values are `\"sm\"`, `\"md\"`, `\"lg\"`, `\"xl\"`, `\"xxl\"`, `\"none\"`. Defaults to `\"md\"`.",
          "docsTags": [],
          "default": "'md'",
          "values": [
            {
              "value": "lg",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "sm",
              "type": "string"
            },
            {
              "value": "xl",
              "type": "string"
            },
            {
              "value": "xxl",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "Sets or retrieves the window or frame at which to target content.",
          "docsTags": [],
          "default": "'_self'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setColor",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(color: string) => Promise<void>",
            "parameters": [
              {
                "name": "color",
                "type": "string",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setColor(color: string) => Promise<void>",
          "parameters": [
            {
              "name": "color",
              "type": "string",
              "docs": ""
            }
          ],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {}
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/application/header/header-brand",
      "filePath": "src/components/application/header/header-brand/header-brand.tsx",
      "fileName": "header-brand.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/application/header/header-brand/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/application/header/header-brand/usage",
      "tag": "goat-header-brand",
      "readme": "# p4-top-navigation\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [
        "goat-button",
        "goat-svg",
        "goat-divider"
      ],
      "dependencyGraph": {
        "goat-header-brand": [
          "goat-button",
          "goat-svg",
          "goat-divider"
        ],
        "goat-button": [
          "goat-spinner",
          "goat-icon"
        ]
      },
      "props": [
        {
          "name": "href",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'#'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "logo",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "logo",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "subTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "sub-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setColor",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(color: string) => Promise<void>",
            "parameters": [
              {
                "name": "color",
                "type": "string",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setColor(color: string) => Promise<void>",
          "parameters": [
            {
              "name": "color",
              "type": "string",
              "docs": ""
            }
          ],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {}
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/input-controls/html-editor",
      "filePath": "src/components/input-controls/html-editor/html-editor.tsx",
      "fileName": "html-editor.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/input-controls/html-editor/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/input-controls/html-editor/usage",
      "tag": "goat-html-editor",
      "readme": "# goat-code-editor\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [
        "goat-button",
        "goat-spinner",
        "goat-code-editor",
        "goat-toggle",
        "goat-menu",
        "goat-menu-item"
      ],
      "dependencyGraph": {
        "goat-html-editor": [
          "goat-button",
          "goat-spinner",
          "goat-code-editor",
          "goat-toggle",
          "goat-menu",
          "goat-menu-item"
        ],
        "goat-button": [
          "goat-spinner",
          "goat-icon"
        ],
        "goat-code-editor": [
          "goat-tag",
          "goat-spinner"
        ],
        "goat-tag": [
          "goat-icon"
        ],
        "goat-menu": [
          "goat-empty-state"
        ],
        "goat-empty-state": [
          "goat-svg",
          "goat-button"
        ],
        "goat-menu-item": [
          "goat-icon"
        ]
      },
      "props": [
        {
          "name": "debounce",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "Set the amount of time, in milliseconds, to wait to trigger the `onChange` event after each keystroke.",
          "docsTags": [],
          "default": "250",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "If true, the user cannot interact with the button. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layer",
          "type": "\"01\" | \"02\" | \"background\"",
          "complexType": {
            "original": "'background' | '01' | '02'",
            "resolved": "\"01\" | \"02\" | \"background\"",
            "references": {}
          },
          "mutable": false,
          "attr": "layer",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "01",
              "type": "string"
            },
            {
              "value": "02",
              "type": "string"
            },
            {
              "value": "background",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "lineNumbers",
          "type": "\"off\" | \"on\"",
          "complexType": {
            "original": "'off' | 'on'",
            "resolved": "\"off\" | \"on\"",
            "references": {}
          },
          "mutable": false,
          "attr": "line-numbers",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'on'",
          "values": [
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "on",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mentions",
          "type": "{ label: string; value: string; }[]",
          "complexType": {
            "original": "{ label: string; value: string }[]",
            "resolved": "{ label: string; value: string; }[]",
            "references": {}
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "{ label: string; value: string; }[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "mentionsSearch",
          "type": "\"contains\" | \"managed\"",
          "complexType": {
            "original": "'contains' | 'managed'",
            "resolved": "\"contains\" | \"managed\"",
            "references": {}
          },
          "mutable": false,
          "attr": "mentions-search",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'contains'",
          "values": [
            {
              "value": "contains",
              "type": "string"
            },
            {
              "value": "managed",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The input field name.",
          "docsTags": [],
          "default": "`goat-input-${this.gid}`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "The input field placeholder.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "If true, required icon is show. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showSuggestionCharacter",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-suggestion-character",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showToolbar",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-toolbar",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "suggestionCharacter",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "suggestion-character",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "'@'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "theme",
          "type": "\"vs-dark\" | \"vs-light\"",
          "complexType": {
            "original": "'vs-light' | 'vs-dark'",
            "resolved": "\"vs-dark\" | \"vs-light\"",
            "references": {}
          },
          "mutable": false,
          "attr": "theme",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'vs-light'",
          "values": [
            {
              "value": "vs-dark",
              "type": "string"
            },
            {
              "value": "vs-light",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The input field value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getComponentId",
          "returns": {
            "type": "Promise<string>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<string>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<string>"
          },
          "signature": "getComponentId() => Promise<string>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "setBlur",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setBlur() => Promise<void>",
          "parameters": [],
          "docs": "Sets blur on the native `input` in `goat-input`. Use this method instead of the global\n`input.blur()`.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the native `input` in `goat-input`. Use this method instead of the global\n`input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "goat-html-editor--change",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value has changed..",
          "docsTags": []
        },
        {
          "event": "goat-html-editor--search",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "HTML Editor",
        "description": "HTML Editor component is a WYSIWYG editor that allows users to edit HTML content.",
        "category": "Up coming",
        "tags": [
          "input",
          " form"
        ],
        "img": "/assets/img/html-editor.webp",
        "imgDark": "/assets/img/html-editor-dark.webp"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/icon",
      "filePath": "src/components/icon/icon.tsx",
      "fileName": "icon.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/icon/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/icon/usage",
      "tag": "goat-icon",
      "readme": "# goat-icon\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [
        "goat-accordion-item",
        "goat-button",
        "goat-flow-designer",
        "goat-menu-item",
        "goat-notification",
        "goat-progress",
        "goat-select",
        "goat-tab",
        "goat-tag",
        "goat-tree-node"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "goat-accordion-item": [
          "goat-icon"
        ],
        "goat-button": [
          "goat-icon"
        ],
        "goat-flow-designer": [
          "goat-icon"
        ],
        "goat-menu-item": [
          "goat-icon"
        ],
        "goat-notification": [
          "goat-icon"
        ],
        "goat-progress": [
          "goat-icon"
        ],
        "goat-select": [
          "goat-icon"
        ],
        "goat-tab": [
          "goat-icon"
        ],
        "goat-tag": [
          "goat-icon"
        ],
        "goat-tree-node": [
          "goat-icon"
        ]
      },
      "props": [
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "The identifier for the icon.\nThis name corresponds to a specific SVG asset in the icon set.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The size of the icon.\nThis can be specified in pixels (px) or rem units to control the icon's dimensions.\nIf a number is provided, it will be treated as rem units. For example, '16px', '2rem', or 2 would be valid values.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [
        {
          "name": "--goat-icon-size - The size of the icon (height and width)",
          "annotation": "prop",
          "docs": ""
        }
      ],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "Icon",
        "description": "Icons are visual symbols used to represent ideas, objects, or actions.",
        "overview": "Icons are visual symbols used to represent ideas, objects, or actions. They communicate messages at a glance, afford interactivity, and draw attention to important information.",
        "category": "General",
        "example": "<goat-icon name=\"home\" size=\"2rem\"></goat-icon>"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/image",
      "filePath": "src/components/image/image.tsx",
      "fileName": "image.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/image/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/image/usage",
      "tag": "goat-image",
      "readme": "# goat-icon\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "darkSrc",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "dark-src",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "imageTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "image-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "src",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "src",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {}
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/input-controls/input/input",
      "filePath": "src/components/input-controls/input/input/input.tsx",
      "fileName": "input.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/input-controls/input/input/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/input-controls/input/input/usage",
      "tag": "goat-input",
      "readme": "# goat-input\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [
        "goat-condition-builder"
      ],
      "dependencies": [
        "goat-tooltip",
        "goat-button"
      ],
      "dependencyGraph": {
        "goat-input": [
          "goat-tooltip",
          "goat-button"
        ],
        "goat-tooltip": [
          "goat-popover",
          "goat-popover-content"
        ],
        "goat-button": [
          "goat-spinner",
          "goat-icon"
        ],
        "goat-condition-builder": [
          "goat-input"
        ]
      },
      "props": [
        {
          "name": "autocomplete",
          "type": "\"off\" | \"on\"",
          "complexType": {
            "original": "'on' | 'off'",
            "resolved": "\"off\" | \"on\"",
            "references": {}
          },
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "Indicates whether the value of the control can be automatically completed by the browser.",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "on",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "configAria",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "config-aria",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "{}",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "debounce",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "Set the amount of time, in milliseconds, to wait to trigger the `goatChange` event after each keystroke.",
          "docsTags": [],
          "default": "300",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "If true, the user cannot interact with the button. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helperText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "helper-text",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "inline",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalidText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid-text",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The input field name.",
          "docsTags": [],
          "default": "`goat-input-${this.gid}`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "The input field placeholder.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": true,
          "docs": "If true, the user read the value cannot modify it. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "If true, required icon is show. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"lg\" | \"md\" | \"sm\"",
          "complexType": {
            "original": "'sm' | 'md' | 'lg'",
            "resolved": "\"lg\" | \"md\" | \"sm\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "The input field size.\nPossible values are: `\"sm\"`, `\"md\"`, `\"lg\"`. Defaults to `\"md\"`.",
          "docsTags": [],
          "default": "'md'",
          "values": [
            {
              "value": "lg",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            },
            {
              "value": "sm",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "skeleton",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "skeleton",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"email\" | \"password\" | \"tel\" | \"text\"",
          "complexType": {
            "original": "'text' | 'password' | 'email' | 'tel'",
            "resolved": "\"email\" | \"password\" | \"tel\" | \"text\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "The type of control to display.\nPossible values are: `\"text\"`, `\"password\"`, `\"email\"`, `\"tel\"`. Defaults to `\"text\"`.",
          "docsTags": [],
          "default": "'text'",
          "values": [
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "password",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The input field value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "warn",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "warn",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "warnText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "warn-text",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getComponentId",
          "returns": {
            "type": "Promise<string>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<string>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<string>"
          },
          "signature": "getComponentId() => Promise<string>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "setBlur",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setBlur() => Promise<void>",
          "parameters": [],
          "docs": "Sets blur on the native `input` in `goat-input`. Use this method instead of the global\n`input.blur()`.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the native `input` in `goat-input`. Use this method instead of the global\n`input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "goat-input--blur",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input loses focus.",
          "docsTags": []
        },
        {
          "event": "goat-input--change",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value has changed.",
          "docsTags": []
        },
        {
          "event": "goat-input--focus",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has focus.",
          "docsTags": []
        },
        {
          "event": "goat-input--input",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "Input",
        "description": "Enables native inputs to be used within a Form field.",
        "category": "Form Inputs",
        "tags": [
          "input",
          " form"
        ],
        "example": "<goat-input placeholder=\"Enter your name\"></goat-input>"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/link",
      "filePath": "src/components/link/link.tsx",
      "fileName": "link.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/link/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/link/usage",
      "tag": "goat-link",
      "readme": "# goat-button\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [
        "goat-breadcrumb-item",
        "goat-footer-copyright",
        "goat-footer-links"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "goat-breadcrumb-item": [
          "goat-link"
        ],
        "goat-footer-copyright": [
          "goat-link"
        ],
        "goat-footer-links": [
          "goat-link"
        ]
      },
      "props": [
        {
          "name": "href",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": true,
          "docs": "Hyperlink to navigate to on click.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "Sets or retrieves the window or frame at which to target content.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "triggerClick",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "triggerClick() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [
        {
          "event": "mouseup",
          "target": "window",
          "capture": false,
          "passive": true
        },
        {
          "event": "keyup",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "metadata": {
        "name": "Link",
        "description": "Links allow users to click their way from page to page.",
        "category": "Navigation",
        "example": "<goat-link href=\"#\">Link</goat-link>"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/menu/menu",
      "filePath": "src/components/menu/menu/menu.tsx",
      "fileName": "menu.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/menu/menu/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/menu/menu/usage",
      "tag": "goat-menu",
      "readme": "# goat-menu\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [
        "goat-dropdown-menu",
        "goat-html-editor",
        "goat-select"
      ],
      "dependencies": [
        "goat-empty-state"
      ],
      "dependencyGraph": {
        "goat-menu": [
          "goat-empty-state"
        ],
        "goat-empty-state": [
          "goat-svg",
          "goat-button"
        ],
        "goat-button": [
          "goat-spinner",
          "goat-icon"
        ],
        "goat-dropdown-menu": [
          "goat-menu"
        ],
        "goat-html-editor": [
          "goat-menu"
        ],
        "goat-select": [
          "goat-menu"
        ]
      },
      "props": [
        {
          "name": "empty",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "empty",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "emptyStateDescription",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "empty-state-description",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'There are no items to display'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "emptyStateHeadline",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "empty-state-headline",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'No items'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layer",
          "type": "\"01\" | \"02\" | \"background\"",
          "complexType": {
            "original": "'background' | '01' | '02'",
            "resolved": "\"01\" | \"02\" | \"background\"",
            "references": {}
          },
          "mutable": false,
          "attr": "layer",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "01",
              "type": "string"
            },
            {
              "value": "02",
              "type": "string"
            },
            {
              "value": "background",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "showLoader",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-loader",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"lg\" | \"md\" | \"sm\"",
          "complexType": {
            "original": "'sm' | 'md' | 'lg'",
            "resolved": "\"lg\" | \"md\" | \"sm\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "The menu item size.\nPossible values are: `\"sm\"`, `\"md\"`, `\"lg\"`. Defaults to `\"md\"`.",
          "docsTags": [],
          "default": "'md'",
          "values": [
            {
              "value": "lg",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            },
            {
              "value": "sm",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number | string",
          "complexType": {
            "original": "string | number",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on first menu item. Use this method instead of the global\n`element.focus()`.",
          "docsTags": []
        }
      ],
      "events": [],
      "styles": [
        {
          "name": "--goat-menu-background",
          "annotation": "prop",
          "docs": "Background color of the menu"
        },
        {
          "name": "--goat-menu-max-height",
          "annotation": "prop",
          "docs": "Maximum height of the menu"
        },
        {
          "name": "--goat-menu-shadow",
          "annotation": "prop",
          "docs": "Shadow of the menu"
        }
      ],
      "slots": [],
      "parts": [],
      "listeners": [
        {
          "event": "keydown",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "metadata": {
        "name": "Menu",
        "description": "Menus display a list of choices on temporary surfaces.",
        "category": "Navigation",
        "subcategory": "Menu",
        "img": "/assets/img/menu.webp",
        "imgDark": "/assets/img/menu-dark.webp"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/menu/menu-divider",
      "filePath": "src/components/menu/menu-divider/menu-divider.tsx",
      "fileName": "menu-divider.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/menu/menu-divider/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/menu/menu-divider/usage",
      "tag": "goat-menu-divider",
      "readme": "# goat-heading\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "MenuDivider",
        "description": "A divider to separate menu items.",
        "category": "Layout",
        "subcategory": "Menu",
        "childComponents": "true",
        "example": "<goat-divider style=\"width: 12rem;\">or</goat-divider>"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/menu/menu-item",
      "filePath": "src/components/menu/menu-item/menu-item.tsx",
      "fileName": "menu-item.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/menu/menu-item/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/menu/menu-item/usage",
      "tag": "goat-menu-item",
      "readme": "# goat-menu-item\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [
        "goat-html-editor",
        "goat-select"
      ],
      "dependencies": [
        "goat-icon"
      ],
      "dependencyGraph": {
        "goat-menu-item": [
          "goat-icon"
        ],
        "goat-html-editor": [
          "goat-menu-item"
        ],
        "goat-select": [
          "goat-menu-item"
        ]
      },
      "props": [
        {
          "name": "color",
          "type": "\"black\" | \"danger\" | \"default\" | \"primary\" | \"secondary\" | \"success\" | \"warning\" | \"white\"",
          "complexType": {
            "original": "| 'default'\n    | 'primary'\n    | 'secondary'\n    | 'success'\n    | 'danger'\n    | 'warning'\n    | 'white'\n    | 'black'",
            "resolved": "\"black\" | \"danger\" | \"default\" | \"primary\" | \"secondary\" | \"success\" | \"warning\" | \"white\"",
            "references": {}
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "value": "black",
              "type": "string"
            },
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "value": "white",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "If true, the user cannot interact with the button. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": true,
          "docs": "Hyperlink to navigate to on click.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layer",
          "type": "\"01\" | \"02\" | \"background\"",
          "complexType": {
            "original": "'background' | '01' | '02'",
            "resolved": "\"01\" | \"02\" | \"background\"",
            "references": {}
          },
          "mutable": false,
          "attr": "layer",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "01",
              "type": "string"
            },
            {
              "value": "02",
              "type": "string"
            },
            {
              "value": "background",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "selectable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selectable",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "Menu item selection state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "Sets or retrieves the window or frame at which to target content.",
          "docsTags": [],
          "default": "'_self'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number | string",
          "complexType": {
            "original": "string | number | null",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The menu item value.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setBlur",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setBlur() => Promise<void>",
          "parameters": [],
          "docs": "Sets blur on the native `input` in `goat-input`. Use this method instead of the global\n`input.blur()`.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the native `input` in `goat-input`. Use this method instead of the global\n`input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "goat-menu-item--click",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the menu item is clicked.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [
        {
          "event": "mouseup",
          "target": "window",
          "capture": false,
          "passive": true
        },
        {
          "event": "keyup",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "metadata": {
        "name": "Menu Item",
        "description": "Menu items display a list of choices on temporary surfaces.",
        "category": "Navigation",
        "subcategory": "Menu",
        "childComponent": "true"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/modal/modal",
      "filePath": "src/components/modal/modal/modal.tsx",
      "fileName": "modal.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/modal/modal/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/modal/modal/usage",
      "tag": "goat-modal",
      "readme": "# p4-modal\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [
        "goat-text",
        "goat-button",
        "goat-spinner"
      ],
      "dependencyGraph": {
        "goat-modal": [
          "goat-text",
          "goat-button",
          "goat-spinner"
        ],
        "goat-button": [
          "goat-spinner",
          "goat-icon"
        ]
      },
      "props": [
        {
          "name": "heading",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideClose",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-close",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "managed",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "managed",
          "reflectToAttr": false,
          "docs": "Specify whether the Modal is managed by the parent component",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "Specify whether the Modal is currently open",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showLoader",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-loader",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"lg\" | \"md\" | \"sm\"",
          "complexType": {
            "original": "'sm' | 'md' | 'lg'",
            "resolved": "\"lg\" | \"md\" | \"sm\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "'md'",
          "values": [
            {
              "value": "lg",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            },
            {
              "value": "sm",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "subheading",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "subheading",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "goat-modal--close",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "On click of button, a CustomEvent 'goat-modal--close' will be triggered.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "Modal",
        "description": "Modals are used to display content in a layer above the app.",
        "category": "Informational",
        "subcategory": "Modal",
        "tags": [
          "controls"
        ],
        "img": "/assets/img/modal.webp",
        "imgDark": "/assets/img/modal-dark.webp"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/modal/modal-content",
      "filePath": "src/components/modal/modal-content/modal-content.tsx",
      "fileName": "modal-content.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/modal/modal-content/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/modal/modal-content/usage",
      "tag": "goat-modal-content",
      "readme": "# p4-modal\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "type",
          "type": "\"borderless\" | \"default\" | \"text\"",
          "complexType": {
            "original": "'text' | 'borderless' | 'default'",
            "resolved": "\"borderless\" | \"default\" | \"text\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "value": "borderless",
              "type": "string"
            },
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "Modal Content",
        "description": "The Modal Content component is used to display the content within a modal.",
        "category": "Informational",
        "subcategory": "Modal",
        "childComponent": "true"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/notification",
      "filePath": "src/components/notification/notification.tsx",
      "fileName": "notification.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/notification/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/notification/usage",
      "tag": "goat-notification",
      "readme": "# goat-alert\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [
        "goat-notification-manager"
      ],
      "dependencies": [
        "goat-icon",
        "goat-button"
      ],
      "dependencyGraph": {
        "goat-notification": [
          "goat-icon",
          "goat-button"
        ],
        "goat-button": [
          "goat-spinner",
          "goat-icon"
        ],
        "goat-notification-manager": [
          "goat-notification"
        ]
      },
      "props": [
        {
          "name": "action",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "action",
          "reflectToAttr": false,
          "docs": "Action to be displayed on the notification",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dismissible",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "dismissible",
          "reflectToAttr": false,
          "docs": "Whether the notification is dismissible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "highContrast",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "high-contrast",
          "reflectToAttr": false,
          "docs": "Whether to use high contrast mode",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "inline",
          "reflectToAttr": true,
          "docs": "Whether the notification should be displayed inline",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "managed",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "managed",
          "reflectToAttr": false,
          "docs": "Whether the notification is managed by the notification manager",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "\"error\" | \"info\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "'success' | 'error' | 'info' | 'warning'",
            "resolved": "\"error\" | \"info\" | \"success\" | \"warning\"",
            "references": {}
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": true,
          "docs": "The state of the notification.\nPossible values are: 'success', 'error', 'info', 'warning'",
          "docsTags": [],
          "default": "'info'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "goat-notification--action-click",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "goat-notification--dismiss",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the notification is dismissed",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "Notification",
        "description": "Notifications are messages that communicate information to the user.",
        "category": "Informational",
        "tags": [
          "notification"
        ],
        "example": "<goat-notification state=\"success\">\n     <div slot='title'>Successful saved the record</div>\n   </goat-notification>"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/notification-manager",
      "filePath": "src/components/notification-manager/notification-manager.tsx",
      "fileName": "notification-manager.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/notification-manager/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/notification-manager/usage",
      "tag": "goat-notification-manager",
      "readme": "# goat-alert\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [
        "goat-notification"
      ],
      "dependencyGraph": {
        "goat-notification-manager": [
          "goat-notification"
        ],
        "goat-notification": [
          "goat-icon",
          "goat-button"
        ],
        "goat-button": [
          "goat-spinner",
          "goat-icon"
        ]
      },
      "props": [
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "'global'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "position",
          "type": "\"bottom-left\" | \"bottom-right\" | \"top-left\" | \"top-right\"",
          "complexType": {
            "original": "| 'top-right'\n    | 'top-left'\n    | 'bottom-right'\n    | 'bottom-left'",
            "resolved": "\"bottom-left\" | \"bottom-right\" | \"top-left\" | \"top-right\"",
            "references": {}
          },
          "mutable": false,
          "attr": "position",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "'bottom-right'",
          "values": [
            {
              "value": "bottom-left",
              "type": "string"
            },
            {
              "value": "bottom-right",
              "type": "string"
            },
            {
              "value": "top-left",
              "type": "string"
            },
            {
              "value": "top-right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [
        {
          "event": "goat-notification",
          "target": "window",
          "capture": false,
          "passive": false
        },
        {
          "event": "goat-notification-dismiss",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "metadata": {
        "name": "Notification Manager",
        "description": "The Notification Manager handles the organization and display of notifications within the application.",
        "category": "Informational",
        "tags": [
          "notification"
        ],
        "img": "/assets/img/notification-manager.webp",
        "imgDark": "/assets/img/notification-manager-dark.webp"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/input-controls/input/number",
      "filePath": "src/components/input-controls/input/number/number.tsx",
      "fileName": "number.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/input-controls/input/number/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/input-controls/input/number/usage",
      "tag": "goat-number",
      "readme": "# goat-input\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [
        "goat-slider"
      ],
      "dependencies": [
        "goat-button"
      ],
      "dependencyGraph": {
        "goat-number": [
          "goat-button"
        ],
        "goat-button": [
          "goat-spinner",
          "goat-icon"
        ],
        "goat-slider": [
          "goat-number"
        ]
      },
      "props": [
        {
          "name": "autocomplete",
          "type": "\"off\" | \"on\"",
          "complexType": {
            "original": "'on' | 'off'",
            "resolved": "\"off\" | \"on\"",
            "references": {}
          },
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "Indicates whether the value of the control can be automatically completed by the browser.",
          "docsTags": [],
          "default": "'off'",
          "values": [
            {
              "value": "off",
              "type": "string"
            },
            {
              "value": "on",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "configAria",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "config-aria",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "{}",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "debounce",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "Set the amount of time, in milliseconds, to wait to trigger the `goatChange` event after each keystroke.",
          "docsTags": [],
          "default": "300",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "If true, the user cannot interact with the button. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helperText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "helper-text",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideActions",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-actions",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "inline",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalidText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid-text",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The input field name.",
          "docsTags": [],
          "default": "`goat-input-${this.gid}`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "The input field placeholder.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": true,
          "docs": "If true, the user read the value cannot modify it. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "If true, required icon is show. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"lg\" | \"md\" | \"sm\"",
          "complexType": {
            "original": "'sm' | 'md' | 'lg'",
            "resolved": "\"lg\" | \"md\" | \"sm\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "The input field size.\nPossible values are: `\"sm\"`, `\"md\"`, `\"lg\"`. Defaults to `\"md\"`.",
          "docsTags": [],
          "default": "'md'",
          "values": [
            {
              "value": "lg",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            },
            {
              "value": "sm",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "skeleton",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "skeleton",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "\"default\" | \"error\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "'success' | 'error' | 'warning' | 'default'",
            "resolved": "\"default\" | \"error\" | \"success\" | \"warning\"",
            "references": {}
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": true,
          "docs": "The input state.\nPossible values are: `\"success\"`, `\"error\"`, `\"warning\"`, 'default'. Defaults to `\"default\"`.",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "complexType": {
            "original": "number | null",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The input field value.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "warn",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "warn",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "warnText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "warn-text",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getComponentId",
          "returns": {
            "type": "Promise<string>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<string>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<string>"
          },
          "signature": "getComponentId() => Promise<string>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "setBlur",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setBlur() => Promise<void>",
          "parameters": [],
          "docs": "Sets blur on the native `input` in `goat-input`. Use this method instead of the global\n`input.blur()`.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the native `input` in `goat-input`. Use this method instead of the global\n`input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "goat-number--blur",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input loses focus.",
          "docsTags": []
        },
        {
          "event": "goat-number--change",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value has changed.",
          "docsTags": []
        },
        {
          "event": "goat-number--focus",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has focus.",
          "docsTags": []
        },
        {
          "event": "goat-number--input",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "Number",
        "description": "Number input lets users enter a numeric value and incrementally increase or decrease the value with a two-segment control.",
        "category": "Form Inputs",
        "tags": [
          "input",
          " form"
        ],
        "example": "<goat-number value=\"100\"></goat-input>"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/popover/popover",
      "filePath": "src/components/popover/popover/popover.tsx",
      "fileName": "popover.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/popover/popover/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/popover/popover/usage",
      "tag": "goat-popover",
      "readme": "# goat-dropdown\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [
        "goat-tooltip"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "goat-tooltip": [
          "goat-popover"
        ]
      },
      "props": [
        {
          "name": "dismissTimeout",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "dismiss-timeout",
          "reflectToAttr": false,
          "docs": "Time in milliseconds to wait before hiding the popover when the trigger is set to `\"hover\"`.",
          "docsTags": [],
          "default": "300",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "offset",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "offset",
          "reflectToAttr": false,
          "docs": "The offset of the popover relative to the trigger element.\nThis value is used to adjust the position of the popover along the axis of the trigger element.",
          "docsTags": [],
          "default": "4",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "Determines whether the popover is open.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "openTimeout",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "open-timeout",
          "reflectToAttr": false,
          "docs": "Time in milliseconds to wait before showing the popover when the trigger is set to `\"hover\"`.",
          "docsTags": [],
          "default": "200",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placements",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "placements",
          "reflectToAttr": false,
          "docs": "The placement of the popover relative to the trigger element.\nPossible values are:\n- `\"top\"`: The popover is placed above the trigger element.\n- `\"top-start\"`: The popover is placed above the trigger element, aligned to the start.\n- `\"top-end\"`: The popover is placed above the trigger element, aligned to the end.\n- `\"right\"`: The popover is placed to the right of the trigger element.\n- `\"right-start\"`: The popover is placed to the right of the trigger element, aligned to the start.\n- `\"right-end\"`: The popover is placed to the right of the trigger element, aligned to the end.\n- `\"bottom\"`: The popover is placed below the trigger element.\n- `\"bottom-start\"`: The popover is placed below the trigger element, aligned to the start.\n- `\"bottom-end\"`: The popover is placed below the trigger element, aligned to the end.\n- `\"left\"`: The popover is placed to the left of the trigger element.\n- `\"left-start\"`: The popover is placed to the left of the trigger element, aligned to the start.\n- `\"left-end\"`: The popover is placed to the left of the trigger element, aligned to the end.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tip",
          "type": "\"caret\" | \"none\" | \"tab\"",
          "complexType": {
            "original": "'caret' | 'tab' | 'none'",
            "resolved": "\"caret\" | \"none\" | \"tab\"",
            "references": {}
          },
          "mutable": false,
          "attr": "tip",
          "reflectToAttr": true,
          "docs": "The tip of the popover.\nPossible values are:\n- `\"caret\"`: A triangle tip.\n- `\"tab\"`: A tab tip.\n- `\"none\"`: No tip.",
          "docsTags": [],
          "default": "'caret'",
          "values": [
            {
              "value": "caret",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "tab",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trigger",
          "type": "\"click\" | \"hover\" | \"manual\"",
          "complexType": {
            "original": "'click' | 'hover' | 'manual'",
            "resolved": "\"click\" | \"hover\" | \"manual\"",
            "references": {}
          },
          "mutable": false,
          "attr": "trigger",
          "reflectToAttr": false,
          "docs": "Determines how the popover is triggered.\nPossible values are:\n- `\"click\"`: The popover is shown or hidden when the trigger element is clicked.\n- `\"hover\"`: The popover is shown when the mouse hovers over the trigger element and hidden when it leaves.\n- `\"manual\"`: The visibility of the popover must be manually controlled through the `open` property.",
          "docsTags": [],
          "default": "'hover'",
          "values": [
            {
              "value": "click",
              "type": "string"
            },
            {
              "value": "hover",
              "type": "string"
            },
            {
              "value": "manual",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "hide",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "hide() => Promise<void>",
          "parameters": [],
          "docs": "Hides the popover. This method is useful when the trigger is set to `\"manual\"`.",
          "docsTags": []
        },
        {
          "name": "show",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(target?: HTMLElement) => Promise<void>",
            "parameters": [
              {
                "name": "target",
                "type": "HTMLElement",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLElement": {
                "location": "global",
                "id": "global::HTMLElement"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "show(target?: HTMLElement) => Promise<void>",
          "parameters": [
            {
              "name": "target",
              "type": "HTMLElement",
              "docs": ""
            }
          ],
          "docs": "Shows the popover.\nThis method is particularly useful when the trigger mode is set to `\"manual\"`.\nIt allows for programmatic control over the visibility of the popover, making it visible regardless of the trigger mode.\nOptionally, a target HTMLElement can be provided to dynamically set the trigger element for the popover.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "goat-popover--close",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the popover is closed.",
          "docsTags": []
        },
        {
          "event": "goat-popover--open",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the popover is opened.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [
        {
          "event": "resize",
          "target": "window",
          "capture": false,
          "passive": true
        },
        {
          "event": "click",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "metadata": {
        "name": "Popover",
        "description": "The Popover component is used to display additional information.",
        "category": "Informational",
        "subcategory": "Popover",
        "img": "/assets/img/dropdown.webp",
        "imgDark": "/assets/img/dropdown-dark.webp"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/popover/popover-content",
      "filePath": "src/components/popover/popover-content/popover-content.tsx",
      "fileName": "popover-content.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/popover/popover-content/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/popover/popover-content/usage",
      "tag": "goat-popover-content",
      "readme": "# goat-dropdown\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [
        "goat-tooltip"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "goat-tooltip": [
          "goat-popover-content"
        ]
      },
      "props": [],
      "methods": [],
      "events": [],
      "styles": [
        {
          "name": "--goat-menu-shadow",
          "annotation": "prop",
          "docs": "Shadow of popover content"
        },
        {
          "name": "--popover-content-background",
          "annotation": "prop",
          "docs": "Background color of the popover content"
        },
        {
          "name": "--popover-content-border-radius",
          "annotation": "prop",
          "docs": "Border radius of the popover content"
        },
        {
          "name": "--popover-padding",
          "annotation": "prop",
          "docs": "Padding of the popover content"
        }
      ],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "Popover Content",
        "description": "The PopoverContent component is used to display additional information.",
        "category": "Informational",
        "subcategory": "Popover",
        "childComponent": "true"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/progress",
      "filePath": "src/components/progress/progress.tsx",
      "fileName": "progress.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/progress/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/progress/usage",
      "tag": "goat-progress",
      "readme": "# goat-spinner\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [
        "goat-icon"
      ],
      "dependencyGraph": {
        "goat-progress": [
          "goat-icon"
        ]
      },
      "props": [
        {
          "name": "helperText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "helper-text",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideLabel",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "A label describing the progress bar.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"md\" | \"sm\"",
          "complexType": {
            "original": "'sm' | 'md'",
            "resolved": "\"md\" | \"sm\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "\nPossible values are: `\"sm\"` and `\"md\"` in pixel. Defaults to `\"md\"`.",
          "docsTags": [],
          "default": "'md'",
          "values": [
            {
              "value": "md",
              "type": "string"
            },
            {
              "value": "sm",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "status",
          "type": "\"active\" | \"error\" | \"success\"",
          "complexType": {
            "original": "'active' | 'success' | 'error'",
            "resolved": "\"active\" | \"error\" | \"success\"",
            "references": {}
          },
          "mutable": false,
          "attr": "status",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'active'",
          "values": [
            {
              "value": "active",
              "type": "string"
            },
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "Progress",
        "description": "Progress indicators express an unspecified wait time or display the length of a process.",
        "category": "Informational",
        "tags": [
          "feedback",
          " loading",
          " progress",
          " spinner"
        ],
        "example": "<goat-progress value=\"40\" label=\"Progress\" width=\"100%\" helper-text=\"Optional helper text goes here...\"></goat-progress>"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/input-controls/select",
      "filePath": "src/components/input-controls/select/select.tsx",
      "fileName": "select.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/input-controls/select/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/input-controls/select/usage",
      "tag": "goat-select",
      "readme": "# goat-select\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [
        "goat-calendar",
        "goat-cb-expression",
        "goat-condition-builder",
        "goat-table"
      ],
      "dependencies": [
        "goat-icon",
        "goat-tag",
        "goat-button",
        "goat-spinner",
        "goat-menu",
        "goat-text",
        "goat-menu-item"
      ],
      "dependencyGraph": {
        "goat-select": [
          "goat-icon",
          "goat-tag",
          "goat-button",
          "goat-spinner",
          "goat-menu",
          "goat-text",
          "goat-menu-item"
        ],
        "goat-tag": [
          "goat-icon"
        ],
        "goat-button": [
          "goat-spinner",
          "goat-icon"
        ],
        "goat-menu": [
          "goat-empty-state"
        ],
        "goat-empty-state": [
          "goat-svg",
          "goat-button"
        ],
        "goat-menu-item": [
          "goat-icon"
        ],
        "goat-calendar": [
          "goat-select"
        ],
        "goat-cb-expression": [
          "goat-select"
        ],
        "goat-condition-builder": [
          "goat-select"
        ],
        "goat-table": [
          "goat-select"
        ]
      },
      "props": [
        {
          "name": "clearable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "clearable",
          "reflectToAttr": false,
          "docs": "If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "configAria",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "config-aria",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "{}",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "debounce",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "Set the amount of time, in milliseconds, to wait to trigger the `goatChange` event after each keystroke.",
          "docsTags": [],
          "default": "300",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "If true, the user cannot interact with the button. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helperText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "helper-text",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideDropdownIcon",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-dropdown-icon",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "inline",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalidText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid-text",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "items",
          "type": "{ label: string | number; value: string | number; icon?: string; }[]",
          "complexType": {
            "original": "{\n    label: string | number;\n    value: string | number;\n    icon?: string;\n  }[]",
            "resolved": "{ label: string | number; value: string | number; icon?: string; }[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "[{\n  label: 'Shivaji Varma',\n  value: 'shivaji-varma',\n  icon: 'person'\n}]",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "{ label: string"
            },
            {
              "type": "number; value: string"
            },
            {
              "type": "number; icon?: string; }[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layer",
          "type": "\"01\" | \"02\" | \"background\"",
          "complexType": {
            "original": "'background' | '01' | '02'",
            "resolved": "\"01\" | \"02\" | \"background\"",
            "references": {}
          },
          "mutable": false,
          "attr": "layer",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "01",
              "type": "string"
            },
            {
              "value": "02",
              "type": "string"
            },
            {
              "value": "background",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The input field name.",
          "docsTags": [],
          "default": "`goat-input-${this.gid}`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "The input field placeholder.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placements",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placements",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'bottom-start,top-start,bottom-end,top-end'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": true,
          "docs": "If true, the user cannot interact with the button. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "If true, required icon is show. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "search",
          "type": "\"contains\" | \"initial\" | \"managed\" | \"none\"",
          "complexType": {
            "original": "'none' | 'initial' | 'contains' | 'managed'",
            "resolved": "\"contains\" | \"initial\" | \"managed\" | \"none\"",
            "references": {}
          },
          "mutable": false,
          "attr": "search",
          "reflectToAttr": false,
          "docs": "Search type\nPossible values are `\"none\"`, `\"initial\"`, `\"contains\"`, `\"managed\"`. Defaults to `\"none\"`.",
          "docsTags": [],
          "default": "'none'",
          "values": [
            {
              "value": "contains",
              "type": "string"
            },
            {
              "value": "initial",
              "type": "string"
            },
            {
              "value": "managed",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showLoader",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-loader",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"lg\" | \"md\" | \"sm\"",
          "complexType": {
            "original": "'sm' | 'md' | 'lg'",
            "resolved": "\"lg\" | \"md\" | \"sm\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "The select input size.\nPossible values are: `\"sm\"`, `\"md\"`, `\"lg\"`. Defaults to `\"md\"`.",
          "docsTags": [],
          "default": "'md'",
          "values": [
            {
              "value": "lg",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            },
            {
              "value": "sm",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "\"default\" | \"error\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "'success' | 'error' | 'warning' | 'default'",
            "resolved": "\"default\" | \"error\" | \"success\" | \"warning\"",
            "references": {}
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": true,
          "docs": "The input state.\nPossible values are: `\"success\"`, `\"error\"`, `\"warning\"`, 'default'. Defaults to `\"default\"`.",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number | string",
          "complexType": {
            "original": "string | number",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The input field value.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "warn",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "warn",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "warnText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "warn-text",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getComponentId",
          "returns": {
            "type": "Promise<string>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<string>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<string>"
          },
          "signature": "getComponentId() => Promise<string>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "openSelectList",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "openSelectList() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "setBlur",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setBlur() => Promise<void>",
          "parameters": [],
          "docs": "Sets blur on the native `input` in `goat-input`. Use this method instead of the global\n`input.blur()`.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the native `input` in `ion-input`. Use this method instead of the global\n`input.focus()`.t",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "goat-select--change",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value has changed.",
          "docsTags": []
        },
        {
          "event": "goat-select--enter",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        },
        {
          "event": "goat-select--search",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [
        {
          "event": "click",
          "target": "window",
          "capture": false,
          "passive": false
        },
        {
          "event": "goat-menu-item--click",
          "capture": false,
          "passive": false
        },
        {
          "event": "goat-tag--dismiss",
          "capture": false,
          "passive": false
        },
        {
          "event": "scroll",
          "target": "window",
          "capture": false,
          "passive": true
        },
        {
          "event": "resize",
          "target": "window",
          "capture": false,
          "passive": true
        }
      ],
      "metadata": {
        "name": "Select",
        "description": "Allows the user to select one or more options using a dropdown.",
        "category": "Form Inputs",
        "tags": [
          "input",
          " form"
        ],
        "img": "/assets/img/select.webp",
        "imgDark": "/assets/img/select-dark.webp"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/application/sidenav",
      "filePath": "src/components/application/sidenav/sidenav.tsx",
      "fileName": "sidenav.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/application/sidenav/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/application/sidenav/usage",
      "tag": "goat-sidenav",
      "readme": "# goat-menu\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "showLoader",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-loader",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name1": "Side Navigation",
        "description1": "The side navigation component provides an easy way to navigate through your website / application.",
        "img1": "/assets/img/sidenav.webp"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/application/sidenav-menu",
      "filePath": "src/components/application/sidenav-menu/sidenav-menu.tsx",
      "fileName": "sidenav-menu.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/application/sidenav-menu/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/application/sidenav-menu/usage",
      "tag": "goat-sidenav-menu",
      "readme": "# goat-menu\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [
        "goat-empty-state"
      ],
      "dependencyGraph": {
        "goat-sidenav-menu": [
          "goat-empty-state"
        ],
        "goat-empty-state": [
          "goat-svg",
          "goat-button"
        ],
        "goat-button": [
          "goat-spinner",
          "goat-icon"
        ]
      },
      "props": [
        {
          "name": "empty",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "empty",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "emptyState",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "empty-state",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "`{\n    \"headline\": \"No items\",\n    \"description\": \"There are no items to display\"\n  }`",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showLoader",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-loader",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number | string",
          "complexType": {
            "original": "string | number",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on first menu item. Use this method instead of the global\n`element.focus()`.",
          "docsTags": []
        }
      ],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [
        {
          "event": "keydown",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "metadata": {}
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/application/sidenav-menu-item",
      "filePath": "src/components/application/sidenav-menu-item/sidenav-menu-item.tsx",
      "fileName": "sidenav-menu-item.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/application/sidenav-menu-item/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/application/sidenav-menu-item/usage",
      "tag": "goat-sidenav-menu-item",
      "readme": "# goat-menu-item\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "If true, the user cannot interact with the button. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "Menu item selection state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number | string",
          "complexType": {
            "original": "string | number | null",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The menu item value.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setBlur",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setBlur() => Promise<void>",
          "parameters": [],
          "docs": "Sets blur on the native `input` in `goat-input`. Use this method instead of the global\n`input.blur()`.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the native `input` in `goat-input`. Use this method instead of the global\n`input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "goat:sidenav-menu-item-click",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the menu item is clicked.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [
        {
          "event": "mouseup",
          "target": "window",
          "capture": false,
          "passive": true
        },
        {
          "event": "keyup",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "metadata": {}
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/input-controls/slider",
      "filePath": "src/components/input-controls/slider/slider.tsx",
      "fileName": "slider.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/input-controls/slider/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/input-controls/slider/usage",
      "tag": "goat-slider",
      "readme": "# goat-select\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [
        "goat-number",
        "goat-tooltip"
      ],
      "dependencyGraph": {
        "goat-slider": [
          "goat-number",
          "goat-tooltip"
        ],
        "goat-number": [
          "goat-button"
        ],
        "goat-button": [
          "goat-spinner",
          "goat-icon"
        ],
        "goat-tooltip": [
          "goat-popover",
          "goat-popover-content"
        ]
      },
      "props": [
        {
          "name": "configAria",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "config-aria",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "{}",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "debounce",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "Set the amount of time, in milliseconds, to wait to trigger the `goatChange` event after each keystroke.",
          "docsTags": [],
          "default": "300",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "If true, the user cannot interact with the button. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "formatter",
          "type": "(value: string | number) => string",
          "complexType": {
            "original": "(value: string | number) => string",
            "resolved": "(value: string | number) => string",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "function to format the value of the input",
          "docsTags": [],
          "values": [
            {
              "type": "(value: string"
            },
            {
              "type": "number) => string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "100",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The input field name.",
          "docsTags": [],
          "default": "`goat-input-${this.gid}`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": true,
          "docs": "If true, the user cannot interact with the button. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "If true, required icon is show. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showOnlySlider",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-only-slider",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "step",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "step",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The input field value.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getComponentId",
          "returns": {
            "type": "Promise<string>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<string>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<string>"
          },
          "signature": "getComponentId() => Promise<string>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "setBlur",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setBlur() => Promise<void>",
          "parameters": [],
          "docs": "Sets blur on the native `input` in `goat-input`. Use this method instead of the global\n`input.blur()`.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the native `input` in `ion-input`. Use this method instead of the global\n`input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "goat-slider--change",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value has changed.",
          "docsTags": []
        },
        {
          "event": "goat-slider--input",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [
        {
          "event": "click",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "metadata": {
        "name": "Slider",
        "description": "Sliders allow users to make selections from a range of values.",
        "category": "Form Inputs",
        "tags": [
          "input",
          " form"
        ],
        "img": "/assets/img/slider.webp",
        "imgDark": "/assets/img/slider-dark.webp"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/spinner",
      "filePath": "src/components/spinner/spinner.tsx",
      "fileName": "spinner.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/spinner/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/spinner/usage",
      "tag": "goat-spinner",
      "readme": "# goat-spinner\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [
        "goat-button",
        "goat-code-editor",
        "goat-code-highlighter",
        "goat-html-editor",
        "goat-modal",
        "goat-select",
        "goat-tab"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "goat-button": [
          "goat-spinner"
        ],
        "goat-code-editor": [
          "goat-spinner"
        ],
        "goat-code-highlighter": [
          "goat-spinner"
        ],
        "goat-html-editor": [
          "goat-spinner"
        ],
        "goat-modal": [
          "goat-spinner"
        ],
        "goat-select": [
          "goat-spinner"
        ],
        "goat-tab": [
          "goat-spinner"
        ]
      },
      "props": [
        {
          "name": "description",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "description",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'Loading...'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideBackground",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-background",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "string",
          "complexType": {
            "original": "'sm' | 'md' | 'lg' | string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "The Icon size.\nPossible values are: `\"sm\"`, `\"md\"`, `\"lg\"` and size in pixel. Defaults to `\"md\"`.",
          "docsTags": [],
          "default": "'md'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "Spinner",
        "description": "Spinners provide a visual cue that an action is processing awaiting a course of change or a result.",
        "category": "Informational",
        "tags": [
          "feedback",
          " loading",
          " progress",
          " spinner"
        ],
        "example": "<goat-spinner class=\"rainbow\" size=\"2rem\"></goat-spinner>"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/svg",
      "filePath": "src/components/svg/svg.tsx",
      "fileName": "svg.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/svg/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/svg/usage",
      "tag": "goat-svg",
      "readme": "# goat-icon\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [
        "goat-empty-state",
        "goat-header-brand"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "goat-empty-state": [
          "goat-svg"
        ],
        "goat-header-brand": [
          "goat-svg"
        ]
      },
      "props": [
        {
          "name": "size",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "The Icon size.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "src",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "src",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "SVG",
        "description": "Render SVG content from an external source.",
        "category": "Data Display",
        "example": "<goat-svg src=\"https://icons.getbootstrap.com/assets/icons/bug.svg\" size=\"2rem\"></goat-svg>"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/tabs/tab",
      "filePath": "src/components/tabs/tab/tab.tsx",
      "fileName": "tab.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/tabs/tab/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/tabs/tab/usage",
      "tag": "goat-tab",
      "readme": "# goat-tab\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [
        "goat-spinner",
        "goat-icon"
      ],
      "dependencyGraph": {
        "goat-tab": [
          "goat-spinner",
          "goat-icon"
        ]
      },
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "If true, the user cannot interact with the button. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabledReason",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled-reason",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": true,
          "docs": "Hyperlink to navigate to on click.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Icon which will displayed on button.\nPossible values are bootstrap icon names.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "Button selection state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "showLoader",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-loader",
          "reflectToAttr": false,
          "docs": "Show loader.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"contained\" | \"contained-bottom\" | \"default\"",
          "complexType": {
            "original": "'contained' | 'contained-bottom' | 'default'",
            "resolved": "\"contained\" | \"contained-bottom\" | \"default\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "value": "contained",
              "type": "string"
            },
            {
              "value": "contained-bottom",
              "type": "string"
            },
            {
              "value": "default",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "triggerClick",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "triggerClick() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "goat-tab--click",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "On click of tab, a CustomEvent 'goat-tab-click' will be triggered.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [
        {
          "event": "mouseup",
          "target": "window",
          "capture": false,
          "passive": true
        },
        {
          "event": "keyup",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "metadata": {}
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/tabs/tab-panel",
      "filePath": "src/components/tabs/tab-panel/tab-panel.tsx",
      "fileName": "tab-panel.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/tabs/tab-panel/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/tabs/tab-panel/usage",
      "tag": "goat-tab-panel",
      "readme": "# goat-tab\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "active",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layer",
          "type": "\"01\" | \"02\" | \"background\"",
          "complexType": {
            "original": "'background' | '01' | '02'",
            "resolved": "\"01\" | \"02\" | \"background\"",
            "references": {}
          },
          "mutable": false,
          "attr": "layer",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "01",
              "type": "string"
            },
            {
              "value": "02",
              "type": "string"
            },
            {
              "value": "background",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {}
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/table",
      "filePath": "src/components/table/table.tsx",
      "fileName": "table.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/table/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/table/usage",
      "tag": "goat-table",
      "readme": "# goat-table\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [
        "goat-checkbox",
        "goat-button",
        "goat-select",
        "goat-text",
        "goat-empty-state"
      ],
      "dependencyGraph": {
        "goat-table": [
          "goat-checkbox",
          "goat-button",
          "goat-select",
          "goat-text",
          "goat-empty-state"
        ],
        "goat-button": [
          "goat-spinner",
          "goat-icon"
        ],
        "goat-select": [
          "goat-icon",
          "goat-tag",
          "goat-button",
          "goat-spinner",
          "goat-menu",
          "goat-text",
          "goat-menu-item"
        ],
        "goat-tag": [
          "goat-icon"
        ],
        "goat-menu": [
          "goat-empty-state"
        ],
        "goat-empty-state": [
          "goat-svg",
          "goat-button"
        ],
        "goat-menu-item": [
          "goat-icon"
        ]
      },
      "props": [
        {
          "name": "columns",
          "type": "any[]",
          "complexType": {
            "original": "any[]",
            "resolved": "any[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Grid columns configuration.\n[\n{\n  \"name\":\"name\",\n  \"label\":\"Name\",\n  \"width\":300,\n  \"fixed\":true,\n  \"template\": function(row, column) { return row[column.name];}\n },\n{\n  \"name\":\"age\",\n  \"label\":\"Age\"\n}\n]",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "data",
          "type": "any[]",
          "complexType": {
            "original": "any[]",
            "resolved": "any[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Grid data to display on table\n[{\n 'id': '5e7118ddce4b3d577956457f',\n 'age': 21,\n 'name': 'John',\n 'company': 'India',\n 'email': 'john@example.com',\n 'phone': '+1 (839) 560-3581',\n 'address': '326 Irving Street, Grimsley, Texas, 4048'\n }]",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "emptyStateDescription",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "empty-state-description",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'There are no items to display'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "emptyStateHeadline",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "empty-state-headline",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'No items'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "keyField",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "key-field",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'id'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "layer",
          "type": "\"01\" | \"02\" | \"background\"",
          "complexType": {
            "original": "'background' | '01' | '02'",
            "resolved": "\"01\" | \"02\" | \"background\"",
            "references": {}
          },
          "mutable": false,
          "attr": "layer",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "01",
              "type": "string"
            },
            {
              "value": "02",
              "type": "string"
            },
            {
              "value": "background",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "managed",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "managed",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "page",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "page",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pageSize",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "page-size",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "10",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "paginate",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "paginate",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedRowKeys",
          "type": "string[]",
          "complexType": {
            "original": "string[]",
            "resolved": "string[]",
            "references": {}
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectionType",
          "type": "\"checkbox\"",
          "complexType": {
            "original": "'checkbox' | undefined",
            "resolved": "\"checkbox\"",
            "references": {}
          },
          "mutable": false,
          "attr": "selection-type",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "checkbox",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "sortBy",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "sort-by",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "sortOrder",
          "type": "\"asc\" | \"desc\"",
          "complexType": {
            "original": "'asc' | 'desc'",
            "resolved": "\"asc\" | \"desc\"",
            "references": {}
          },
          "mutable": true,
          "attr": "sort-order",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "'asc'",
          "values": [
            {
              "value": "asc",
              "type": "string"
            },
            {
              "value": "desc",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "sortable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "sortable",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "totalItems",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "total-items",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "goat-table--cell-click",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a table cell is clicked.",
          "docsTags": []
        },
        {
          "event": "goat-table--page",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the page changes.",
          "docsTags": []
        },
        {
          "event": "goat-table--selection-change",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the selection changes.",
          "docsTags": []
        },
        {
          "event": "goat-table--sort",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the table is sorted.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "Table",
        "description": "A configurable component for displaying tabular data.",
        "category": "Data Display",
        "img": "/assets/img/table.webp",
        "imgDark": "/assets/img/table-dark.webp"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/tabs/tabs",
      "filePath": "src/components/tabs/tabs/tabs.tsx",
      "fileName": "tabs.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/tabs/tabs/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/tabs/tabs/usage",
      "tag": "goat-tabs",
      "readme": "# goat-tabs\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "layer",
          "type": "\"01\" | \"02\" | \"background\"",
          "complexType": {
            "original": "'background' | '01' | '02'",
            "resolved": "\"01\" | \"02\" | \"background\"",
            "references": {}
          },
          "mutable": false,
          "attr": "layer",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "01",
              "type": "string"
            },
            {
              "value": "02",
              "type": "string"
            },
            {
              "value": "background",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "type",
          "type": "\"contained\" | \"contained-bottom\" | \"default\"",
          "complexType": {
            "original": "'contained' | 'contained-bottom' | 'default'",
            "resolved": "\"contained\" | \"contained-bottom\" | \"default\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "value": "contained",
              "type": "string"
            },
            {
              "value": "contained-bottom",
              "type": "string"
            },
            {
              "value": "default",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [
        {
          "event": "goat-tab--click",
          "capture": false,
          "passive": false
        }
      ],
      "metadata": {
        "name": "Tabs",
        "description": "The tabs component is used to display multiple panels of content in a container.",
        "category": "Navigation",
        "tags": [
          "navigation"
        ],
        "example": "<goat-tabs>\n<goat-tabs-list>\n<goat-tab selected >Tab 1</goat-tab>\n<goat-tab>Tab 2</goat-tab>\n</goat-tabs-list>\n</goat-tabs>"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/tabs/tabs-list",
      "filePath": "src/components/tabs/tabs-list/tabs-list.tsx",
      "fileName": "tabs-list.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/tabs/tabs-list/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/tabs/tabs-list/usage",
      "tag": "goat-tabs-list",
      "readme": "# goat-tabs\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "managed",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "managed",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"contained\" | \"contained-bottom\" | \"default\"",
          "complexType": {
            "original": "'contained' | 'contained-bottom' | 'default'",
            "resolved": "\"contained\" | \"contained-bottom\" | \"default\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "value": "contained",
              "type": "string"
            },
            {
              "value": "contained-bottom",
              "type": "string"
            },
            {
              "value": "default",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [
        {
          "event": "goat-tab-click",
          "capture": false,
          "passive": false
        }
      ],
      "metadata": {}
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/tag",
      "filePath": "src/components/tag/tag.tsx",
      "fileName": "tag.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/tag/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/tag/usage",
      "tag": "goat-tag",
      "readme": "# goat-heading\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [
        "goat-cb-compound-expression",
        "goat-cb-predicate",
        "goat-code-editor",
        "goat-condition-builder",
        "goat-flow-designer",
        "goat-select"
      ],
      "dependencies": [
        "goat-icon"
      ],
      "dependencyGraph": {
        "goat-tag": [
          "goat-icon"
        ],
        "goat-cb-compound-expression": [
          "goat-tag"
        ],
        "goat-cb-predicate": [
          "goat-tag"
        ],
        "goat-code-editor": [
          "goat-tag"
        ],
        "goat-condition-builder": [
          "goat-tag"
        ],
        "goat-flow-designer": [
          "goat-tag"
        ],
        "goat-select": [
          "goat-tag"
        ]
      },
      "props": [
        {
          "name": "color",
          "type": "\"blue\" | \"error\" | \"gray\" | \"green\" | \"info\" | \"primary\" | \"red\" | \"success\" | \"warning\" | \"yellow\"",
          "complexType": {
            "original": "| 'gray'\n    | 'blue'\n    | 'green'\n    | 'red'\n    | 'yellow'\n    | 'primary'\n    | 'success'\n    | 'info'\n    | 'warning'\n    | 'error'",
            "resolved": "\"blue\" | \"error\" | \"gray\" | \"green\" | \"info\" | \"primary\" | \"red\" | \"success\" | \"warning\" | \"yellow\"",
            "references": {}
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "Tag color.\nPossible values are: 'gray', 'blue', 'green', 'red', 'yellow', 'primary', 'success', 'info', 'warning', 'error'.",
          "docsTags": [],
          "default": "'gray'",
          "values": [
            {
              "value": "blue",
              "type": "string"
            },
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "gray",
              "type": "string"
            },
            {
              "value": "green",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "red",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "value": "yellow",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "dismissible",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "dismissible",
          "reflectToAttr": false,
          "docs": "If true, the tag will have a close icon.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "imageSrc",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "image-src",
          "reflectToAttr": false,
          "docs": "Image source.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "selected",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "selected",
          "reflectToAttr": true,
          "docs": "If true, the tag will be selected.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"md\" | \"sm\"",
          "complexType": {
            "original": "'sm' | 'md'",
            "resolved": "\"md\" | \"sm\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "Text size.",
          "docsTags": [],
          "default": "'md'",
          "values": [
            {
              "value": "md",
              "type": "string"
            },
            {
              "value": "sm",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Tag value.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "goat-tag--click",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the tag is clicked.",
          "docsTags": []
        },
        {
          "event": "goat-tag--dismiss",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the close icon is clicked.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "Tag",
        "description": "Use tags to label, categorize, or organize items using keywords that describe them.",
        "category": "Data Display",
        "tag": "controls",
        "example": "<goat-tag class=\"color-red\">Important</goat-tag>"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/typography/text",
      "filePath": "src/components/typography/text/text.tsx",
      "fileName": "text.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/typography/text/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/typography/text/usage",
      "tag": "goat-text",
      "readme": "# goat-heading\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [
        "goat-breadcrumb-item",
        "goat-cb-compound-expression",
        "goat-condition-builder",
        "goat-footer-copyright",
        "goat-modal",
        "goat-select",
        "goat-table"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "goat-breadcrumb-item": [
          "goat-text"
        ],
        "goat-cb-compound-expression": [
          "goat-text"
        ],
        "goat-condition-builder": [
          "goat-text"
        ],
        "goat-footer-copyright": [
          "goat-text"
        ],
        "goat-modal": [
          "goat-text"
        ],
        "goat-select": [
          "goat-text"
        ],
        "goat-table": [
          "goat-text"
        ]
      },
      "props": [
        {
          "name": "color",
          "type": "\"error\" | \"helper\" | \"inverse\" | \"on-color\" | \"primary\" | \"secondary\" | \"tertiary\"",
          "complexType": {
            "original": "| 'primary'\n    | 'secondary'\n    | 'tertiary'\n    | 'helper'\n    | 'error'\n    | 'on-color'\n    | 'inverse'",
            "resolved": "\"error\" | \"helper\" | \"inverse\" | \"on-color\" | \"primary\" | \"secondary\" | \"tertiary\"",
            "references": {}
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "helper",
              "type": "string"
            },
            {
              "value": "inverse",
              "type": "string"
            },
            {
              "value": "on-color",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "configAria",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "config-aria",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "{}",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expressive",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "expressive",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headingLevel",
          "type": "1 | 2 | 3 | 4 | 5 | 6",
          "complexType": {
            "original": "1 | 2 | 3 | 4 | 5 | 6",
            "resolved": "1 | 2 | 3 | 4 | 5 | 6",
            "references": {}
          },
          "mutable": false,
          "attr": "heading-level",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "3",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            },
            {
              "value": "6",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headingSize",
          "type": "1 | 2 | 3 | 4 | 5 | 6 | 7",
          "complexType": {
            "original": "1 | 2 | 3 | 4 | 5 | 6 | 7",
            "resolved": "1 | 2 | 3 | 4 | 5 | 6 | 7",
            "references": {}
          },
          "mutable": false,
          "attr": "heading-size",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "value": "1",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "3",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            },
            {
              "value": "5",
              "type": "number"
            },
            {
              "value": "6",
              "type": "number"
            },
            {
              "value": "7",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "inline",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"body\" | \"body-compact\" | \"code\" | \"fluid-heading\" | \"heading\" | \"heading-compact\" | \"helper-text\" | \"label\" | \"legal\"",
          "complexType": {
            "original": "| 'code'\n    | 'helper-text'\n    | 'label'\n    | 'legal'\n    | 'heading'\n    | 'body'\n    | 'body-compact'\n    | 'heading-compact'\n    | 'fluid-heading'",
            "resolved": "\"body\" | \"body-compact\" | \"code\" | \"fluid-heading\" | \"heading\" | \"heading-compact\" | \"helper-text\" | \"label\" | \"legal\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "'body'",
          "values": [
            {
              "value": "body",
              "type": "string"
            },
            {
              "value": "body-compact",
              "type": "string"
            },
            {
              "value": "code",
              "type": "string"
            },
            {
              "value": "fluid-heading",
              "type": "string"
            },
            {
              "value": "heading",
              "type": "string"
            },
            {
              "value": "heading-compact",
              "type": "string"
            },
            {
              "value": "helper-text",
              "type": "string"
            },
            {
              "value": "label",
              "type": "string"
            },
            {
              "value": "legal",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "Text",
        "description": "Typography are used for rendering headlines, paragraphs and captions.",
        "category": "General",
        "example": "<goat-text type=\"heading\" level=\"1\">Heading</goat-typography>"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/input-controls/input/textarea",
      "filePath": "src/components/input-controls/input/textarea/textarea.tsx",
      "fileName": "textarea.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/input-controls/input/textarea/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/input-controls/input/textarea/usage",
      "tag": "goat-textarea",
      "readme": "# goat-textarea\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [
        "goat-button"
      ],
      "dependencyGraph": {
        "goat-textarea": [
          "goat-button"
        ],
        "goat-button": [
          "goat-spinner",
          "goat-icon"
        ]
      },
      "props": [
        {
          "name": "clearable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "clearable",
          "reflectToAttr": false,
          "docs": "If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "configAria",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "config-aria",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "{}",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "debounce",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "Set the amount of time, in milliseconds, to wait to trigger the `goat:change` event after each keystroke.",
          "docsTags": [],
          "default": "300",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "If true, the user cannot interact with the button. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helperText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "helper-text",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "inline",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalidText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid-text",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The input field name.",
          "docsTags": [],
          "default": "`goat-input-${this.gid}`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "The input field placeholder.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": true,
          "docs": "If true, the user read the value cannot modify it. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If true, required icon is show. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"lg\" | \"md\" | \"sm\"",
          "complexType": {
            "original": "'sm' | 'md' | 'lg'",
            "resolved": "\"lg\" | \"md\" | \"sm\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "The input field size.\nPossible values are: `\"sm\"`, `\"md\"`, `\"lg\"`. Defaults to `\"md\"`.",
          "docsTags": [],
          "default": "'md'",
          "values": [
            {
              "value": "lg",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            },
            {
              "value": "sm",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "skeleton",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "skeleton",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "state",
          "type": "\"default\" | \"error\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "'success' | 'error' | 'warning' | 'default'",
            "resolved": "\"default\" | \"error\" | \"success\" | \"warning\"",
            "references": {}
          },
          "mutable": false,
          "attr": "state",
          "reflectToAttr": true,
          "docs": "The input state.\nPossible values are: `\"success\"`, `\"error\"`, `\"warning\"`, 'default'. Defaults to `\"default\"`.",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The input field value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "warn",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "warn",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "warnText",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "warn-text",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getComponentId",
          "returns": {
            "type": "Promise<string>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<string>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<string>"
          },
          "signature": "getComponentId() => Promise<string>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "setBlur",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setBlur() => Promise<void>",
          "parameters": [],
          "docs": "Sets blur on the native `textarea` in `goat-textarea`. Use this method instead of the global\n`textarea.blur()`.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the native `textarea` in `goat-textarea`. Use this method instead of the global\n`textarea.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "goat-textarea--action-click",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the action button is clicked.",
          "docsTags": []
        },
        {
          "event": "goat-textarea--blur",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input loses focus.",
          "docsTags": []
        },
        {
          "event": "goat-textarea--change",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value has changed..",
          "docsTags": []
        },
        {
          "event": "goat-textarea--focus",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has focus.",
          "docsTags": []
        },
        {
          "event": "goat-textarea--input",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "Textarea",
        "description": "Enables native inputs to be used within a Form field.",
        "category": "Form Inputs",
        "tags": [
          "input",
          " form"
        ],
        "example": "<goat-textarea placeholder=\"Enter some description over here\"></goat-textarea>"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/input-controls/data-and-time/date/time-picker",
      "filePath": "src/components/input-controls/data-and-time/date/time-picker/time-picker.tsx",
      "fileName": "time-picker.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/input-controls/data-and-time/date/time-picker/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/input-controls/data-and-time/date/time-picker/usage",
      "tag": "goat-time-picker",
      "readme": "# goat-time-picker\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [
        "goat-button"
      ],
      "dependencyGraph": {
        "goat-time-picker": [
          "goat-button"
        ],
        "goat-button": [
          "goat-spinner",
          "goat-icon"
        ]
      },
      "props": [
        {
          "name": "configAria",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "config-aria",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "{}",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "If true, the user cannot interact with the button. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "inline",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The input field name.",
          "docsTags": [],
          "default": "`goat-input-${this.gid}`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "The input field placeholder.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": true,
          "docs": "If true, the user read the value cannot modify it. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"lg\" | \"md\" | \"sm\"",
          "complexType": {
            "original": "'sm' | 'md' | 'lg'",
            "resolved": "\"lg\" | \"md\" | \"sm\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": true,
          "docs": "The input field size.\nPossible values are: `\"sm\"`, `\"md\"`, `\"lg\"`. Defaults to `\"md\"`.",
          "docsTags": [],
          "default": "'md'",
          "values": [
            {
              "value": "lg",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            },
            {
              "value": "sm",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number | string",
          "complexType": {
            "original": "string | number | null",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The input field value.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getComponentId",
          "returns": {
            "type": "Promise<string>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<string>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<string>"
          },
          "signature": "getComponentId() => Promise<string>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "setBlur",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setBlur() => Promise<void>",
          "parameters": [],
          "docs": "Sets blur on the native `input` in `goat-input`. Use this method instead of the global\n`input.blur()`.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the native `input` in `goat-input`. Use this method instead of the global\n`input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "goat-time-picker--blur",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input loses focus.",
          "docsTags": []
        },
        {
          "event": "goat-time-picker--change",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value has changed.",
          "docsTags": []
        },
        {
          "event": "goat-time-picker--focus",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has focus.",
          "docsTags": []
        },
        {
          "event": "goat-time-picker--input",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "Time Picker",
        "description": "Captures time input.",
        "category": "Form Inputs",
        "tags": [
          "input",
          " form"
        ],
        "example": "<goat-time-picker value='true'></goat-time-picker>"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/input-controls/toggle",
      "filePath": "src/components/input-controls/toggle/toggle.tsx",
      "fileName": "toggle.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/input-controls/toggle/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/input-controls/toggle/usage",
      "tag": "goat-toggle",
      "readme": "# goat-checkbox\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [
        "goat-html-editor"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "goat-html-editor": [
          "goat-toggle"
        ]
      },
      "props": [
        {
          "name": "configAria",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "config-aria",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "{}",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "If true, the user cannot interact with the button. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The checkbox label.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The input field name.",
          "docsTags": [],
          "default": "`goat-input-${this.gid}`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "required",
          "reflectToAttr": true,
          "docs": "If true, required icon is show. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rounded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "rounded",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"lg\" | \"md\"",
          "complexType": {
            "original": "'md' | 'lg'",
            "resolved": "\"lg\" | \"md\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "The button size.\nPossible values are: `\"sm\"`, `\"md\"`, `\"lg\"`. Defaults to `\"md\"`.",
          "docsTags": [],
          "default": "'md'",
          "values": [
            {
              "value": "lg",
              "type": "string"
            },
            {
              "value": "md",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The input field value.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getComponentId",
          "returns": {
            "type": "Promise<string>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<string>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<string>"
          },
          "signature": "getComponentId() => Promise<string>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "setBlur",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setBlur() => Promise<void>",
          "parameters": [],
          "docs": "Sets blur on the native `input` in `goat-toggle`. Use this method instead of the global\n`input.blur()`.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the native `input` in `goat-toggle`. Use this method instead of the global\n`input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "goat-toggle--blur",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input loses focus.",
          "docsTags": []
        },
        {
          "event": "goat-toggle--change",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "On change of input a CustomEvent 'goat-change' will be triggered. Event details contains parent event, oldValue, newValue of input.",
          "docsTags": []
        },
        {
          "event": "goat-toggle--focus",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has focus.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [
        {
          "event": "mouseup",
          "target": "window",
          "capture": false,
          "passive": true
        },
        {
          "event": "keyup",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "metadata": {
        "name": "Toggle",
        "description": "Captures boolean input with an optional indeterminate mode.",
        "category": "Form Inputs",
        "tags": [
          "input",
          " form"
        ],
        "example": "<goat-toggle value='true'>Want ice cream?</goat-toggle>"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/tooltip",
      "filePath": "src/components/tooltip/tooltip.tsx",
      "fileName": "tooltip.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/tooltip/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/tooltip/usage",
      "tag": "goat-tooltip",
      "readme": "# goat-icon\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [
        "goat-code-highlighter",
        "goat-input",
        "goat-slider"
      ],
      "dependencies": [
        "goat-popover",
        "goat-popover-content"
      ],
      "dependencyGraph": {
        "goat-tooltip": [
          "goat-popover",
          "goat-popover-content"
        ],
        "goat-code-highlighter": [
          "goat-tooltip"
        ],
        "goat-input": [
          "goat-tooltip"
        ],
        "goat-slider": [
          "goat-tooltip"
        ]
      },
      "props": [
        {
          "name": "content",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "content",
          "reflectToAttr": false,
          "docs": "The content of the tooltip.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placements",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placements",
          "reflectToAttr": false,
          "docs": "The placement of the popover relative to the trigger element.\nPossible values are:\n- `\"top\"`: The popover is placed above the trigger element.\n- `\"right\"`: The popover is placed to the right of the trigger element.\n- `\"bottom\"`: The popover is placed below the trigger element.\n- `\"left\"`: The popover is placed to the left of the trigger element.",
          "docsTags": [],
          "default": "'top,bottom,right,left'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "trigger",
          "type": "\"hover\" | \"manual\"",
          "complexType": {
            "original": "'hover' | 'manual'",
            "resolved": "\"hover\" | \"manual\"",
            "references": {}
          },
          "mutable": false,
          "attr": "trigger",
          "reflectToAttr": true,
          "docs": "If true, the tooltip will be managed by the parent component.",
          "docsTags": [],
          "default": "'hover'",
          "values": [
            {
              "value": "hover",
              "type": "string"
            },
            {
              "value": "manual",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [
        {
          "event": "mouseover",
          "target": "window",
          "capture": false,
          "passive": true
        }
      ],
      "metadata": {
        "name": "Tooltip",
        "description": "The Tooltip component is used to display additional information on hover.",
        "category": "Informational",
        "tag": "content",
        "img": "/assets/img/tooltip.webp",
        "imgDark": "/assets/img/tooltip-dark.webp"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/tree-view/tree-node",
      "filePath": "src/components/tree-view/tree-node/tree-node.tsx",
      "fileName": "tree-node.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/tree-view/tree-node/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/tree-view/tree-node/usage",
      "tag": "goat-tree-node",
      "readme": "# goat-menu\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [
        "goat-icon"
      ],
      "dependencyGraph": {
        "goat-tree-node": [
          "goat-icon"
        ]
      },
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "If true, the user cannot interact with the button. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "expanded",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": true,
          "docs": "Hyperlink to navigate to on click.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Icon which will displayed on button.\nPossible values are icon names.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "level",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "level",
          "reflectToAttr": true,
          "docs": "",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedNode",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "selected-node",
          "reflectToAttr": true,
          "docs": "Menu item selection state.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "target",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "Sets or retrieves the window or frame at which to target content.",
          "docsTags": [],
          "default": "'_self'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number | string",
          "complexType": {
            "original": "string | number | null",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The menu item value.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "setBlur",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setBlur() => Promise<void>",
          "parameters": [],
          "docs": "Sets blur on the native `input` in `goat-input`. Use this method instead of the global\n`input.blur()`.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the native `input` in `goat-input`. Use this method instead of the global\n`input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "goat-tree-node--click",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the menu item is clicked.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [
        {
          "event": "mouseup",
          "target": "window",
          "capture": false,
          "passive": true
        },
        {
          "event": "keyup",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "metadata": {
        "name": "TreeNode",
        "description": "A tree node is a hierarchical structure that provides nested levels of navigation.",
        "category": "Navigation",
        "subcategory": "Tree View",
        "childComponent": "true",
        "img": "/assets/img/tree-view.webp",
        "imgDark": "/assets/img/tree-view-dark.webp"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/tree-view/tree-view",
      "filePath": "src/components/tree-view/tree-view/tree-view.tsx",
      "fileName": "tree-view.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/tree-view/tree-view/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/tree-view/tree-view/usage",
      "tag": "goat-tree-view",
      "readme": "# goat-menu\n\n\n",
      "overview": "",
      "usage": {},
      "docs": "",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [
        "goat-empty-state"
      ],
      "dependencyGraph": {
        "goat-tree-view": [
          "goat-empty-state"
        ],
        "goat-empty-state": [
          "goat-svg",
          "goat-button"
        ],
        "goat-button": [
          "goat-spinner",
          "goat-icon"
        ]
      },
      "props": [
        {
          "name": "empty",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "empty",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "emptyState",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "empty-state",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "`{\n    \"headline\": \"No items\",\n    \"description\": \"There are no items to display\"\n  }`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "selectedNode",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "selected-node",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getSelectedNode",
          "returns": {
            "type": "Promise<string>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<string>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<string>"
          },
          "signature": "getSelectedNode() => Promise<string>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on first menu item. Use this method instead of the global\n`element.focus()`.",
          "docsTags": []
        },
        {
          "name": "subscribeToSelect",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(cb: any) => Promise<void>",
            "parameters": [
              {
                "name": "cb",
                "type": "any",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "subscribeToSelect(cb: any) => Promise<void>",
          "parameters": [
            {
              "name": "cb",
              "type": "any",
              "docs": ""
            }
          ],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [
        {
          "event": "goat-tree-node--click",
          "capture": false,
          "passive": false
        },
        {
          "event": "keydown",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "metadata": {
        "name": "TreeView",
        "description": "A tree view is a hierarchical structure that provides nested levels of navigation.",
        "category": "Navigation",
        "subcategory": "Tree View",
        "img": "/assets/img/tree-view.webp",
        "imgDark": "/assets/img/tree-view-dark.webp"
      }
    },
    {
      "dirPath": "/workspaces/goatui-components/src/components/url-input",
      "filePath": "src/components/url-input/url-input.tsx",
      "fileName": "url-input.tsx",
      "readmePath": "/workspaces/goatui-components/src/components/url-input/readme.md",
      "usagesDir": "/workspaces/goatui-components/src/components/url-input/usage",
      "tag": "goat-url-input",
      "readme": "# goat-url-input\n\nA specialized input component for URL validation. This component provides real-time validation for URL inputs and visual feedback when an invalid URL is entered.\n\n## Basic Usage\n\n```html\n<goat-url-input placeholder=\"Enter website URL\"></goat-url-input>\n```\n\n## With initial value\n\n```html\n<goat-url-input value=\"https://example.com\" placeholder=\"Enter website URL\"></goat-url-input>\n```\n\n## Disabled state\n\n```html\n<goat-url-input disabled value=\"https://example.com\"></goat-url-input>\n```\n",
      "overview": "",
      "usage": {},
      "docs": "A specialized input component for URL validation. This component provides real-time validation for URL inputs and visual feedback when an invalid URL is entered.",
      "encapsulation": "shadow",
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {},
      "props": [
        {
          "name": "debounce",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "debounce",
          "reflectToAttr": false,
          "docs": "Set the amount of time, in milliseconds, to wait to trigger the `valueChange` event after each keystroke.",
          "docsTags": [],
          "default": "300",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": true,
          "docs": "If true, the user cannot interact with the input. Defaults to `false`.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The input field name.",
          "docsTags": [],
          "default": "`goat-url-input-${this.gid}`",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "The input field placeholder.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The input field value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getComponentId",
          "returns": {
            "type": "Promise<string>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<string>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<string>"
          },
          "signature": "getComponentId() => Promise<string>",
          "parameters": [],
          "docs": "Get the component's unique ID",
          "docsTags": []
        },
        {
          "name": "setBlur",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setBlur() => Promise<void>",
          "parameters": [],
          "docs": "Sets blur on the native `input`. Use this method instead of the global\n`input.blur()`.",
          "docsTags": []
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the native `input`. Use this method instead of the global\n`input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "inputInvalid",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the URL input is invalid.",
          "docsTags": []
        },
        {
          "event": "valueChange",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "listeners": [],
      "metadata": {
        "name": "URL Input",
        "description": "A specialized input field for URL validation.",
        "category": "Up coming",
        "tags": [
          "input",
          " form",
          " url"
        ],
        "example": "<goat-url-input placeholder=\"Enter website URL\"></goat-url-input>"
      }
    }
  ],
  "typeLibrary": {
    "src/components/application/calendar/calendar/types.tsx::EventType": {
      "declaration": "{\n  start: Date;\n  end: Date;\n  title: string;\n  color?: string;\n  [key: string]: any;\n}",
      "docstring": "",
      "path": "src/components/application/calendar/calendar/types.tsx"
    },
    "src/components/application/calendar/calendar/types.tsx::CalendarViewType": {
      "declaration": "{\n  label: string;\n  value: string;\n  type: string;\n  days?: number;\n}",
      "docstring": "",
      "path": "src/components/application/calendar/calendar/types.tsx"
    },
    "src/components/application/code-highlighter/constants.ts::Language": {
      "declaration": "export type Language =\n  | 'markup'\n  | 'html'\n  | 'css'\n  | 'clike'\n  | 'javascript'\n  | 'abap'\n  | 'actionscript'\n  | 'ada'\n  | 'apacheconf'\n  | 'apl'\n  | 'applescript'\n  | 'arduino'\n  | 'arff'\n  | 'asciidoc'\n  | 'asm6502'\n  | 'aspnet'\n  | 'autohotkey'\n  | 'autoit'\n  | 'bash'\n  | 'basic'\n  | 'batch'\n  | 'bison'\n  | 'brainfuck'\n  | 'bro'\n  | 'c'\n  | 'csharp'\n  | 'cpp'\n  | 'coffeescript'\n  | 'clojure'\n  | 'crystal'\n  | 'csp'\n  | 'css-extras'\n  | 'd'\n  | 'dart'\n  | 'diff'\n  | 'django'\n  | 'docker'\n  | 'eiffel'\n  | 'elixir'\n  | 'elm'\n  | 'erb'\n  | 'erlang'\n  | 'fsharp'\n  | 'flow'\n  | 'fortran'\n  | 'gedcom'\n  | 'gherkin'\n  | 'git'\n  | 'glsl'\n  | 'go'\n  | 'graphql'\n  | 'groovy'\n  | 'haml'\n  | 'handlebars'\n  | 'haskell'\n  | 'haxe'\n  | 'http'\n  | 'hpkp'\n  | 'hsts'\n  | 'ichigojam'\n  | 'icon'\n  | 'inform7'\n  | 'ini'\n  | 'io'\n  | 'j'\n  | 'java'\n  | 'jolie'\n  | 'json'\n  | 'jsx'\n  | 'julia'\n  | 'keyman'\n  | 'kotlin'\n  | 'latex'\n  | 'less'\n  | 'lilypond'\n  | 'liquid'\n  | 'lisp'\n  | 'livescript'\n  | 'lolcode'\n  | 'lua'\n  | 'makefile'\n  | 'markdown'\n  | 'markup-templating'\n  | 'matlab'\n  | 'mel'\n  | 'mizar'\n  | 'monkey'\n  | 'n4js'\n  | 'nasm'\n  | 'nginx'\n  | 'nim'\n  | 'nix'\n  | 'nsis'\n  | 'objectivec'\n  | 'ocaml'\n  | 'opencl'\n  | 'oz'\n  | 'parigp'\n  | 'parser'\n  | 'pascal'\n  | 'perl'\n  | 'php'\n  | 'php-extras'\n  | 'plsql'\n  | 'powershell'\n  | 'processing'\n  | 'prolog'\n  | 'properties'\n  | 'protobuf'\n  | 'pug'\n  | 'puppet'\n  | 'pure'\n  | 'python'\n  | 'q'\n  | 'qore'\n  | 'r';",
      "docstring": "",
      "path": "src/components/application/code-highlighter/constants.ts"
    }
  }
}