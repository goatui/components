{"version":3,"names":["VERSION","async","loadDompurify","loadScript","emptyStateCss","EmptyState","resizeHandler","this","vertical","elm","clientWidth","componentWillLoad","window","componentDidLoad","render","h","Host","class","src","getAssetPath","illustration","headline","description","innerHTML","sanitize","action","href","actionUrl","icon","disabled","actionDisabled","variant","actionVariant","fetchIcon","url","result","localStorage","getItem","res","fetch","method","mode","credentials","text","setItem","svgCss","Svg","fetchSvg","name","svg","handleNameChange","newValue","getSize","size","convertToDom","svgHtmlString","tagName","setAttribute","outerHTML","parser","DOMParser","doc","parseFromString","documentElement"],"sources":["src/3d-party/dompurify/index.ts","src/components/data-display/empty-state/empty-state.scss?tag=goat-empty-state&encapsulation=shadow","src/components/data-display/empty-state/empty-state.tsx","src/components/data-display/svg/datasource.ts","src/components/data-display/svg/svg.scss?tag=goat-svg&encapsulation=shadow","src/components/data-display/svg/svg.tsx"],"sourcesContent":["import {loadScript} from '../../utils/utils';\n\nconst VERSION = '3.0.5';\n\nexport async function loadDompurify() {\n  // @ts-ignore\n  await loadScript(`https://cdn.jsdelivr.net/npm/dompurify@${VERSION}/dist/purify.min.js`);\n}\n","@import \"../../../globalStyles/commons\";\r\n\r\n:host {\r\n  display: block;\r\n}\r\n\r\n.empty-state {\r\n  display: flex;\r\n  padding: v(--spacing-03);\r\n  justify-content: center;\r\n  gap: v(--spacing-08);\r\n  height: 100%;\r\n  align-items: center;\r\n  max-width: v(--container-lg);\r\n  margin: auto;\r\n}\r\n\r\n.illustration {\r\n  height: 100%;\r\n  display: flex;\r\n\r\n  svg {\r\n    height: 100%;\r\n  }\r\n\r\n  --empty-state-outline: #{v(--color-brand-primary)};\r\n  --empty-state-bg-primary: #{v(--color-brand-secondary)};\r\n  --empty-state-bg-secondary: #{v(--color-brand-secondary-40)};\r\n  --empty-state-bg-tertiary: #{v(--color-brand-secondary-30)};\r\n\r\n  --empty-state-text: #{v(--text-primary)};\r\n  --empty-state-bg-surface: #{v(--background)};\r\n\r\n  --empty-state-green: #{v(--color-success-50)};\r\n}\r\n\r\n:host-context([data-theme=\"dark\"]) {\r\n  .illustration {\r\n    --empty-state-bg-secondary: #{v(--color-brand-secondary-50)};\r\n    --empty-state-bg-tertiary: #{v(--color-brand-secondary-90)};\r\n  }\r\n}\r\n\r\n\r\n.content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n\r\n  .title {\r\n    @include font-style(text-md);\r\n    font-weight: v(--font-weight-semi-bold);\r\n    margin-bottom: v(--spacing-02);\r\n    color: var(--text-color, v(--text-primary))\r\n  }\r\n\r\n  .description {\r\n    @include font-style(text-sm);\r\n    margin-bottom: v(--spacing-04);\r\n    color: var(--text-color, v(--text-secondary))\r\n  }\r\n}\r\n\r\n:host(.content-center) .content {\r\n  align-items: center;\r\n}\r\n\r\n.empty-state:not(.vertical) {\r\n\r\n  .illustration {\r\n    width: 50%;\r\n  }\r\n\r\n  .content {\r\n    width: 50%;\r\n  }\r\n}\r\n\r\n\r\n.empty-state.vertical {\r\n  flex-direction: column;\r\n  gap: v(--spacing-05);\r\n\r\n  .illustration {\r\n    height: auto;\r\n    width: 100%;\r\n    justify-content: center;\r\n  }\r\n}\r\n\r\n","import { Component, ComponentInterface, Element, getAssetPath, h, Host, Listen, Prop, State } from '@stencil/core';\r\nimport {loadDompurify} from \"../../../3d-party/dompurify\";\r\n\r\n/**\r\n * @name Empty State\r\n * @description A message that displays when there is no information to display.\r\n * @category Data Display\r\n * @example <goat-empty-state class=\"content-center\" headline=\"Empty list\" description=\"Nothing to display\">\r\n * </goat-empty-state>\r\n */\r\n@Component({\r\n  tag: 'goat-empty-state',\r\n  styleUrl: 'empty-state.scss',\r\n  shadow: true,\r\n})\r\nexport class EmptyState implements ComponentInterface {\r\n\r\n  @Element() elm!: HTMLElement;\r\n\r\n  @Prop({ reflect: true }) illustration: 'no-document' = 'no-document';\r\n\r\n  @Prop({ reflect: true }) headline: string;\r\n\r\n  @Prop({ reflect: true }) description: string;\r\n\r\n  @Prop({ reflect: true }) action: string;\r\n\r\n  @Prop() actionUrl: string;\r\n\r\n  @Prop() actionVariant: 'default' | 'outline' | 'ghost' | 'link' = 'default';\r\n\r\n  @Prop() actionDisabled: boolean = false;\r\n\r\n  @State() vertical: boolean = false;\r\n\r\n  @Listen('resize', { target: 'window' })\r\n  resizeHandler() {\r\n    this.vertical = this.elm.clientWidth < 768;\r\n  }\r\n\r\n  async componentWillLoad() {\r\n    if (!window['DOMPurify']) {\r\n      await loadDompurify();\r\n    }\r\n  }\r\n\r\n  componentDidLoad() {\r\n    this.resizeHandler();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <div class={{ 'empty-state': true, 'vertical': this.vertical }}>\r\n          <div class='illustration'>\r\n            <goat-svg src={getAssetPath(`./assets/images/empty-state/${this.illustration}.svg`)} />\r\n          </div>\r\n\r\n          <div class='content'>\r\n            {this.headline && <div class='title'>{this.headline}</div>}\r\n            {this.description && <div class='description' innerHTML={window['DOMPurify'].sanitize(this.description)}/>}\r\n            <div class='actions'>\r\n              {this.action &&\r\n                <goat-button\r\n                  href={this.actionUrl}\r\n                  icon={'arrow--right'}\r\n                  disabled={this.actionDisabled}\r\n                  variant={this.actionVariant}>\r\n                  {this.action}\r\n                </goat-button>}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n\r\n}\r\n","export async function fetchIcon(url) {\n  if (!url) return '';\n  let result = window.localStorage.getItem(url);\n  if (result) {\n    return result;\n  }\n  const res = await fetch(url, {\n    method: 'GET',\n    mode: 'cors',\n    credentials: 'omit',\n  });\n  result = await res.text();\n  window.localStorage.setItem(url, result);\n  return result;\n}\n","@import \"../../../globalStyles/commons\";\r\n\r\n:host {\r\n  display: inline-block;\r\n}\r\n\r\n.icon {\r\n  line-height: 0;\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n\r\n\r\n\r\n:host(:not([size])) svg {\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n\r\n:host(.inherit) .icon {\r\n  color: inherit;\r\n}\r\n","import { Component, h, Host, Prop, State, Watch } from '@stencil/core';\nimport { fetchIcon } from './datasource';\n\n/**\n * @name SVG\n * @description Render SVG content from an external source.\n * @category Data Display\n * @example <goat-svg src=\"https://icons.getbootstrap.com/assets/icons/bug.svg\" size=\"2rem\"></goat-svg>\n */\n@Component({\n  tag: 'goat-svg',\n  styleUrl: 'svg.scss',\n  shadow: true,\n})\nexport class Svg {\n\n  @Prop() src: string = '';\n\n  @State() svg: string = '';\n\n  /**\n   * The Icon size.\n   */\n  @Prop({ reflect: true }) size: string;\n\n\n  async fetchSvg(name: string) {\n    if (this.src)\n      this.svg = await fetchIcon(name);\n  }\n\n\n  @Watch('src')\n  async handleNameChange(newValue: string) {\n    this.svg = await fetchIcon(newValue);\n  }\n\n  async componentWillLoad() {\n    await this.fetchSvg(this.src);\n  }\n\n  private getSize() {\n    let size;\n    if (this.size === 'xs') size = '0.5rem';\n    else if (this.size === 'sm') size = '0.75rem';\n    else if (this.size === 'md') size = '1rem';\n    else if (this.size === 'lg') size = '1.5rem';\n    else if (this.size === 'xl') size = '1.75rem';\n    else size = this.size;\n    return size;\n  }\n\n  render() {\n    const svg = this.convertToDom(this.svg);\n    let svgHtmlString = 'No icon found';\n    if (svg.tagName === 'svg') {\n      if (this.getSize()){\n        svg.setAttribute('width', this.getSize());\n        svg.setAttribute('height', this.getSize());\n      }\n      svg.setAttribute('fill', 'currentColor');\n      svgHtmlString = svg.outerHTML;\n    }\n\n    return (\n      <Host>\n        <div innerHTML={svgHtmlString} class={{ 'icon': true }} />\n      </Host>\n    );\n  }\n\n  convertToDom(svg: string) {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(svg, 'image/svg+xml');\n    return doc.documentElement;\n  }\n\n}\n"],"mappings":"oGAEA,MAAMA,EAAU,QAETC,eAAeC,UAEdC,EAAW,0CAA0CH,uBAC7D,CCPA,MAAMI,EAAgB,mkF,MCeTC,EAAU,M,2CAIkC,c,qHAUW,U,oBAEhC,M,cAEL,K,CAG7B,aAAAC,GACEC,KAAKC,SAAWD,KAAKE,IAAIC,YAAc,G,CAGzC,uBAAMC,GACJ,IAAKC,OAAO,aAAc,OAClBV,G,EAIV,gBAAAW,GACEN,KAAKD,e,CAGP,MAAAQ,GACE,OACEC,EAACC,EAAI,KACHD,EAAA,OAAKE,MAAO,CAAE,cAAe,KAAMT,SAAYD,KAAKC,WAClDO,EAAA,OAAKE,MAAM,gBACTF,EAAA,YAAUG,IAAKC,EAAa,+BAA+BZ,KAAKa,uBAGlEL,EAAA,OAAKE,MAAM,WACRV,KAAKc,UAAYN,EAAA,OAAKE,MAAM,SAASV,KAAKc,UAC1Cd,KAAKe,aAAeP,EAAA,OAAKE,MAAM,cAAcM,UAAWX,OAAO,aAAaY,SAASjB,KAAKe,eAC3FP,EAAA,OAAKE,MAAM,WACRV,KAAKkB,QACJV,EAAA,eACEW,KAAMnB,KAAKoB,UACXC,KAAM,eACNC,SAAUtB,KAAKuB,eACfC,QAASxB,KAAKyB,eACbzB,KAAKkB,W,sCCpEjBxB,eAAegC,EAAUC,GAC9B,IAAKA,EAAK,MAAO,GACjB,IAAIC,EAASvB,OAAOwB,aAAaC,QAAQH,GACzC,GAAIC,EAAQ,CACV,OAAOA,C,CAET,MAAMG,QAAYC,MAAML,EAAK,CAC3BM,OAAQ,MACRC,KAAM,OACNC,YAAa,SAEfP,QAAeG,EAAIK,OACnB/B,OAAOwB,aAAaQ,QAAQV,EAAKC,GACjC,OAAOA,CACT,CCdA,MAAMU,EAAS,+yB,MCcFC,EAAG,M,kCAEQ,G,SAEC,G,oBAQvB,cAAMC,CAASC,GACb,GAAIzC,KAAKW,IACPX,KAAK0C,UAAYhB,EAAUe,E,CAK/B,sBAAME,CAAiBC,GACrB5C,KAAK0C,UAAYhB,EAAUkB,E,CAG7B,uBAAMxC,SACEJ,KAAKwC,SAASxC,KAAKW,I,CAGnB,OAAAkC,GACN,IAAIC,EACJ,GAAI9C,KAAK8C,OAAS,KAAMA,EAAO,cAC1B,GAAI9C,KAAK8C,OAAS,KAAMA,EAAO,eAC/B,GAAI9C,KAAK8C,OAAS,KAAMA,EAAO,YAC/B,GAAI9C,KAAK8C,OAAS,KAAMA,EAAO,cAC/B,GAAI9C,KAAK8C,OAAS,KAAMA,EAAO,eAC/BA,EAAO9C,KAAK8C,KACjB,OAAOA,C,CAGT,MAAAvC,GACE,MAAMmC,EAAM1C,KAAK+C,aAAa/C,KAAK0C,KACnC,IAAIM,EAAgB,gBACpB,GAAIN,EAAIO,UAAY,MAAO,CACzB,GAAIjD,KAAK6C,UAAU,CACjBH,EAAIQ,aAAa,QAASlD,KAAK6C,WAC/BH,EAAIQ,aAAa,SAAUlD,KAAK6C,U,CAElCH,EAAIQ,aAAa,OAAQ,gBACzBF,EAAgBN,EAAIS,S,CAGtB,OACE3C,EAACC,EAAI,KACHD,EAAA,OAAKQ,UAAWgC,EAAetC,MAAO,CAAEW,KAAQ,Q,CAKtD,YAAA0B,CAAaL,GACX,MAAMU,EAAS,IAAIC,UACnB,MAAMC,EAAMF,EAAOG,gBAAgBb,EAAK,iBACxC,OAAOY,EAAIE,e"}