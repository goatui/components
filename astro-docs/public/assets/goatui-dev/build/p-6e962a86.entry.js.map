{"version":3,"names":["headerActionCss","HeaderAction","componentWillLoad","this","slotHasContent","elm","hasChildNodes","render","h","class","color","variant","kind","icon","iconSize","href","selected","target"],"sources":["src/components/navigation/header/header-action/header-action.scss?tag=goat-header-action&encapsulation=shadow","src/components/navigation/header/header-action/header-action.tsx"],"sourcesContent":["@import \"../../../../globalStyles/commons\";\r\n\r\n:host {\r\n  display: block;\r\n}\r\n\r\n.header-action {\r\n  --button-padding: .75rem;\r\n  margin-inline-end: .5rem;\r\n}\r\n\r\n:host(:not(.simple)) .header-action {\r\n  --button-border-radius: 0;\r\n  --button-height: calc(var(--header-height) - 2px);\r\n  margin-inline-end: 0;\r\n  --button-text-color: var(--header-action-text-color, var(--color-brand-primary));\r\n}\r\n","import { Component, Element, h, Prop, State } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'goat-header-action',\r\n  styleUrl: 'header-action.scss',\r\n  shadow: true,\r\n})\r\nexport class HeaderAction {\r\n  /**\r\n   * Button size.\r\n   * Possible values are `\"sm\"`, `\"md\"`, `\"lg\"`, `\"xl\"`, `\"xxl\"`, `\"none\"`. Defaults to `\"md\"`.\r\n   */\r\n  @Prop() size: 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'none' = 'md';\r\n\r\n  /**\r\n   * Icon which will displayed on button.\r\n   * Possible values are icon names.\r\n   */\r\n  @Prop() icon: string;\r\n\r\n  @Prop() color: 'primary' | 'secondary' | 'success' | 'danger' | 'brand-primary' | 'brand-secondary' = 'brand-secondary';\r\n\r\n  @Prop() variant: 'default' | 'outline' | 'ghost' | 'link' = 'default';\r\n\r\n  /**\r\n   * Sets or retrieves the window or frame at which to target content.\r\n   */\r\n  @Prop() target: string = '_self';\r\n\r\n  @Prop() badge: string = '_self';\r\n\r\n  /**\r\n   * Hyperlink to navigate to on click.\r\n   */\r\n  @Prop() href: string;\r\n\r\n  /**\r\n   * Button selection state.\r\n   */\r\n  @Prop() selected: boolean = false;\r\n\r\n  @Element() elm!: HTMLElement;\r\n\r\n  @State() slotHasContent = false;\r\n\r\n  componentWillLoad() {\r\n    this.slotHasContent = this.elm.hasChildNodes();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <goat-button\r\n        class=\"header-action\"\r\n        color={this.color}\r\n        variant={this.variant}\r\n        kind={'simple'}\r\n        icon={this.icon}\r\n        iconSize={'1.25rem'}\r\n        href={this.href}\r\n        selected={this.selected}\r\n        target={this.target}\r\n      >\r\n        {this.slotHasContent && <slot></slot>}\r\n      </goat-button>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"kDAAA,MAAMA,EAAkB,47B,MCOXC,EAAY,M,mCAKoC,K,+BAQ2C,kB,aAE1C,U,YAKnC,Q,WAED,Q,kCAUI,M,oBAIF,K,CAE1B,iBAAAC,GACEC,KAAKC,eAAiBD,KAAKE,IAAIC,e,CAGjC,MAAAC,GACE,OACEC,EAAA,eACEC,MAAM,gBACNC,MAAOP,KAAKO,MACZC,QAASR,KAAKQ,QACdC,KAAM,SACNC,KAAMV,KAAKU,KACXC,SAAU,UACVC,KAAMZ,KAAKY,KACXC,SAAUb,KAAKa,SACfC,OAAQd,KAAKc,QAEZd,KAAKC,gBAAkBI,EAAA,a"}