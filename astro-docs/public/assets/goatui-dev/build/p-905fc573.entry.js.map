{"version":3,"names":["inputCss","Input","this","gid","getComponentIndex","inputHandler","ev","input","target","oldValue","value","goatInput","emit","goatChange","keyDownHandler","key","clearable","clearInput","blurHandler","hasFocus","goatBlur","focusHandler","goatFocus","evt","nativeElement","getComponentId","setFocus","focus","setBlur","blur","debounceChanged","debounceEvent","debounce","componentWillLoad","elm","hasAttribute","tabindex","getAttribute","undefined","removeAttribute","getAttributeNames","forEach","name","includes","configAria","startSlotHasContent","querySelector","endSlotHasContent","connectedCallback","getValue","toString","hasValue","length","renderHelper","invalid","h","class","invalidText","warn","warnText","helperText","render","type","passwordVisible","Host","inline","label","required","disabled","Object","assign","ref","placeholder","autoComplete","autocomplete","tabIndex","readOnly","readonly","onKeyDown","onInput","onBlur","onFocus","size","color","variant","icon","onClick","hideActions","kind"],"sources":["src/components/data-entry/input/input/input.scss?tag=goat-input&encapsulation=shadow","src/components/data-entry/input/input/input.tsx"],"sourcesContent":["@import \"../../common-input\";\r\n\r\n","import { Component, ComponentInterface, Element, Event, EventEmitter, h, Host, Method, Prop, State, Watch } from '@stencil/core';\r\nimport { debounceEvent, getComponentIndex } from '../../../../utils/utils';\r\n\r\n/**\r\n * @name Input\r\n * @description Enables native inputs to be used within a Form field.\r\n * @category Form Inputs\r\n * @tags input, form\r\n * @example <goat-input placeholder=\"Enter your name\"></goat-input>\r\n */\r\n@Component({\r\n  tag: 'goat-input',\r\n  styleUrl: './input.scss',\r\n  shadow: true,\r\n})\r\nexport class Input implements ComponentInterface, InputComponentInterface {\r\n  gid: string = getComponentIndex();\r\n\r\n  /**\r\n   * The input field name.\r\n   */\r\n  @Prop() name: string = `goat-input-${this.gid}`;\r\n\r\n  /**\r\n   * The input field placeholder.\r\n   */\r\n  @Prop() placeholder: string;\r\n\r\n  @Prop() label: string;\r\n\r\n  @Prop() helperText: string;\r\n\r\n  @Prop() invalid: boolean = false;\r\n\r\n  @Prop() invalidText: string;\r\n\r\n  @Prop() warn: boolean = false;\r\n\r\n  @Prop() warnText: string;\r\n\r\n  /**\r\n   * The input field value.\r\n   */\r\n  @Prop({ mutable: true }) value?: string | number | null = '';\r\n\r\n  /**\r\n   * The input field size.\r\n   * Possible values are: `\"sm\"`, `\"md\"`, `\"lg\"`. Defaults to `\"md\"`.\r\n   */\r\n  @Prop({ reflect: true }) size: 'sm' | 'md' | 'lg' = 'md';\r\n\r\n  /**\r\n   * The input state.\r\n   * Possible values are: `\"success\"`, `\"error\"`, `\"warning\"`, 'default'. Defaults to `\"default\"`.\r\n   */\r\n  @Prop({ reflect: true }) state: 'success' | 'error' | 'warning' | 'default' = 'default';\r\n\r\n  /**\r\n   * The type of control to display.\r\n   * Possible values are: `\"text\"`, `\"password\"`, `\"email\"`, `\"tel\"`. Defaults to `\"text\"`.\r\n   */\r\n  @Prop() type: 'text' | 'password' | 'email' | 'tel' = 'text';\r\n\r\n  /**\r\n   * If true, the user cannot interact with the button. Defaults to `false`.\r\n   */\r\n  @Prop({ reflect: true }) disabled: boolean = false;\r\n\r\n  @Prop({ reflect: true }) hideActions: boolean = false;\r\n\r\n  /**\r\n   * If true, the user read the value cannot modify it. Defaults to `false`.\r\n   */\r\n  @Prop({ reflect: true }) readonly: boolean = false;\r\n\r\n  /**\r\n   * If true, required icon is show. Defaults to `false`.\r\n   */\r\n  @Prop({ reflect: true }) required: boolean = false;\r\n\r\n  /**\r\n   * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.\r\n   */\r\n  @Prop() clearable = false;\r\n\r\n  /**\r\n   * Set the amount of time, in milliseconds, to wait to trigger the `goatChange` event after each keystroke.\r\n   */\r\n  @Prop() debounce = 300;\r\n\r\n  /**\r\n   * Indicates whether the value of the control can be automatically completed by the browser.\r\n   */\r\n  @Prop() autocomplete: 'on' | 'off' = 'off';\r\n\r\n  @Prop({ reflect: true, mutable: true }) configAria: any = {};\r\n\r\n  /**\r\n   * Emitted when a keyboard input occurred.\r\n   */\r\n  @Event({ eventName: 'goat:input' }) goatInput: EventEmitter;\r\n\r\n  /**\r\n   * Emitted when the value has changed.\r\n   */\r\n  @Event({ eventName: 'goat:change' }) goatChange: EventEmitter;\r\n\r\n  /**\r\n   * Emitted when the input loses focus.\r\n   */\r\n  @Event({ eventName: 'goat:blur' }) goatBlur: EventEmitter;\r\n\r\n  @Prop({ reflect: true }) inline: boolean = false;\r\n\r\n  /**\r\n   * Emitted when the input has focus.\r\n   */\r\n  @Event({ eventName: 'goat:focus' }) goatFocus: EventEmitter;\r\n\r\n  @Element() elm!: HTMLElement;\r\n  private nativeElement?: HTMLInputElement;\r\n  private tabindex?: string | number;\r\n\r\n  @State() startSlotHasContent = false;\r\n  @State() endSlotHasContent = false;\r\n  @State() hasFocus = false;\r\n  @State() passwordVisible = false;\r\n\r\n  private inputHandler = (ev: Event) => {\r\n    const input = ev.target as HTMLInputElement | null;\r\n    const oldValue = this.value;\r\n    if (input) {\r\n      this.value = input.value;\r\n    }\r\n    this.goatInput.emit(ev as KeyboardEvent);\r\n    if (oldValue !== this.value) {\r\n      this.goatChange.emit(ev as KeyboardEvent);\r\n    }\r\n  };\r\n\r\n  private keyDownHandler = (ev: KeyboardEvent) => {\r\n    if (ev.key === 'Escape' && this.clearable) {\r\n      this.clearInput(ev);\r\n    }\r\n  };\r\n\r\n  private blurHandler = (ev: FocusEvent) => {\r\n    this.hasFocus = false;\r\n    this.goatBlur.emit(ev);\r\n  };\r\n\r\n  private focusHandler = (ev: FocusEvent) => {\r\n    this.hasFocus = true;\r\n    this.goatFocus.emit(ev);\r\n  };\r\n\r\n  private clearInput = (evt: Event) => {\r\n    this.nativeElement.value = '';\r\n    this.inputHandler(evt);\r\n  };\r\n\r\n  @Method()\r\n  async getComponentId() {\r\n    return this.gid;\r\n  }\r\n\r\n  /**\r\n   * Sets focus on the native `input` in `goat-input`. Use this method instead of the global\r\n   * `input.focus()`.\r\n   */\r\n  @Method()\r\n  async setFocus() {\r\n    if (this.nativeElement) {\r\n      this.nativeElement.focus();\r\n      this.hasFocus = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets blur on the native `input` in `goat-input`. Use this method instead of the global\r\n   * `input.blur()`.\r\n   */\r\n  @Method()\r\n  async setBlur() {\r\n    if (this.nativeElement) {\r\n      this.nativeElement.blur();\r\n      this.hasFocus = false;\r\n    }\r\n  }\r\n\r\n  @Watch('debounce')\r\n  protected debounceChanged() {\r\n    this.goatChange = debounceEvent(this.goatChange, this.debounce);\r\n  }\r\n\r\n  componentWillLoad() {\r\n    // If the ion-input has a tabindex attribute we get the value\r\n    // and pass it down to the native input, then remove it from the\r\n    // goat-input to avoid causing tabbing twice on the same element\r\n    if (this.elm.hasAttribute('tabindex')) {\r\n      const tabindex = this.elm.getAttribute('tabindex');\r\n      this.tabindex = tabindex !== null ? tabindex : undefined;\r\n      this.elm.removeAttribute('tabindex');\r\n    }\r\n    this.elm.getAttributeNames().forEach((name: string) => {\r\n      if (name.includes('aria-')) {\r\n        this.configAria[name] = this.elm.getAttribute(name);\r\n        this.elm.removeAttribute(name);\r\n      }\r\n    });\r\n    this.startSlotHasContent = !!this.elm.querySelector('[slot=\"start\"]');\r\n    this.endSlotHasContent = !!this.elm.querySelector('[slot=\"end\"]');\r\n  }\r\n\r\n  connectedCallback() {\r\n    this.debounceChanged();\r\n  }\r\n\r\n  private getValue(): string {\r\n    return (this.value || '').toString();\r\n  }\r\n\r\n  private hasValue(): boolean {\r\n    return this.getValue().length > 0;\r\n  }\r\n\r\n  renderHelper() {\r\n    if (this.invalid) return <div class=\"helper invalid\">{this.invalidText}</div>;\r\n    else if (this.warn) return <div class=\"helper warn\">{this.warnText}</div>;\r\n    else if (this.helperText) return <div class=\"helper text\">{this.helperText}</div>;\r\n  }\r\n\r\n  render() {\r\n    const type = this.type === 'password' && this.passwordVisible ? 'text' : this.type;\r\n\r\n    return (\r\n      <Host has-focus={this.hasFocus} has-value={this.hasValue()} invalid={this.invalid} warn={this.warn}>\r\n        <div class={{ 'form-control': true, 'inline': this.inline }}>\r\n          {this.label && (\r\n            <label class=\"label\">\r\n              {this.required && <span class=\"required\">*</span>}\r\n              {this.label}\r\n            </label>\r\n          )}\r\n\r\n          <div class=\"field\">\r\n            <div\r\n              class={{\r\n                'input-container': true,\r\n                'disabled': this.disabled,\r\n                'has-focus': this.hasFocus,\r\n                'start-slot-has-content': this.startSlotHasContent,\r\n                'end-slot-has-content': this.endSlotHasContent,\r\n              }}\r\n            >\r\n              <div class=\"slot-container start\">\r\n                <slot name=\"start\" />\r\n              </div>\r\n\r\n              <input\r\n                class=\"input input-native\"\r\n                name={this.name}\r\n                ref={input => (this.nativeElement = input)}\r\n                type={type}\r\n                placeholder={this.placeholder}\r\n                autoComplete={this.autocomplete}\r\n                value={this.value}\r\n                tabIndex={this.tabindex}\r\n                readOnly={this.readonly}\r\n                required={this.required}\r\n                onKeyDown={this.keyDownHandler}\r\n                onInput={this.inputHandler}\r\n                onBlur={this.blurHandler}\r\n                onFocus={this.focusHandler}\r\n                disabled={this.disabled}\r\n                {...this.configAria}\r\n              />\r\n\r\n              {this.clearable && this.hasValue() && (\r\n                <goat-button class=\"clear input-action\" size={'full'} color={'secondary'} variant=\"ghost\" icon=\"close\" onClick={this.clearInput} />\r\n              )}\r\n\r\n              {this.type === 'password' && !this.hideActions && (\r\n                <goat-button\r\n                  color={'secondary'}\r\n                  kind={'simple'}\r\n                  icon={this.passwordVisible ? 'view--off' : 'view'}\r\n                  variant=\"ghost\"\r\n                  size=\"full\"\r\n                  onGoat:click={() => {\r\n                    this.passwordVisible = !this.passwordVisible;\r\n                  }}\r\n                ></goat-button>\r\n              )}\r\n\r\n              <div class=\"slot-container end\">\r\n                <slot name=\"end\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {this.renderHelper()}\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}