{"version":3,"names":["tabCss","Tab","this","gid","getComponentIndex","clickHandler","goatTabClick","emit","value","target","blurHandler","hasFocus","focusHandler","mouseDownHandler","isActive","keyDownHandler","evt","key","renderIcon","h","name","icon","size","class","windowMouseUp","windowKeyUp","setFocus","nativeElement","focus","triggerClick","click","componentWillLoad","elm","hasAttribute","tabindex","getAttribute","undefined","removeAttribute","slotHasContent","hasChildNodes","renderDisabledReason","disabled","disabledReason","id","role","render","Host","active","tab","selected","showLoader","ref","input","onBlur","onFocus","onClick","onMouseDown","onKeyDown"],"sources":["src/components/navigation/tabs/tab/tab.scss?tag=goat-tab&encapsulation=shadow","src/components/navigation/tabs/tab/tab.tsx"],"sourcesContent":["@import \"../../../../globalStyles/commons\";\r\n@import \"../common-tabs\";\r\n\r\n\r\n$border-width: 0.125;\r\n$tab-color: var(--tab-color, v(--color-primary));\r\n\r\n\r\n:host {\r\n  display: inline-block;\r\n}\r\n\r\n.tab {\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  height: 2.5rem;\r\n\r\n  .native-button {\r\n    height: 100%;\r\n    cursor: pointer;\r\n    z-index: v(--z-index-button);\r\n    background: transparent;\r\n    padding: 0;\r\n    border: none;\r\n    border-bottom: 2px solid transparent;\r\n    outline: none;\r\n\r\n    .slot-container {\r\n      display: none;\r\n    }\r\n  }\r\n\r\n  .tab-content {\r\n    display: flex;\r\n    align-items: center;\r\n    flex-direction: row;\r\n    height: 100%;\r\n    gap: v(--spacing-02);\r\n    border: 2px solid transparent;\r\n    border-bottom: 0;\r\n    padding: 0 1rem;\r\n    @include font-style(body-compact-01);\r\n  }\r\n\r\n  .tab-background {\r\n    display: block;\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    pointer-events: none;\r\n  }\r\n\r\n  &.disabled .native-button {\r\n    cursor: not-allowed;\r\n  }\r\n\r\n  &.has-content .slot-container {\r\n    display: flex;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Tab variant definitions - bottom line\r\n */\r\n.tab {\r\n\r\n  .native-button {\r\n    color: v(--text-secondary);\r\n    border-bottom-color: $tab-inactive-border-bottom;\r\n  }\r\n\r\n  .tab-background {\r\n    background: transparent;\r\n  }\r\n\r\n  .tab-content {\r\n    @include font-style(body-01);\r\n  }\r\n\r\n  &:hover {\r\n    .native-button {\r\n      color: v(--text-primary);\r\n      border-bottom-color: v(--border-strong-01);\r\n    }\r\n  }\r\n\r\n  &.selected {\r\n    .native-button {\r\n      color: v(--text-primary);\r\n      border-bottom-color: #{$tab-color};\r\n    }\r\n\r\n    .tab-content {\r\n      @include font-style(heading-compact-01);\r\n    }\r\n  }\r\n\r\n\r\n  &.has-focus:not(.active) {\r\n    .native-button {\r\n      border-bottom-color: v(--color-primary);\r\n    }\r\n\r\n    .tab-content {\r\n      border-color: v(--color-primary);\r\n    }\r\n  }\r\n\r\n  &.disabled {\r\n    .native-button {\r\n      color: v(--text-disabled);\r\n      border-bottom-color: v(--border-disabled) !important;\r\n    }\r\n\r\n    &.has-focus:not(.active) .tab-content {\r\n      border-color: transparent !important;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n  * Color Variants\r\n  */\r\n@each $color in [brand-primary, brand-secondary, primary, success, error, info, warning, secondary] {\r\n  :host(.color-#{$color}) .tab {\r\n    --tab-color: #{v(--color-#{$color})};\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  ComponentInterface,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  h,\r\n  Host,\r\n  Listen, Method,\r\n  Prop,\r\n  State,\r\n} from '@stencil/core';\r\nimport { getComponentIndex } from '../../../../utils/utils';\r\n\r\n\r\n@Component({\r\n  tag: 'goat-tab',\r\n  styleUrl: 'tab.scss',\r\n  shadow: true,\r\n})\r\nexport class Tab implements ComponentInterface {\r\n\r\n  gid: string = getComponentIndex();\r\n\r\n\r\n  /**\r\n   * Button selection state.\r\n   */\r\n  @Prop({ reflect: true }) selected: boolean = false;\r\n\r\n  /**\r\n   * If true, the user cannot interact with the button. Defaults to `false`.\r\n   */\r\n  @Prop({ reflect: true }) disabled: boolean = false;\r\n\r\n  @Prop() disabledReason: string = '';\r\n  /**\r\n   * Icon which will displayed on button.\r\n   * Possible values are bootstrap icon names.\r\n   */\r\n  @Prop() icon: string;\r\n\r\n\r\n  @Prop() label: string;\r\n  @Prop() value: string;\r\n  @Prop() target: string;\r\n\r\n  /**\r\n   * Show loader.\r\n   */\r\n  @Prop() showLoader: boolean = false;\r\n\r\n  /**\r\n   * On click of tab, a CustomEvent 'goat:tab-click' will be triggered.\r\n   */\r\n  @Event({ eventName: 'goat:tab-click' }) goatTabClick: EventEmitter;\r\n\r\n\r\n  @State() hasFocus = false;\r\n  @State() isActive = false;\r\n  @State() slotHasContent = false;\r\n  @Element() elm!: HTMLElement;\r\n  private tabindex?: string | number;\r\n  private nativeElement?: HTMLButtonElement;\r\n\r\n\r\n  @Listen('mouseup', { target: 'window' })\r\n  windowMouseUp() {\r\n    if (this.isActive)\r\n      this.isActive = false;\r\n  }\r\n\r\n  @Listen('keyup', { target: 'window' })\r\n  windowKeyUp(evt) {\r\n    if (this.isActive && (evt.key == ' '))\r\n      this.isActive = false;\r\n  }\r\n\r\n  @Method()\r\n  async setFocus() {\r\n    if (this.nativeElement) {\r\n      this.nativeElement.focus();\r\n    }\r\n  }\r\n\r\n  @Method()\r\n  async triggerClick() {\r\n    if (this.nativeElement) {\r\n      this.nativeElement.click();\r\n    }\r\n  }\r\n\r\n  private clickHandler = () => {\r\n    this.goatTabClick.emit({\r\n      value: this.value,\r\n      target: this.target,\r\n    });\r\n  };\r\n  private blurHandler = () => {\r\n    this.hasFocus = false;\r\n  };\r\n\r\n  private focusHandler = () => {\r\n    this.hasFocus = true;\r\n  };\r\n\r\n  private mouseDownHandler = () => {\r\n    this.isActive = true;\r\n  };\r\n\r\n  private keyDownHandler = (evt) => {\r\n    if (evt.key == ' ') {\r\n      this.isActive = true;\r\n      this.clickHandler();\r\n    }\r\n  };\r\n\r\n  componentWillLoad() {\r\n    // If the ion-input has a tabindex attribute we get the value\r\n    // and pass it down to the native input, then remove it from the\r\n    // goat-input to avoid causing tabbing twice on the same element\r\n    if (this.elm.hasAttribute('tabindex')) {\r\n      const tabindex = this.elm.getAttribute('tabindex');\r\n      this.tabindex = tabindex !== null ? tabindex : undefined;\r\n      this.elm.removeAttribute('tabindex');\r\n    }\r\n    this.slotHasContent = this.elm.hasChildNodes();\r\n  }\r\n\r\n  private renderDisabledReason() {\r\n    if (this.disabled && this.disabledReason)\r\n      return <div id={`disabled-reason-${this.gid}`} role='tooltip' class='sr-only'>\r\n        {this.disabledReason}\r\n      </div>;\r\n  }\r\n\r\n  render() {\r\n\r\n    return (<Host has-focus={this.hasFocus} active={this.isActive}>\r\n      <div class={{\r\n        tab: true,\r\n        'disabled': this.disabled,\r\n        'selected': this.selected,\r\n        'has-focus': this.hasFocus,\r\n        'active': this.isActive,\r\n        'has-content': this.slotHasContent,\r\n        'show-loader': this.showLoader,\r\n      }}>\r\n        <div class='tab-background' />\r\n        <button\r\n          class='native-button'\r\n          tabindex={this.tabindex}\r\n          ref={input => this.nativeElement = input}\r\n          onBlur={this.blurHandler}\r\n          onFocus={this.focusHandler}\r\n          onClick={this.clickHandler}\r\n          onMouseDown={this.mouseDownHandler}\r\n          onKeyDown={this.keyDownHandler}\r\n          disabled={this.disabled}\r\n          aria-describedby={this.disabled && this.disabledReason ? `disabled-reason-${this.gid}` : null}\r\n          aria-disabled={(this.disabled || this.showLoader) + ''}>\r\n\r\n          <div class='tab-content'>\r\n            {this.showLoader && <goat-spinner class='spinner inherit' size=\"1rem\" />}\r\n\r\n            {!this.showLoader && this.icon && this.renderIcon()}\r\n\r\n            {!this.showLoader && <div class='slot-container'>\r\n              <slot />\r\n            </div>}\r\n          </div>\r\n\r\n        </button>\r\n        {this.renderDisabledReason()}\r\n      </div>\r\n    </Host>);\r\n  }\r\n\r\n  private renderIcon = () => {\r\n    return <goat-icon name={this.icon} size=\"1rem\" class='icon inherit' />;\r\n  };\r\n\r\n}\r\n"],"mappings":"oGAAA,MAAMA,EAAS,snH,MCoBFC,EAAG,M,sEAEdC,KAAAC,IAAcC,IAsENF,KAAAG,aAAe,KACrBH,KAAKI,aAAaC,KAAK,CACrBC,MAAON,KAAKM,MACZC,OAAQP,KAAKO,QACb,EAEIP,KAAAQ,YAAc,KACpBR,KAAKS,SAAW,KAAK,EAGfT,KAAAU,aAAe,KACrBV,KAAKS,SAAW,IAAI,EAGdT,KAAAW,iBAAmB,KACzBX,KAAKY,SAAW,IAAI,EAGdZ,KAAAa,eAAkBC,IACxB,GAAIA,EAAIC,KAAO,IAAK,CAClBf,KAAKY,SAAW,KAChBZ,KAAKG,c,GAiEDH,KAAAgB,WAAa,IACZC,EAAA,aAAWC,KAAMlB,KAAKmB,KAAMC,KAAK,OAAOC,MAAM,iB,cAvJV,M,cAKA,M,oBAEZ,G,oGAeH,M,cAQV,M,cACA,M,oBACM,K,CAO1B,aAAAC,GACE,GAAItB,KAAKY,SACPZ,KAAKY,SAAW,K,CAIpB,WAAAW,CAAYT,GACV,GAAId,KAAKY,UAAaE,EAAIC,KAAO,IAC/Bf,KAAKY,SAAW,K,CAIpB,cAAMY,GACJ,GAAIxB,KAAKyB,cAAe,CACtBzB,KAAKyB,cAAcC,O,EAKvB,kBAAMC,GACJ,GAAI3B,KAAKyB,cAAe,CACtBzB,KAAKyB,cAAcG,O,EA6BvB,iBAAAC,GAIE,GAAI7B,KAAK8B,IAAIC,aAAa,YAAa,CACrC,MAAMC,EAAWhC,KAAK8B,IAAIG,aAAa,YACvCjC,KAAKgC,SAAWA,IAAa,KAAOA,EAAWE,UAC/ClC,KAAK8B,IAAIK,gBAAgB,W,CAE3BnC,KAAKoC,eAAiBpC,KAAK8B,IAAIO,e,CAGzB,oBAAAC,GACN,GAAItC,KAAKuC,UAAYvC,KAAKwC,eACxB,OAAOvB,EAAA,OAAKwB,GAAI,mBAAmBzC,KAAKC,MAAOyC,KAAK,UAAUrB,MAAM,WACjErB,KAAKwC,e,CAIZ,MAAAG,GAEE,OAAQ1B,EAAC2B,EAAI,aAAY5C,KAAKS,SAAUoC,OAAQ7C,KAAKY,UACnDK,EAAA,OAAKI,MAAO,CACVyB,IAAK,KACLP,SAAYvC,KAAKuC,SACjBQ,SAAY/C,KAAK+C,SACjB,YAAa/C,KAAKS,SAClBoC,OAAU7C,KAAKY,SACf,cAAeZ,KAAKoC,eACpB,cAAepC,KAAKgD,aAEpB/B,EAAA,OAAKI,MAAM,mBACXJ,EAAA,UACEI,MAAM,gBACNW,SAAUhC,KAAKgC,SACfiB,IAAKC,GAASlD,KAAKyB,cAAgByB,EACnCC,OAAQnD,KAAKQ,YACb4C,QAASpD,KAAKU,aACd2C,QAASrD,KAAKG,aACdmD,YAAatD,KAAKW,iBAClB4C,UAAWvD,KAAKa,eAChB0B,SAAUvC,KAAKuC,SAAQ,mBACLvC,KAAKuC,UAAYvC,KAAKwC,eAAiB,mBAAmBxC,KAAKC,MAAQ,KAAI,iBAC7ED,KAAKuC,UAAYvC,KAAKgD,YAAc,IAEpD/B,EAAA,OAAKI,MAAM,eACRrB,KAAKgD,YAAc/B,EAAA,gBAAcI,MAAM,kBAAkBD,KAAK,UAE7DpB,KAAKgD,YAAchD,KAAKmB,MAAQnB,KAAKgB,cAErChB,KAAKgD,YAAc/B,EAAA,OAAKI,MAAM,kBAC9BJ,EAAA,gBAKLjB,KAAKsC,wB"}