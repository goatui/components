{"version":3,"names":["textareaCss","Textarea","this","gid","getComponentIndex","inputHandler","ev","input","target","value","goatInput","emit","goatChange","blurHandler","hasFocus","goatBlur","focusHandler","goatFocus","clearInput","evt","nativeElement","keyDownHandler","key","clearable","setFocus","focus","setBlur","blur","getComponentId","debounceChanged","debounceEvent","debounce","getValue","toString","hasValue","length","componentWillLoad","elm","hasAttribute","tabindex","getAttribute","undefined","removeAttribute","getAttributeNames","forEach","name","includes","configAria","endSlotHasContent","querySelector","connectedCallback","renderHelper","invalid","h","class","invalidText","warn","warnText","helperText","render","Host","inline","label","required","textarea","disabled","readonly","Object","assign","rows","ref","placeholder","onKeyDown","onInput","onBlur","onFocus","onClick"],"sources":["src/components/data-entry/textarea/textarea.scss?tag=goat-textarea&encapsulation=shadow","src/components/data-entry/textarea/textarea.tsx"],"sourcesContent":["@import \"../common-input\";\r\n\r\n\r\n.textarea {\r\n  height: 100%;\r\n  align-items: flex-start;\r\n\r\n  .input-native {\r\n    height: 100%;\r\n    min-height: 2.5rem;\r\n    resize: vertical;\r\n    padding: v(--spacing-05);\r\n  }\r\n}\r\n\r\n:host([size=md]) .input-container {\r\n  height: 100%;\r\n  min-height: 2.5rem;\r\n}\r\n\r\n\r\n","import { Component, ComponentInterface, Element, Event, EventEmitter, h, Host, Method, Prop, State, Watch } from '@stencil/core';\r\nimport { debounceEvent, getComponentIndex } from '../../../utils/utils';\r\n\r\n/**\r\n * @name Textarea\r\n * @description Enables native inputs to be used within a Form field.\r\n * @category Form Inputs\r\n * @tags input, form\r\n * @example <goat-textarea placeholder=\"Enter some description over here\"></goat-textarea>\r\n */\r\n@Component({\r\n  tag: 'goat-textarea',\r\n  styleUrl: './textarea.scss',\r\n  shadow: true,\r\n})\r\nexport class Textarea implements ComponentInterface, InputComponentInterface {\r\n  gid: string = getComponentIndex();\r\n\r\n  /**\r\n   * The input field name.\r\n   */\r\n  @Prop() name: string = `goat-input-${this.gid}`;\r\n\r\n  /**\r\n   * The input field placeholder.\r\n   */\r\n  @Prop() placeholder: string;\r\n\r\n  @Prop() label: string;\r\n\r\n  @Prop() helperText: string;\r\n\r\n  @Prop() invalid: boolean = false;\r\n\r\n  @Prop() invalidText: string;\r\n\r\n  @Prop() warn: boolean = false;\r\n\r\n  @Prop() warnText: string;\r\n\r\n  @Prop({ reflect: true }) inline: boolean = false;\r\n\r\n  /**\r\n   * The input field value.\r\n   */\r\n  @Prop({ mutable: true }) value: string;\r\n\r\n  /**\r\n   * If true, the user cannot interact with the button. Defaults to `false`.\r\n   */\r\n  @Prop({ reflect: true }) disabled: boolean = false;\r\n\r\n  /**\r\n   * If true, the user read the value cannot modify it. Defaults to `false`.\r\n   */\r\n  @Prop({ reflect: true }) readonly: boolean = false;\r\n\r\n  /**\r\n   * The input state.\r\n   * Possible values are: `\"success\"`, `\"error\"`, `\"warning\"`, 'default'. Defaults to `\"default\"`.\r\n   */\r\n  @Prop({ reflect: true }) state: 'success' | 'error' | 'warning' | 'default' = 'default';\r\n\r\n  /**\r\n   * If true, required icon is show. Defaults to `false`.\r\n   */\r\n  @Prop() required: boolean = false;\r\n\r\n  /**\r\n   * Set the amount of time, in milliseconds, to wait to trigger the `goat:change` event after each keystroke.\r\n   */\r\n  @Prop() debounce = 300;\r\n\r\n  /**\r\n   * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.\r\n   */\r\n  @Prop() clearable = false;\r\n\r\n  @Prop({ reflect: true, mutable: true }) configAria: any = {};\r\n\r\n  /**\r\n   * Emitted when a keyboard input occurred.\r\n   */\r\n  @Event({ eventName: 'goat:input' }) goatInput: EventEmitter;\r\n\r\n  /**\r\n   * Emitted when the value has changed..\r\n   */\r\n  @Event({ eventName: 'goat:change' }) goatChange: EventEmitter;\r\n\r\n  /**\r\n   * Emitted when the input loses focus.\r\n   */\r\n  @Event({ eventName: 'goat:blur' }) goatBlur: EventEmitter;\r\n\r\n  /**\r\n   * Emitted when the input has focus.\r\n   */\r\n  @Event({ eventName: 'goat:focus' }) goatFocus: EventEmitter;\r\n\r\n  /**\r\n   * Emitted when the action button is clicked.\r\n   */\r\n  @Event({ eventName: 'goat:action-click' }) goatActionClick: EventEmitter;\r\n\r\n  /**\r\n   * Sets focus on the native `textarea` in `goat-textarea`. Use this method instead of the global\r\n   * `textarea.focus()`.\r\n   */\r\n  @Method()\r\n  async setFocus() {\r\n    if (this.nativeElement) {\r\n      this.nativeElement.focus();\r\n      this.hasFocus = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets blur on the native `textarea` in `goat-textarea`. Use this method instead of the global\r\n   * `textarea.blur()`.\r\n   */\r\n  @Method()\r\n  async setBlur() {\r\n    if (this.nativeElement) {\r\n      this.nativeElement.blur();\r\n      this.hasFocus = false;\r\n    }\r\n  }\r\n\r\n  @Method()\r\n  async getComponentId() {\r\n    return this.gid;\r\n  }\r\n\r\n  @Watch('debounce')\r\n  protected debounceChanged() {\r\n    this.goatChange = debounceEvent(this.goatChange, this.debounce);\r\n  }\r\n\r\n  @Element() elm!: HTMLElement;\r\n  private nativeElement?: HTMLTextAreaElement;\r\n  private tabindex?: string | number;\r\n  @State() hasFocus = false;\r\n  @State() endSlotHasContent = false;\r\n\r\n  private inputHandler = (ev: Event) => {\r\n    const input = ev.target as HTMLInputElement | null;\r\n    if (input) {\r\n      this.value = input.value || '';\r\n    }\r\n    this.goatInput.emit(ev as KeyboardEvent);\r\n    this.goatChange.emit(ev as KeyboardEvent);\r\n  };\r\n\r\n  private blurHandler = (ev: FocusEvent) => {\r\n    this.hasFocus = false;\r\n    this.goatBlur.emit(ev);\r\n  };\r\n\r\n  private focusHandler = (ev: FocusEvent) => {\r\n    this.hasFocus = true;\r\n    this.goatFocus.emit(ev);\r\n  };\r\n\r\n  private getValue(): string {\r\n    return (this.value || '').toString();\r\n  }\r\n\r\n  private hasValue(): boolean {\r\n    return this.getValue().length > 0;\r\n  }\r\n\r\n  private clearInput = (evt: Event) => {\r\n    this.nativeElement.value = '';\r\n    this.inputHandler(evt);\r\n  };\r\n\r\n  private keyDownHandler = (ev: KeyboardEvent) => {\r\n    if (ev.key === 'Escape' && this.clearable) {\r\n      this.clearInput(ev);\r\n    }\r\n  };\r\n\r\n  componentWillLoad() {\r\n    // If the ion-input has a tabindex attribute we get the value\r\n    // and pass it down to the native input, then remove it from the\r\n    // ion-input to avoid causing tabbing twice on the same element\r\n    if (this.elm.hasAttribute('tabindex')) {\r\n      const tabindex = this.elm.getAttribute('tabindex');\r\n      this.tabindex = tabindex !== null ? tabindex : undefined;\r\n      this.elm.removeAttribute('tabindex');\r\n    }\r\n    this.elm.getAttributeNames().forEach((name: string) => {\r\n      if (name.includes('aria-')) {\r\n        this.configAria[name] = this.elm.getAttribute(name);\r\n        this.elm.removeAttribute(name);\r\n      }\r\n    });\r\n    this.endSlotHasContent = !!this.elm.querySelector('[slot=\"end\"]');\r\n  }\r\n\r\n  connectedCallback() {\r\n    this.debounceChanged();\r\n  }\r\n\r\n  renderHelper() {\r\n    if (this.invalid) return <div class=\"helper invalid\">{this.invalidText}</div>;\r\n    else if (this.warn) return <div class=\"helper warn\">{this.warnText}</div>;\r\n    else if (this.helperText) return <div class=\"helper text\">{this.helperText}</div>;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host has-focus={this.hasFocus} has-value={this.hasValue()}>\r\n        <div class={{ 'form-control': true, 'inline': this.inline }}>\r\n          {this.label && (\r\n            <label class=\"label\">\r\n              {this.required && <span class=\"required\">*</span>}\r\n              {this.label}\r\n            </label>\r\n          )}\r\n\r\n          <div class=\"field\">\r\n            <div\r\n              class={{\r\n                'input-container': true,\r\n                'textarea': true,\r\n                'disabled': this.disabled,\r\n                'readonly': this.readonly,\r\n                'has-focus': this.hasFocus,\r\n                'end-slot-has-content': this.endSlotHasContent,\r\n              }}\r\n            >\r\n              <textarea\r\n                rows={4}\r\n                ref={input => (this.nativeElement = input)}\r\n                required={this.required}\r\n                class=\"input input-native\"\r\n                name={this.name}\r\n                placeholder={this.placeholder}\r\n                readonly={this.readonly}\r\n                value={this.value}\r\n                tabindex={this.tabindex}\r\n                onKeyDown={this.keyDownHandler}\r\n                onInput={this.inputHandler}\r\n                onBlur={this.blurHandler}\r\n                onFocus={this.focusHandler}\r\n                disabled={this.disabled}\r\n                {...this.configAria}\r\n              />\r\n\r\n              {this.clearable && this.hasValue() && <goat-icon class=\"clear inherit input-action\" name=\"close\" onClick={this.clearInput} />}\r\n\r\n              <div class=\"slot-container end\">\r\n                <slot name=\"end\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {this.renderHelper()}\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"2GAAA,MAAMA,EAAc,ivL,MCePC,EAAQ,M,oOACnBC,KAAAC,IAAcC,IAiINF,KAAAG,aAAgBC,IACtB,MAAMC,EAAQD,EAAGE,OACjB,GAAID,EAAO,CACTL,KAAKO,MAAQF,EAAME,OAAS,E,CAE9BP,KAAKQ,UAAUC,KAAKL,GACpBJ,KAAKU,WAAWD,KAAKL,EAAoB,EAGnCJ,KAAAW,YAAeP,IACrBJ,KAAKY,SAAW,MAChBZ,KAAKa,SAASJ,KAAKL,EAAG,EAGhBJ,KAAAc,aAAgBV,IACtBJ,KAAKY,SAAW,KAChBZ,KAAKe,UAAUN,KAAKL,EAAG,EAWjBJ,KAAAgB,WAAcC,IACpBjB,KAAKkB,cAAcX,MAAQ,GAC3BP,KAAKG,aAAac,EAAI,EAGhBjB,KAAAmB,eAAkBf,IACxB,GAAIA,EAAGgB,MAAQ,UAAYpB,KAAKqB,UAAW,CACzCrB,KAAKgB,WAAWZ,E,aA9JG,cAAcJ,KAAKC,M,uFAWf,M,qCAIH,M,oCAImB,M,mCAUE,M,cAKA,M,WAMiC,U,cAKlD,M,cAKT,I,eAKC,M,gBAEsC,G,cAgEtC,M,uBACS,K,CAjC7B,cAAMqB,GACJ,GAAItB,KAAKkB,cAAe,CACtBlB,KAAKkB,cAAcK,QACnBvB,KAAKY,SAAW,I,EASpB,aAAMY,GACJ,GAAIxB,KAAKkB,cAAe,CACtBlB,KAAKkB,cAAcO,OACnBzB,KAAKY,SAAW,K,EAKpB,oBAAMc,GACJ,OAAO1B,KAAKC,G,CAIJ,eAAA0B,GACR3B,KAAKU,WAAakB,EAAc5B,KAAKU,WAAYV,KAAK6B,S,CA4BhD,QAAAC,GACN,OAAQ9B,KAAKO,OAAS,IAAIwB,U,CAGpB,QAAAC,GACN,OAAOhC,KAAK8B,WAAWG,OAAS,C,CAclC,iBAAAC,GAIE,GAAIlC,KAAKmC,IAAIC,aAAa,YAAa,CACrC,MAAMC,EAAWrC,KAAKmC,IAAIG,aAAa,YACvCtC,KAAKqC,SAAWA,IAAa,KAAOA,EAAWE,UAC/CvC,KAAKmC,IAAIK,gBAAgB,W,CAE3BxC,KAAKmC,IAAIM,oBAAoBC,SAASC,IACpC,GAAIA,EAAKC,SAAS,SAAU,CAC1B5C,KAAK6C,WAAWF,GAAQ3C,KAAKmC,IAAIG,aAAaK,GAC9C3C,KAAKmC,IAAIK,gBAAgBG,E,KAG7B3C,KAAK8C,oBAAsB9C,KAAKmC,IAAIY,cAAc,e,CAGpD,iBAAAC,GACEhD,KAAK2B,iB,CAGP,YAAAsB,GACE,GAAIjD,KAAKkD,QAAS,OAAOC,EAAA,OAAKC,MAAM,kBAAkBpD,KAAKqD,kBACtD,GAAIrD,KAAKsD,KAAM,OAAOH,EAAA,OAAKC,MAAM,eAAepD,KAAKuD,eACrD,GAAIvD,KAAKwD,WAAY,OAAOL,EAAA,OAAKC,MAAM,eAAepD,KAAKwD,W,CAGlE,MAAAC,GACE,OACEN,EAACO,EAAI,aAAY1D,KAAKY,SAAQ,YAAaZ,KAAKgC,YAC9CmB,EAAA,OAAKC,MAAO,CAAE,eAAgB,KAAMO,OAAU3D,KAAK2D,SAChD3D,KAAK4D,OACJT,EAAA,SAAOC,MAAM,SACVpD,KAAK6D,UAAYV,EAAA,QAAMC,MAAM,YAAU,KACvCpD,KAAK4D,OAIVT,EAAA,OAAKC,MAAM,SACTD,EAAA,OACEC,MAAO,CACL,kBAAmB,KACnBU,SAAY,KACZC,SAAY/D,KAAK+D,SACjBC,SAAYhE,KAAKgE,SACjB,YAAahE,KAAKY,SAClB,uBAAwBZ,KAAK8C,oBAG/BK,EAAA,WAAAc,OAAAC,OAAA,CACEC,KAAM,EACNC,IAAK/D,GAAUL,KAAKkB,cAAgBb,EACpCwD,SAAU7D,KAAK6D,SACfT,MAAM,qBACNT,KAAM3C,KAAK2C,KACX0B,YAAarE,KAAKqE,YAClBL,SAAUhE,KAAKgE,SACfzD,MAAOP,KAAKO,MACZ8B,SAAUrC,KAAKqC,SACfiC,UAAWtE,KAAKmB,eAChBoD,QAASvE,KAAKG,aACdqE,OAAQxE,KAAKW,YACb8D,QAASzE,KAAKc,aACdiD,SAAU/D,KAAK+D,UACX/D,KAAK6C,aAGV7C,KAAKqB,WAAarB,KAAKgC,YAAcmB,EAAA,aAAWC,MAAM,6BAA6BT,KAAK,QAAQ+B,QAAS1E,KAAKgB,aAE/GmC,EAAA,OAAKC,MAAM,sBACTD,EAAA,QAAMR,KAAK,WAIhB3C,KAAKiD,gB"}