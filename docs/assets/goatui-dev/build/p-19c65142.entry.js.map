{"version":3,"sources":["src/components/navigation/link/link.scss?tag=goat-link&encapsulation=shadow","src/components/navigation/link/link.tsx"],"names":["linkCss","Link","[object Object]","hostRef","this","gid","getComponentIndex","hasFocus","isActive","tabindex","blurHandler","focusHandler","mouseDownHandler","keyDownHandler","evt","key","nativeInput","click","elm","hasAttribute","getAttribute","undefined","removeAttribute","h","Host","has-focus","active","class","link","href","target","ref","input","onBlur","onFocus","onMouseDown","onKeyDown"],"mappings":"6FAAA,MAAMA,EAAU,+gDCaHC,EAAI,MALjBC,YAAAC,aAOEC,KAAAC,IAAcC,IAaLF,KAAAG,SAAW,MACXH,KAAAI,SAAW,MAGZJ,KAAAK,SAA6B,EAsB7BL,KAAAM,YAAc,KACpBN,KAAKG,SAAW,OAGVH,KAAAO,aAAe,KACrBP,KAAKG,SAAW,MAGVH,KAAAQ,iBAAmB,KACzBR,KAAKI,SAAW,MAGVJ,KAAAS,eAAkBC,IACxB,GAAIA,EAAIC,KAAO,SAAWD,EAAIC,KAAO,IAAK,CACxCX,KAAKI,SAAW,OAhCpBN,gBACE,GAAIE,KAAKI,SACPJ,KAAKI,SAAW,MAIpBN,YAAYY,GACV,GAAIV,KAAKI,WAAaM,EAAIC,KAAO,SAAWD,EAAIC,KAAO,KACrDX,KAAKI,SAAW,MAIpBN,qBACE,GAAIE,KAAKY,YAAa,CACpBZ,KAAKY,YAAYC,SAsBrBf,oBAIE,GAAIE,KAAKc,IAAIC,aAAa,YAAa,CACrC,MAAMV,EAAWL,KAAKc,IAAIE,aAAa,YACvChB,KAAKK,SAAWA,IAAa,KAAOA,EAAWY,UAC/CjB,KAAKc,IAAII,gBAAgB,aAK7BpB,SAEE,OAAQqB,EAACC,EAAI,CAAAC,YAAYrB,KAAKG,SAAUmB,OAAQtB,KAAKI,UACnDe,EAAA,IAAA,CAAGI,MAAO,CACRC,KAAQ,KACRH,YAAarB,KAAKG,SAClBmB,OAAUtB,KAAKI,UAEdqB,KAAMzB,KAAKyB,KACXC,OAAQ1B,KAAK0B,OACbC,IAAKC,GAAS5B,KAAKY,YAAcgB,EACjCvB,SAAUL,KAAKK,SACfwB,OAAQ7B,KAAKM,YACbwB,QAAS9B,KAAKO,aACdwB,YAAa/B,KAAKQ,iBAClBwB,UAAWhC,KAAKS,gBAEjBU,EAAA,OAAA","sourcesContent":["@import \"../../../globalStyles/commons\";\r\n\r\n\r\n:host {\r\n  display: inline-block;\r\n}\r\n\r\n.link {\r\n\r\n  border-radius: v(--border-radius);\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: row;\r\n  cursor: pointer;\r\n  text-decoration: var(--link-decoration, none);\r\n\r\n  color: var(--link-color, v(--link-01));\r\n\r\n  &:hover {\r\n    color: var(--link-color-hover, v(--hover-primary-text));\r\n    text-decoration: var(--link-decoration-hover, underline);\r\n  }\r\n\r\n  &:visited {\r\n    color: var(--link-color-visited, v(--visited-link));\r\n  }\r\n\r\n  &.active {\r\n    color: var(--link-color-active, v(--text-primary));\r\n  }\r\n\r\n\r\n}\r\n\r\n:host(.no-style) .link {\r\n  color: inherit !important;\r\n  text-decoration: none !important;\r\n}\r\n\r\n:host(.no-decoration) .link {\r\n  text-decoration: none !important;\r\n}\r\n\r\n:host(.inline) .link {\r\n  text-decoration: var(--link-decoration, underline);\r\n}\r\n\r\n.link.has-focus:not(.active) {\r\n  text-decoration: none;\r\n  @include focus-ring();\r\n}\r\n","import { Component, ComponentInterface, Element, h, Host, Listen, Method, Prop, State } from '@stencil/core';\r\nimport { getComponentIndex } from '../../../utils/utils';\r\n\r\n/**\r\n * @name Link\r\n * @description Links allow users to click their way from page to page.\r\n * @example <goat-link>Link</goat-link>\r\n */\r\n@Component({\r\n  tag: 'goat-link',\r\n  styleUrl: 'link.scss',\r\n  shadow: true,\r\n})\r\nexport class Link implements ComponentInterface {\r\n\r\n  gid: string = getComponentIndex();\r\n\r\n  /**\r\n   * Hyperlink to navigate to on click.\r\n   */\r\n  @Prop() href: string;\r\n\r\n  /**\r\n   * Sets or retrieves the window or frame at which to target content.\r\n   */\r\n  @Prop() target: string;\r\n\r\n\r\n  @State() hasFocus = false;\r\n  @State() isActive = false;\r\n\r\n  @Element() elm!: HTMLElement;\r\n  private tabindex?: string | number = 1;\r\n  private nativeInput?: HTMLAnchorElement;\r\n\r\n  @Listen('mouseup', { target: 'window' })\r\n  windowMouseUp() {\r\n    if (this.isActive)\r\n      this.isActive = false;\r\n  }\r\n\r\n  @Listen('keyup', { target: 'window' })\r\n  windowKeyUp(evt) {\r\n    if (this.isActive && (evt.key == 'Enter' || evt.key == ' '))\r\n      this.isActive = false;\r\n  }\r\n\r\n  @Method()\r\n  async triggerClick() {\r\n    if (this.nativeInput) {\r\n      this.nativeInput.click();\r\n    }\r\n  }\r\n\r\n  private blurHandler = () => {\r\n    this.hasFocus = false;\r\n  };\r\n\r\n  private focusHandler = () => {\r\n    this.hasFocus = true;\r\n  };\r\n\r\n  private mouseDownHandler = () => {\r\n    this.isActive = true;\r\n  };\r\n\r\n  private keyDownHandler = (evt) => {\r\n    if (evt.key == 'Enter' || evt.key == ' ') {\r\n      this.isActive = true;\r\n    }\r\n  };\r\n\r\n  componentWillLoad() {\r\n    // If the ion-input has a tabindex attribute we get the value\r\n    // and pass it down to the native input, then remove it from the\r\n    // goat-input to avoid causing tabbing twice on the same element\r\n    if (this.elm.hasAttribute('tabindex')) {\r\n      const tabindex = this.elm.getAttribute('tabindex');\r\n      this.tabindex = tabindex !== null ? tabindex : undefined;\r\n      this.elm.removeAttribute('tabindex');\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    return (<Host has-focus={this.hasFocus} active={this.isActive}>\r\n      <a class={{\r\n        'link': true,\r\n        'has-focus': this.hasFocus,\r\n        'active': this.isActive,\r\n      }}\r\n         href={this.href}\r\n         target={this.target}\r\n         ref={input => this.nativeInput = input}\r\n         tabindex={this.tabindex}\r\n         onBlur={this.blurHandler}\r\n         onFocus={this.focusHandler}\r\n         onMouseDown={this.mouseDownHandler}\r\n         onKeyDown={this.keyDownHandler}>\r\n\r\n        <slot />\r\n\r\n      </a>\r\n    </Host>);\r\n  }\r\n\r\n}\r\n"]}