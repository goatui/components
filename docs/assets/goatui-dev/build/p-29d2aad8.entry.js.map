{"version":3,"sources":["src/components/content/notification-manager/notification-manager.scss?tag=goat-notification-manager&encapsulation=shadow","src/components/content/notification-manager/notification-manager.tsx"],"names":["notificationManagerCss","getNotificationIndex","counter","NotificationManager","[object Object]","hostRef","this","name","position","notifications","isDarkMode","evt","detail","target","procced","preventDefault","stopPropagation","notification","id","type","message","state","hide","concat","filter","n","setTimeout","title","subtitle","messageType","observeThemeChange","h","Object","assign","props","innerHTML","slot","Host","class","notification-manager","map","hidden","renderNotification"],"mappings":"oGAAA,MAAMA,EAAyB,snDCG/B,MAAMC,EAAuB,MAC3B,IAAIC,EAAU,EACd,OAAA,WACE,MAAO,GAAGA,QAHe,OAiBhBC,EAAmB,MALhCC,YAAAC,aAO2BC,KAAAC,KAAe,SAChCD,KAAAE,SAAsE,eAGrEF,KAAAG,cAAqB,GACrBH,KAAAI,WAAsBA,IAI/BN,YAAYO,GACV,IAAKA,EAAIC,OAAOC,SAAWP,KAAKC,MAAQD,KAAKC,OAAS,YAAcI,EAAIC,OAAOE,QAAS,CACtFH,EAAII,iBACJJ,EAAIK,kBACJL,EAAIC,OAAOE,QAAU,KACrB,MAAMG,EAAe,CACnBC,GAAIjB,IACJkB,KAAM,QACNC,QAAST,EAAIC,OAAOQ,QACpBC,MAAOV,EAAIC,OAAOS,MAClBC,KAAM,OAERhB,KAAKG,cAAgBH,KAAKG,cAAcc,OAAO,CAACN,IAAeO,QAAOC,IAAMA,EAAEH,OAC9EI,YAAW,KACTT,EAAaK,KAAO,KACpBhB,KAAKG,cAAgB,IAAIH,KAAKG,iBAC7B,MAKPL,mBAAmBO,GACjB,IAAKA,EAAIC,OAAOC,SAAWP,KAAKC,MAAQD,KAAKC,OAAS,YAAcI,EAAIC,OAAOE,QAAS,CACtFH,EAAII,iBACJJ,EAAIK,kBACJL,EAAIC,OAAOE,QAAU,KACrB,MAAMG,EAAe,CACnBC,GAAIjB,IACJkB,KAAM,eACNQ,MAAOhB,EAAIC,OAAOe,MAClBC,SAAUjB,EAAIC,OAAOgB,SACrBC,YAAalB,EAAIC,OAAOiB,YACxBR,MAAOV,EAAIC,OAAOS,MAClBC,KAAM,OAERhB,KAAKG,cAAgBH,KAAKG,cAAcc,OAAO,CAACN,IAAeO,QAAOC,IAAMA,EAAEH,OAC9EI,YAAW,KACTT,EAAaK,KAAO,KACpBhB,KAAKG,cAAgB,IAAIH,KAAKG,iBAC7B,MAIPL,oBACE0B,GAAmB,KACjBxB,KAAKI,WAAaA,OAItBN,mBAAmBa,GACjB,GAAIA,EAAaE,KAAM,CACrB,OAAQF,EAAaE,MACnB,IAAK,QACH,OACEY,EAAA,aAAA,CAAYb,GAAI,GAAGD,EAAaC,KAAMG,MAAOJ,EAAaI,MAAOD,QAASH,EAAaG,UAE3F,IAAK,QACH,OACEW,EAAA,aAAAC,OAAAC,OAAA,GAAgBhB,EAAaiB,QAEjC,IAAK,eACH,OACEH,EAAA,oBAAA,CAAmBb,GAAI,GAAGD,EAAaC,KAAMG,MAAOJ,EAAaI,OAC/DU,EAAA,MAAA,CAAKI,UAAWlB,EAAaU,MAAOS,KAAK,UACzCL,EAAA,MAAA,CAAKI,UAAWlB,EAAaW,SAAUQ,KAAK,cAGlD,QACE,OAAO,OAKfhC,SACE,OACE2B,EAACM,EAAI,KACHN,EAAA,MAAA,CAAKO,MAAO,CAAEC,uBAAwB,KAAMnC,CAAC,YAAYE,KAAKE,YAAa,OACxEF,KAAKG,cAAc+B,KAAKvB,GACvBc,EAAA,MAAA,CAAKO,MAAO,CAAErB,aAAgB,KAAMwB,OAAUxB,EAAaK,OACxDhB,KAAKoC,mBAAmBzB","sourcesContent":["@import \"../../../globalStyles/commons\";\r\n\r\n@keyframes reveal {\r\n  0% {\r\n    opacity: 0;\r\n    transform: translateY(1rem)\r\n  }\r\n}\r\n\r\n@keyframes hide {\r\n  100% {\r\n    opacity: 0;\r\n    transform: translateY(-1rem);\r\n    visibility: hidden;\r\n  }\r\n}\r\n\r\n\r\n:host {\r\n  display: block;\r\n  position: absolute;\r\n  z-index: v(--z-index-notification-manager);\r\n}\r\n\r\n:host([name='global']) {\r\n  position: fixed;\r\n  width: 300px;\r\n}\r\n\r\n.notification-manager {\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: v(--spacing-4);\r\n\r\n  .notification {\r\n    animation: reveal 0.5s ease-in;\r\n  }\r\n\r\n  .notification.hidden {\r\n    visibility: hidden;\r\n    opacity: 0;\r\n\r\n    transition: visibility 0s ease-out 1s, opacity 1s ease-out;\r\n  }\r\n\r\n}\r\n\r\n:host([position=\"bottom-right\"]) {\r\n  bottom: 0;\r\n  right: 0;\r\n\r\n  .notification-manager {\r\n    align-items: flex-end;\r\n  }\r\n}\r\n\r\n:host([position=\"bottom-left\"]) {\r\n  bottom: 0;\r\n  left: 0;\r\n\r\n  .notification-manager {\r\n    align-items: flex-start;\r\n  }\r\n}\r\n\r\n:host([position=\"top-left\"]) {\r\n  top: 0;\r\n  left: 0;\r\n\r\n  .notification-manager {\r\n    align-items: flex-start;\r\n  }\r\n}\r\n\r\n:host([position=\"top-right\"]) {\r\n  top: 0;\r\n  right: 0;\r\n\r\n  .notification-manager {\r\n    align-items: flex-end;\r\n  }\r\n}\r\n\r\n","import { Component, ComponentInterface, Element, h, Host, Listen, Prop, State } from '@stencil/core';\nimport { isDarkMode, observeThemeChange } from '../../../utils/utils';\n\nconst getNotificationIndex = (() => {\n  let counter = 1;\n  return (function() {\n    return `${counter++}`;\n  });\n})();\n\n/**\n * @name Notification Manager\n * @description Manages alert, toasts and notifications.\n * @img /assets/img/notification-manager.png\n */\n@Component({\n  tag: 'goat-notification-manager',\n  styleUrl: 'notification-manager.scss',\n  shadow: true,\n})\nexport class NotificationManager implements ComponentInterface {\n\n  @Prop({ reflect: true }) name: string = 'global';\n  @Prop() position: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left' = 'bottom-right';\n\n  @Element() elm!: HTMLElement;\n  @State() notifications: any = [];\n  @State() isDarkMode: boolean = isDarkMode();\n\n\n  @Listen('goat:toast', { target: 'window' })\n  listenToast(evt) {\n    if ((evt.detail.target === this.name || this.name === 'global') && !evt.detail.procced) {\n      evt.preventDefault();\n      evt.stopPropagation();\n      evt.detail.procced = true;\n      const notification = {\n        id: getNotificationIndex(),\n        type: 'toast',\n        message: evt.detail.message,\n        state: evt.detail.state,\n        hide: false,\n      };\n      this.notifications = this.notifications.concat([notification]).filter(n => !n.hide);\n      setTimeout(() => {\n        notification.hide = true;\n        this.notifications = [...this.notifications];\n      }, 5000);\n    }\n  }\n\n  @Listen('goat:notification', { target: 'window' })\n  listenNotification(evt) {\n    if ((evt.detail.target === this.name || this.name === 'global') && !evt.detail.procced) {\n      evt.preventDefault();\n      evt.stopPropagation();\n      evt.detail.procced = true;\n      const notification = {\n        id: getNotificationIndex(),\n        type: 'notification',\n        title: evt.detail.title,\n        subtitle: evt.detail.subtitle,\n        messageType: evt.detail.messageType,\n        state: evt.detail.state,\n        hide: false,\n      };\n      this.notifications = this.notifications.concat([notification]).filter(n => !n.hide);\n      setTimeout(() => {\n        notification.hide = true;\n        this.notifications = [...this.notifications];\n      }, 5000);\n    }\n  }\n\n  componentWillLoad() {\n    observeThemeChange(() => {\n      this.isDarkMode = isDarkMode();\n    });\n  }\n\n  renderNotification(notification) {\n    if (notification.type) {\n      switch (notification.type) {\n        case 'toast':\n          return (\n            <goat-toast id={`${notification.id}`} state={notification.state} message={notification.message} />\n          );\n        case 'alert':\n          return (\n            <goat-alert {...notification.props} />\n          );\n        case 'notification':\n          return (\n            <goat-notification id={`${notification.id}`} state={notification.state}>\n              <div innerHTML={notification.title} slot=\"title\"/>\n              <div innerHTML={notification.subtitle} slot=\"subtitle\"/>\n            </goat-notification>\n          );\n        default:\n          return null;\n      }\n    }\n  }\n\n  render() {\n    return (\n      <Host>\n        <div class={{ 'notification-manager': true, [`position-${this.position}`]: true }}>\n          {this.notifications.map((notification) => (\n            <div class={{ 'notification': true, 'hidden': notification.hide }}>\n              {this.renderNotification(notification)}\n            </div>\n          ))}\n        </div>\n      </Host>\n    );\n  }\n\n}\n"]}