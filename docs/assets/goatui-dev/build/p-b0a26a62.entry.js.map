{"version":3,"sources":["src/3d-party/prism/index.tsx","src/components/content/code-highlighter/code-highlighter.scss?tag=goat-code-highlighter&encapsulation=shadow","src/components/content/code-highlighter/code-highlighter.tsx"],"names":["async","loadPrism","version","loadScript","codeHighlighterCss","CodeHighlighter","[object Object]","hostRef","this","language","lineNumbers","value","compiledCode","renderPrism","window","Prism","manual","setTimeout","str","replace","elm","innerHTML","decode","trim","formatted","highlight","languages","lineNumbersWrapper","linesNum","split","length","lines","Array","join","navigator","clipboard","writeText","alert","h","Host","class","line-numbers-wrapper","line-numbers","dir","size","variant","icon","aria-label","title","onGoat:click","handleCopyClick"],"mappings":"6FAEeA,eAAeC,IAC5B,MAAMC,EAAU,eAEVC,EAAW,gDAAgDD,wCAC3DC,EAAW,gDAAgDD,gDCNnE,MAAME,EAAqB,wvVCcdC,EAAe,MAL5BC,YAAAC,aAQUC,KAAAC,SAA2jD,aAE3jDD,KAAAE,YAAuB,MAEvBF,KAAAG,MAAgB,GAEfH,KAAAI,aAAuB,GAGhCN,kBACEE,KAAKK,cAIPP,eACEE,KAAKK,cAMPP,0BACE,IAAKQ,OAAO,SAAU,OACdb,IAEN,MAAMc,EAAQD,OAAO,SACrBC,EAAMC,OAAS,MAKnBV,mBACEW,YAAW,IAAMT,KAAKK,eAAe,KAGvCP,OAAOY,GACL,OAAOA,EAAIC,QAAQ,QAAQ,KAAKA,QAAQ,QAAQ,KAG1Cb,cAEN,MAAMS,EAAQD,OAAO,SAErB,IAAIH,EAAQH,KAAKG,MACjB,IAAKA,EAAO,CACVA,EAAQH,KAAKY,IAAIC,UAEnBV,EAAQH,KAAKc,OAAOX,GACpBA,EAAQA,EAAMY,OACd,MAAMC,EAAYT,EAAMU,UAAUd,EAAOI,EAAMW,UAAUlB,KAAKC,UAAWD,KAAKC,UAC9E,IAAIkB,EAAqB,GACzB,GAAInB,KAAKE,YAAa,CACpB,MAAMkB,EAAWJ,EAAUK,MAAM,MAAMC,OACvC,MAAMC,EAAQ,IAAIC,MAAMJ,EAAW,GAAGK,KAAK,iBAC3CN,EAAqB,sDAAsDI,WAE7EvB,KAAKI,aAAeY,EAAYG,EAGlCrB,kBACEQ,OAAOoB,UAAUC,UAAUC,UAAU5B,KAAKG,OAC1C0B,MAAM,UAGR/B,SACE,OACEgC,EAACC,EAAI,KACF/B,KAAKI,cAAgB0B,EAAA,MAAA,CAAKE,MAAM,oBAC/BF,EAAA,MAAA,CAAKE,MAAM,kBACTF,EAAA,MAAA,CAAKE,MAAO,CAAEC,uBAAwB,KAAMC,eAAgBlC,KAAKE,cAC/D4B,EAAA,MAAA,CAAKK,IAAI,MAAMH,MAAM,2BAA2BnB,UAAWb,KAAKI,iBAGpE0B,EAAA,cAAA,CAAaE,MAAM,2BAA2BI,KAAK,KAAKC,QAAQ,QAAQC,KAAK,QAAOC,aAAY,YACnFC,MAAM,YAAWC,eAAezC,KAAK0C,oBAElD1C,KAAKI,cAAgB0B,EAAA,MAAA,CAAKE,MAAM,eAChCF,EAAA,eAAA,CAAcE,MAAM,YAAW","sourcesContent":["import { loadScript } from '../../utils/utils';\n\nexport default async function loadPrism() {\n  const version = '1.27.0';\n  // @ts-ignore\n  await loadScript(`https://cdnjs.cloudflare.com/ajax/libs/prism/${version}/components/prism-core.min.js`);\n  await loadScript(`https://cdnjs.cloudflare.com/ajax/libs/prism/${version}/plugins/autoloader/prism-autoloader.min.js`);\n}\n","@import \"../../../3d-party/prism/prism\";\r\n@import \"../../../3d-party/prism/prism-line-numbers\";\r\n@import \"../../../globalStyles/commons\";\r\n\r\n\r\n:host {\r\n  display: block;\r\n  height: 100%;\r\n}\r\n\r\n.code-loader {\r\n  height: 20rem;\r\n  background-color: v(--field-01);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: v(--spacing-2);\r\n}\r\n\r\n.code-highlighter {\r\n  position: relative;\r\n  height: 100%;\r\n  background-color: v(--color-brand-primary-10);\r\n  padding: v(--spacing-3);\r\n  color: v(--text-primary);\r\n\r\n  .scroll-wrapper {\r\n    height: 100%;\r\n    overflow-y: auto;\r\n    .line-numbers-wrapper {\r\n      height: 100%;\r\n      position: relative;\r\n\r\n      &.line-numbers {\r\n        margin-left: 3.8rem;\r\n      }\r\n\r\n      @include font-style(text-sm);\r\n      .highlighter {\r\n        margin: 0;\r\n        padding: 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  .copy-btn {\r\n    position: absolute;\r\n    top: v(--spacing-3);\r\n    right: v(--spacing-3);\r\n  }\r\n\r\n}\r\n\r\n\r\n:host-context([data-theme=\"dark\"]) .code-highlighter {\r\n  background-color: v(--color-brand-primary-100);\r\n}\r\n","import { Component, ComponentInterface, Element, h, Host, Prop, State, Watch } from '@stencil/core';\nimport loadPrism from '../../../3d-party/prism';\n\n\n/**\n * @name Code Highlighter\n * @description A browser based code highlighter.\n * @img /assets/img/code-highlighter.png\n */\n@Component({\n  tag: 'goat-code-highlighter',\n  styleUrl: 'code-highlighter.scss',\n  shadow: true,\n})\nexport class CodeHighlighter implements ComponentInterface {\n\n\n  @Prop() language: 'markup' | 'css' | 'clike' | 'javascript' | 'abap' | 'actionscript' | 'ada' | 'apacheconf' | 'apl' | 'applescript' | 'arduino' | 'arff' | 'asciidoc' | 'asm6502' | 'aspnet' | 'autohotkey' | 'autoit' | 'bash' | 'basic' | 'batch' | 'bison' | 'brainfuck' | 'bro' | 'c' | 'csharp' | 'cpp' | 'coffeescript' | 'clojure' | 'crystal' | 'csp' | 'css-extras' | 'd' | 'dart' | 'diff' | 'django' | 'docker' | 'eiffel' | 'elixir' | 'elm' | 'erb' | 'erlang' | 'fsharp' | 'flow' | 'fortran' | 'gedcom' | 'gherkin' | 'git' | 'glsl' | 'gml' | 'go' | 'graphql' | 'groovy' | 'haml' | 'handlebars' | 'haskell' | 'haxe' | 'http' | 'hpkp' | 'hsts' | 'ichigojam' | 'icon' | 'inform7' | 'ini' | 'io' | 'j' | 'java' | 'jolie' | 'json' | 'julia' | 'keyman' | 'kotlin' | 'latex' | 'less' | 'liquid' | 'lisp' | 'livescript' | 'lolcode' | 'lua' | 'makefile' | 'markdown' | 'markup-templating' | 'matlab' | 'mel' | 'mizar' | 'monkey' | 'n4js' | 'nasm' | 'nginx' | 'nim' | 'nix' | 'nsis' | 'objectivec' | 'ocaml' | 'opencl' | 'oz' | 'parigp' | 'parser' | 'pascal' | 'perl' | 'php' | 'php-extras' | 'plsql' | 'powershell' | 'processing' | 'prolog' | 'properties' | 'protobuf' | 'pug' | 'puppet' | 'pure' | 'python' | 'q' | 'qore' | 'r' | 'jsx' | 'tsx' | 'renpy' | 'reason' | 'rest' | 'rip' | 'roboconf' | 'ruby' | 'rust' | 'sas' | 'sass' | 'scss' | 'scala' | 'scheme' | 'smalltalk' | 'smarty' | 'sql' | 'soy' | 'stylus' | 'swift' | 'tap' | 'tcl' | 'textile' | 'tt2' | 'twig' | 'typescript' | 'vbnet' | 'velocity' | 'verilog' | 'vhdl' | 'vim' | 'visual-basic' | 'wasm' | 'wiki' | 'xeora' | 'xojo' | 'xquery' | 'yaml' = 'javascript';\n\n  @Prop() lineNumbers: boolean = false;\n\n  @Prop() value: string = '';\n\n  @State() compiledCode: string = '';\n\n  @Watch('language')\n  languageWatcher() {\n    this.renderPrism();\n  }\n\n  @Watch('lineNumbers')\n  themeWatcher() {\n    this.renderPrism();\n  }\n\n\n  @Element() elm!: HTMLElement;\n\n  async componentWillLoad() {\n    if (!window['Prism']) {\n      await loadPrism();\n      // @ts-ignore\n      const Prism = window['Prism'];\n      Prism.manual = true;\n\n    }\n  }\n\n  componentDidLoad() {\n    setTimeout(() => this.renderPrism(), 1000);\n  }\n\n  decode(str: string) {\n    return str.replace(/&lt;/g,\"<\").replace(/&gt;/g,\">\");\n  }\n\n  private renderPrism() {\n    // @ts-ignore\n    const Prism = window['Prism'];\n\n    let value = this.value;\n    if (!value) {\n      value = this.elm.innerHTML;\n    }\n    value = this.decode(value);\n    value = value.trim();\n    const formatted = Prism.highlight(value, Prism.languages[this.language], this.language);\n    let lineNumbersWrapper = '';\n    if (this.lineNumbers) {\n      const linesNum = formatted.split('\\n').length;\n      const lines = new Array(linesNum + 1).join('<span></span>');\n      lineNumbersWrapper = `<span aria-hidden='true' class='line-numbers-rows'>${lines}</span>`;\n    }\n    this.compiledCode = formatted + lineNumbersWrapper;\n  }\n\n  handleCopyClick() {\n    window.navigator.clipboard.writeText(this.value);\n    alert('copied');\n  }\n\n  render() {\n    return (\n      <Host>\n        {this.compiledCode && <div class='code-highlighter'>\n          <div class='scroll-wrapper'>\n            <div class={{ 'line-numbers-wrapper': true, 'line-numbers': this.lineNumbers }}>\n              <pre dir='ltr' class='highlighter line-numbers' innerHTML={this.compiledCode} />\n            </div>\n          </div>\n          <goat-button class='copy-btn color-secondary' size=\"sm\" variant='ghost' icon='files' aria-label='Copy code'\n                       title='Copy code' onGoat:click={this.handleCopyClick} />\n        </div>}\n        {!this.compiledCode && <div class='code-loader'>\n          <goat-spinner class=\"rainbow\"/>\n          Loading code...\n        </div>}\n      </Host>\n    );\n  }\n\n}\n"]}