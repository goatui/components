{"file":"goat-notification-manager.entry.esm.js","mappings":";;;AAAA,MAAM,sBAAsB,GAAG,qnDAAqnD;;ACGppD,MAAM,oBAAoB,GAAG,CAAC;EAC5B,IAAI,OAAO,GAAG,CAAC,CAAC;EAChB,QAAQ;IACN,OAAO,GAAG,OAAO,EAAE,EAAE,CAAC;GACvB,EAAE;AACL,CAAC,GAAG,CAAC;IAYQ,mBAAmB;EALhC;;IAO2B,SAAI,GAAW,QAAQ,CAAC;IACzC,aAAQ,GAA8D,cAAc,CAAC;IAGpF,kBAAa,GAAQ,EAAE,CAAC;IACxB,eAAU,GAAY,UAAU,EAAE,CAAC;GAiE7C;EA7DC,WAAW,CAAC,GAAG;IACb,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,KAAK,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,EAAE;MACtF,GAAG,CAAC,cAAc,EAAE,CAAC;MACrB,GAAG,CAAC,eAAe,EAAE,CAAC;MACtB,GAAG,CAAC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;MAC1B,MAAM,YAAY,GAAG;QACnB,EAAE,EAAE,oBAAoB,EAAE;QAC1B,IAAI,EAAE,OAAO;QACb,OAAO,EAAE,GAAG,CAAC,MAAM,CAAC,OAAO;QAC3B,KAAK,EAAE,GAAG,CAAC,MAAM,CAAC,KAAK;QACvB,IAAI,EAAE,KAAK;OACZ,CAAC;MACF,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;MACpF,UAAU,CAAC;QACT,YAAY,CAAC,IAAI,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,aAAa,GAAG,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC;OAC9C,EAAE,IAAI,CAAC,CAAC;KACV;GACF;EAED,iBAAiB;IACf,kBAAkB,CAAC;MACjB,IAAI,CAAC,UAAU,GAAG,UAAU,EAAE,CAAC;KAChC,CAAC,CAAC;GACJ;EAED,kBAAkB,CAAC,YAAY;IAC7B,IAAI,YAAY,CAAC,IAAI,EAAE;MACrB,QAAQ,YAAY,CAAC,IAAI;QACvB,KAAK,OAAO;UACV,QACE,kBAAY,EAAE,EAAE,GAAG,YAAY,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,YAAY,CAAC,KAAK,EAAE,OAAO,EAAE,YAAY,CAAC,OAAO,GAAI,EAClG;QACJ,KAAK,OAAO;UACV,QACE,kCAAgB,YAAY,CAAC,KAAK,EAAI,EACtC;QACJ,KAAK,cAAc;UACjB,QACE,yCAAuB,YAAY,CAAC,KAAK,EAAI,EAC7C;QACJ;UACE,OAAO,IAAI,CAAC;OACf;KACF;GACF;EAED,MAAM;IACJ,QACE,EAAC,IAAI,QACH,WAAK,KAAK,EAAE,EAAE,sBAAsB,EAAE,IAAI,EAAE,CAAC,YAAY,IAAI,CAAC,QAAQ,EAAE,GAAG,IAAI,EAAE,IAC9E,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,YAAY,MACnC,WAAK,KAAK,EAAE,EAAE,cAAc,EAAE,IAAI,EAAE,QAAQ,EAAE,YAAY,CAAC,IAAI,EAAE,IAC9D,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAClC,CACP,CAAC,CACE,CACD,EACP;GACH;;;;;;;","names":[],"sources":["./src/components/content/notification-manager/notification-manager.scss?tag=goat-notification-manager&encapsulation=shadow","./src/components/content/notification-manager/notification-manager.tsx"],"sourcesContent":["@import \"../../../globalStyles/commons\";\n\n@keyframes reveal {\n  0% {\n    opacity: 0;\n    transform: translateY(1rem)\n  }\n}\n\n@keyframes hide {\n  100% {\n    opacity: 0;\n    transform: translateY(-1rem);\n    visibility: hidden;\n  }\n}\n\n\n:host {\n  display: block;\n  position: absolute;\n  z-index: v(--z-index-notification-manager);\n}\n\n:host([name='global']) {\n  position: fixed;\n  width: 300px;\n}\n\n.notification-manager {\n\n  display: flex;\n  flex-direction: column;\n  margin: v(--spacing-4);\n\n  .notification {\n    animation: reveal 0.5s ease-in;\n  }\n\n  .notification.hidden {\n    visibility: hidden;\n    opacity: 0;\n\n    transition: visibility 0s ease-out 1s, opacity 1s ease-out;\n  }\n\n}\n\n:host([position=\"bottom-right\"]) {\n  bottom: 0;\n  right: 0;\n\n  .notification-manager {\n    align-items: flex-end;\n  }\n}\n\n:host([position=\"bottom-left\"]) {\n  bottom: 0;\n  left: 0;\n\n  .notification-manager {\n    align-items: flex-start;\n  }\n}\n\n:host([position=\"top-left\"]) {\n  top: 0;\n  left: 0;\n\n  .notification-manager {\n    align-items: flex-start;\n  }\n}\n\n:host([position=\"top-right\"]) {\n  top: 0;\n  right: 0;\n\n  .notification-manager {\n    align-items: flex-end;\n  }\n}\n\n","import { Component, ComponentInterface, Element, h, Host, Listen, Prop, State } from '@stencil/core';\nimport { isDarkMode, observeThemeChange } from '../../../utils/utils';\n\nconst getNotificationIndex = (() => {\n  let counter = 1;\n  return (function() {\n    return `${counter++}`;\n  });\n})();\n\n/**\n * @name Notification Manager\n * @description Manages alert, toasts and notifications.\n * @img /assets/img/notification-manager.png\n */\n@Component({\n  tag: 'goat-notification-manager',\n  styleUrl: 'notification-manager.scss',\n  shadow: true,\n})\nexport class NotificationManager implements ComponentInterface {\n\n  @Prop({ reflect: true }) name: string = 'global';\n  @Prop() position: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left' = 'bottom-right';\n\n  @Element() elm!: HTMLElement;\n  @State() notifications: any = [];\n  @State() isDarkMode: boolean = isDarkMode();\n\n\n  @Listen('goat:toast', { target: 'window' })\n  listenClick(evt) {\n    if ((evt.detail.target === this.name || this.name === 'global') && !evt.detail.procced) {\n      evt.preventDefault();\n      evt.stopPropagation();\n      evt.detail.procced = true;\n      const notification = {\n        id: getNotificationIndex(),\n        type: 'toast',\n        message: evt.detail.message,\n        state: evt.detail.state,\n        hide: false,\n      };\n      this.notifications = this.notifications.concat([notification]).filter(n => !n.hide);\n      setTimeout(() => {\n        notification.hide = true;\n        this.notifications = [...this.notifications];\n      }, 5000);\n    }\n  }\n\n  componentWillLoad() {\n    observeThemeChange(() => {\n      this.isDarkMode = isDarkMode();\n    });\n  }\n\n  renderNotification(notification) {\n    if (notification.type) {\n      switch (notification.type) {\n        case 'toast':\n          return (\n            <goat-toast id={`${notification.id}`} state={notification.state} message={notification.message} />\n          );\n        case 'alert':\n          return (\n            <goat-alert {...notification.props} />\n          );\n        case 'notification':\n          return (\n            <goat-notification {...notification.props} />\n          );\n        default:\n          return null;\n      }\n    }\n  }\n\n  render() {\n    return (\n      <Host>\n        <div class={{ 'notification-manager': true, [`position-${this.position}`]: true }}>\n          {this.notifications.map((notification) => (\n            <div class={{ 'notification': true, 'hidden': notification.hide }}>\n              {this.renderNotification(notification)}\n            </div>\n          ))}\n        </div>\n      </Host>\n    );\n  }\n\n}\n"],"version":3}