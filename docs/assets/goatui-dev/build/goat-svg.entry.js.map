{"file":"goat-svg.entry.esm.js","mappings":";;AAAA,MAAM,KAAK,GAA2B,EAAE,CAAC;AAEzC;AACO,eAAe,SAAS,CAAC,GAAG;EACjC,IAAI,CAAC,GAAG;IAAE,OAAO,EAAE,CAAC;EACpB,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE;IACd,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC;GACnB;EACD,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE;IAC3B,MAAM,EAAE,KAAK;IACb,IAAI,EAAE,MAAM;IACZ,WAAW,EAAE,MAAM;GACpB,CAAC,CAAC;EACH,KAAK,CAAC,GAAG,CAAC,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;EAC9B,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC;AACpB;;ACfA,MAAM,MAAM,GAAG,4vBAA4vB;;ICQ9vB,GAAG;EALhB;;IAOU,QAAG,GAAW,EAAE,CAAC;IAEhB,QAAG,GAAW,EAAE,CAAC;GA0B3B;EAxBC,MAAM,QAAQ,CAAC,IAAY;IACzB,IAAI,IAAI,CAAC,GAAG;MACV,IAAI,CAAC,GAAG,GAAG,MAAM,SAAS,CAAC,IAAI,CAAC,CAAC;GACpC;EAID,MAAM,gBAAgB,CAAC,QAAgB;IACrC,IAAI,CAAC,GAAG,GAAG,MAAM,SAAS,CAAC,QAAQ,CAAC,CAAC;GACtC;EAED,MAAM,iBAAiB;IACrB,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;GAC/B;EAGD,MAAM;IACJ,QACE,EAAC,IAAI,QACH,WAAK,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,GAAI,CAChD,EACP;GACH;;;;;;;;;","names":[],"sources":["./src/components/content/svg/datasource.ts","./src/components/content/svg/svg.scss?tag=goat-svg&encapsulation=shadow","./src/components/content/svg/svg.tsx"],"sourcesContent":["const cache: Record<string, string> = {};\n\n// TODO: prevent duplicated request when rendering multiple icons with same name simultaneously\nexport async function fetchIcon(url) {\n  if (!url) return '';\n  if (cache[url]) {\n    return cache[url];\n  }\n  const res = await fetch(url, {\n    method: 'GET',\n    mode: 'cors',\n    credentials: 'omit',\n  });\n  cache[url] = await res.text();\n  return cache[url];\n}\n","@import \"../../../globalStyles/commons\";\n\n:host {\n  display: inline-block;\n}\n\n.icon {\n  line-height: 0;\n  height: 100%;\n  width: 100%;\n}\n\nsvg {\n  height: 100%;\n  width: 100%;\n}\n\n:host(.inherit) .icon {\n  color: inherit;\n}\n","import { Component, h, Host, Prop, State, Watch } from '@stencil/core';\nimport { fetchIcon } from './datasource';\n\n@Component({\n  tag: 'goat-svg',\n  styleUrl: 'svg.scss',\n  shadow: true,\n})\nexport class Svg {\n\n  @Prop() src: string = '';\n\n  @State() svg: string = '';\n\n  async fetchSvg(name: string) {\n    if (this.src)\n      this.svg = await fetchIcon(name);\n  }\n\n\n  @Watch('src')\n  async handleNameChange(newValue: string) {\n    this.svg = await fetchIcon(newValue);\n  }\n\n  async componentWillLoad() {\n    await this.fetchSvg(this.src);\n  }\n\n\n  render() {\n    return (\n      <Host>\n        <div innerHTML={this.svg} class={{ 'icon': true }} />\n      </Host>\n    );\n  }\n\n}\n"],"version":3}