{"version":3,"sources":["src/components/form/input/input.scss?tag=goat-input&encapsulation=shadow","src/components/form/input/input.tsx"],"names":["inputCss","Input","[object Object]","hostRef","this","gid","getComponentIndex","name","value","size","state","type","disabled","readonly","required","clearable","debounce","autocomplete","configAria","startSlotHasContent","endSlotHasContent","hasFocus","inputHandler","ev","input","target","oldValue","goatInput","emit","goatChange","keyDownHandler","key","clearInput","blurHandler","goatBlur","focusHandler","goatFocus","evt","nativeInput","focus","blur","JSON","parse","debounceEvent","elm","hasAttribute","tabindex","getAttribute","undefined","removeAttribute","getAttributeNames","forEach","includes","querySelector","debounceChanged","toString","getValue","length","h","Host","has-focus","has-value","hasValue","class","input-container","start-slot-has-content","end-slot-has-content","Object","assign","ref","placeholder","onKeyDown","onInput","onBlur","onFocus","onClick","role"],"mappings":"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","sourcesContent":["@import \"../common-input\";\r\n\r\n","import {\r\n  Component,\r\n  ComponentInterface,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  h,\r\n  Host,\r\n  Method,\r\n  Prop,\r\n  State,\r\n  Watch,\r\n} from '@stencil/core';\r\nimport { debounceEvent, getComponentIndex } from '../../../utils/utils';\r\n\r\n\r\n/**\r\n * @name Input\r\n * @description Enables native inputs to be used within a Form field.\r\n * @example <goat-input placeholder=\"Enter your name\"></goat-input>\r\n */\r\n@Component({\r\n  tag: 'goat-input',\r\n  styleUrl: 'input.scss',\r\n  shadow: true,\r\n})\r\nexport class Input implements ComponentInterface, InputComponentInterface {\r\n\r\n  gid: string = getComponentIndex();\r\n\r\n  /**\r\n   * The input field name.\r\n   */\r\n  @Prop() name: string = `goat-input-${this.gid}`;\r\n\r\n  /**\r\n   * The input field placeholder.\r\n   */\r\n  @Prop() placeholder: string;\r\n\r\n  /**\r\n   * The input field value.\r\n   */\r\n  @Prop({ mutable: true }) value?: string | number | null = '';\r\n\r\n  /**\r\n   * The input field size.\r\n   * Possible values are: `\"sm\"`, `\"md\"`, `\"lg\"`. Defaults to `\"md\"`.\r\n   */\r\n  @Prop({ reflect: true }) size: 'sm' | 'md' | 'lg' = 'md';\r\n\r\n  /**\r\n   * The input state.\r\n   * Possible values are: `\"success\"`, `\"error\"`, `\"warning\"`, 'default'. Defaults to `\"default\"`.\r\n   */\r\n  @Prop({ reflect: true }) state: 'success' | 'error' | 'warning' | 'default' = 'default';\r\n\r\n  /**\r\n   * The type of control to display.\r\n   * Possible values are: `\"text\"`, `\"password\"`, `\"number\"`, `\"email\"`, `\"tel\"`. Defaults to `\"text\"`.\r\n   */\r\n  @Prop() type: ('text' | 'password' | 'number' | 'email' | 'tel') = 'text';\r\n\r\n  /**\r\n   * If true, the user cannot interact with the button. Defaults to `false`.\r\n   */\r\n  @Prop({ reflect: true }) disabled: boolean = false;\r\n\r\n  /**\r\n   * If true, the user read the value cannot modify it. Defaults to `false`.\r\n   */\r\n  @Prop({ reflect: true }) readonly : boolean = false;\r\n\r\n  /**\r\n   * If true, required icon is show. Defaults to `false`.\r\n   */\r\n  @Prop({ reflect: true }) required: boolean = false;\r\n\r\n  /**\r\n   * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.\r\n   */\r\n  @Prop() clearable = false;\r\n\r\n  /**\r\n   * Set the amount of time, in milliseconds, to wait to trigger the `goatChange` event after each keystroke.\r\n   */\r\n  @Prop() debounce = 300;\r\n\r\n  /**\r\n   * Indicates whether the value of the control can be automatically completed by the browser.\r\n   */\r\n  @Prop() autocomplete: 'on' | 'off' = 'off';\r\n\r\n  @Prop({ reflect: true, mutable: true }) configAria: any = {};\r\n\r\n\r\n  /**\r\n   * Emitted when a keyboard input occurred.\r\n   */\r\n  @Event({ eventName: 'goat:input' }) goatInput: EventEmitter;\r\n\r\n  /**\r\n   * Emitted when the value has changed.\r\n   */\r\n  @Event({ eventName: 'goat:change' }) goatChange: EventEmitter;\r\n\r\n  /**\r\n   * Emitted when the input loses focus.\r\n   */\r\n  @Event({ eventName: 'goat:blur' }) goatBlur: EventEmitter;\r\n\r\n  /**\r\n   * Emitted when the input has focus.\r\n   */\r\n  @Event({ eventName: 'goat:focus' }) goatFocus: EventEmitter;\r\n\r\n\r\n  @Element() elm!: HTMLElement;\r\n  private nativeInput?: HTMLInputElement;\r\n  private tabindex?: string | number;\r\n\r\n  @State() startSlotHasContent = false;\r\n  @State() endSlotHasContent = false;\r\n  @State() hasFocus = false;\r\n\r\n  private inputHandler = (ev: Event) => {\r\n    const input = ev.target as HTMLInputElement | null;\r\n    const oldValue = this.value;\r\n    if (input) {\r\n      this.value = input.value;\r\n    }\r\n    this.goatInput.emit(ev as KeyboardEvent);\r\n    if (oldValue !== this.value) {\r\n      this.goatChange.emit(ev as KeyboardEvent);\r\n    }\r\n  };\r\n\r\n  private keyDownHandler = (ev: KeyboardEvent) => {\r\n    if (ev.key === 'Escape' && this.clearable) {\r\n      this.clearInput(ev);\r\n    }\r\n  };\r\n\r\n  private blurHandler = (ev: FocusEvent) => {\r\n    this.hasFocus = false;\r\n    this.goatBlur.emit(ev);\r\n  };\r\n\r\n  private focusHandler = (ev: FocusEvent) => {\r\n    this.hasFocus = true;\r\n    this.goatFocus.emit(ev);\r\n  };\r\n\r\n  private clearInput = (evt: Event) => {\r\n    this.nativeInput.value = '';\r\n    this.inputHandler(evt);\r\n  };\r\n\r\n  @Method()\r\n  async getComponentId() {\r\n    return this.gid;\r\n  }\r\n\r\n  /**\r\n   * Sets focus on the native `input` in `goat-input`. Use this method instead of the global\r\n   * `input.focus()`.\r\n   */\r\n  @Method()\r\n  async setFocus() {\r\n    if (this.nativeInput) {\r\n      this.nativeInput.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets blur on the native `input` in `goat-input`. Use this method instead of the global\r\n   * `input.blur()`.\r\n   */\r\n  @Method()\r\n  async setBlur() {\r\n    if (this.nativeInput) {\r\n      this.nativeInput.blur();\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Update the native input element when the value changes\r\n   */\r\n  @Watch('value')\r\n  protected valueChanged() {\r\n    let value = this.value;\r\n    if (this.type === 'number') {\r\n      if (value)\r\n        this.value = JSON.parse(value + '');\r\n    }\r\n  }\r\n\r\n\r\n  @Watch('debounce')\r\n  protected debounceChanged() {\r\n    this.goatChange = debounceEvent(this.goatChange, this.debounce);\r\n  }\r\n\r\n  componentWillLoad() {\r\n    // If the ion-input has a tabindex attribute we get the value\r\n    // and pass it down to the native input, then remove it from the\r\n    // goat-input to avoid causing tabbing twice on the same element\r\n    if (this.elm.hasAttribute('tabindex')) {\r\n      const tabindex = this.elm.getAttribute('tabindex');\r\n      this.tabindex = tabindex !== null ? tabindex : undefined;\r\n      this.elm.removeAttribute('tabindex');\r\n    }\r\n    this.elm.getAttributeNames().forEach((name: string) => {\r\n      if (name.includes('aria-')) {\r\n        this.configAria[name] = this.elm.getAttribute(name);\r\n        this.elm.removeAttribute(name);\r\n      }\r\n    });\r\n    this.startSlotHasContent = !!this.elm.querySelector('[slot=\"start\"]');\r\n    this.endSlotHasContent = !!this.elm.querySelector('[slot=\"end\"]');\r\n  }\r\n\r\n\r\n  connectedCallback() {\r\n    this.debounceChanged();\r\n  }\r\n\r\n  private getValue(): string {\r\n    return (this.value || '').toString();\r\n  }\r\n\r\n  private hasValue(): boolean {\r\n    return this.getValue().length > 0;\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n      <Host has-focus={this.hasFocus}\r\n            has-value={this.hasValue()}>\r\n        <div class={{\r\n          'input-container': true,\r\n          'disabled': this.disabled,\r\n          'has-focus': this.hasFocus,\r\n          'start-slot-has-content': this.startSlotHasContent,\r\n          'end-slot-has-content': this.endSlotHasContent,\r\n        }}>\r\n\r\n          <div class='slot-container start'>\r\n            <slot name='start' />\r\n          </div>\r\n\r\n          <input\r\n            class='input input-native'\r\n            name={this.name}\r\n            ref={input => this.nativeInput = input}\r\n            type={this.type}\r\n            placeholder={this.placeholder}\r\n            autocomplete={this.autocomplete}\r\n            value={this.value}\r\n            tabindex={this.tabindex}\r\n            readonly={this.readonly}\r\n            required={this.required}\r\n            onKeyDown={this.keyDownHandler}\r\n            onInput={this.inputHandler}\r\n            onBlur={this.blurHandler}\r\n            onFocus={this.focusHandler}\r\n            disabled={this.disabled}\r\n            {...this.configAria} />\r\n\r\n\r\n          {this.clearable && this.hasValue() &&\r\n            <goat-icon class='clear inherit input-action' name='x-circle-fill' size={this.size} onClick={this.clearInput} role=\"button\" />}\r\n\r\n          <div class='slot-container end'>\r\n            <slot name='end' />\r\n          </div>\r\n\r\n\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n}\r\n"]}