{"version":3,"sources":["src/components/form/textarea/textarea.scss?tag=goat-textarea&encapsulation=shadow","src/components/form/textarea/textarea.tsx"],"names":["textareaCss","Textarea","[object Object]","hostRef","this","gid","getComponentIndex","name","size","disabled","readonly","state","required","debounce","clearable","configAria","hasFocus","endSlotHasContent","inputHandler","ev","input","target","value","p4Input","emit","p4Change","blurHandler","p4Blur","focusHandler","p4Focus","clearInput","evt","nativeInput","keyDownHandler","key","focus","blur","debounceEvent","toString","getValue","length","elm","hasAttribute","tabindex","getAttribute","undefined","removeAttribute","getAttributeNames","forEach","includes","querySelector","debounceChanged","h","Host","has-focus","has-value","hasValue","class","input-container","textarea","end-slot-has-content","Object","assign","rows","ref","placeholder","onKeyDown","onInput","onBlur","onFocus","onClick"],"mappings":"2GAAA,MAAMA,EAAc,q5KCyBPC,EAAQ,MALrBC,YAAAC,8MAOEC,KAAAC,IAAcC,IAKNF,KAAAG,KAAe,cAAcH,KAAKC,MAgBlBD,KAAAI,KAA2B,KAK5BJ,KAAAK,SAAoB,MAKlBL,KAAAM,SAAqB,MAOrBN,KAAAO,MAAqD,UAMtEP,KAAAQ,SAAoB,MAMpBR,KAAAS,SAAW,IAKXT,KAAAU,UAAY,MAGmBV,KAAAW,WAAkB,GAgEhDX,KAAAY,SAAW,MACXZ,KAAAa,kBAAoB,MAGrBb,KAAAc,aAAgBC,IACtB,MAAMC,EAAQD,EAAGE,OACjB,GAAID,EAAO,CACThB,KAAKkB,MAAQF,EAAME,OAAS,GAE9BlB,KAAKmB,QAAQC,KAAKL,GAClBf,KAAKqB,SAASD,KAAKL,IAGbf,KAAAsB,YAAeP,IACrBf,KAAKY,SAAW,MAChBZ,KAAKuB,OAAOH,KAAKL,IAGXf,KAAAwB,aAAgBT,IACtBf,KAAKY,SAAW,KAChBZ,KAAKyB,QAAQL,KAAKL,IAYZf,KAAA0B,WAAcC,IACpB3B,KAAK4B,YAAYV,MAAQ,GACzBlB,KAAKc,aAAaa,IAGZ3B,KAAA6B,eAAkBd,IACxB,GAAIA,EAAGe,MAAQ,UAAY9B,KAAKU,UAAW,CACzCV,KAAK0B,WAAWX,KAtEpBjB,iBACE,GAAIE,KAAK4B,YAAa,CACpB5B,KAAK4B,YAAYG,SASrBjC,gBACE,GAAIE,KAAK4B,YAAa,CACpB5B,KAAK4B,YAAYI,QAKrBlC,uBACE,OAAOE,KAAKC,IAIJH,kBACRE,KAAKqB,SAAWY,EAAcjC,KAAKqB,SAAUrB,KAAKS,UA+B5CX,WACN,OAAQE,KAAKkB,OAAS,IAAIgB,WAGpBpC,WACN,OAAOE,KAAKmC,WAAWC,OAAS,EAclCtC,oBAIE,GAAIE,KAAKqC,IAAIC,aAAa,YAAa,CACrC,MAAMC,EAAWvC,KAAKqC,IAAIG,aAAa,YACvCxC,KAAKuC,SAAWA,IAAa,KAAOA,EAAWE,UAC/CzC,KAAKqC,IAAIK,gBAAgB,YAE3B1C,KAAKqC,IAAIM,oBAAoBC,SAASzC,IACpC,GAAIA,EAAK0C,SAAS,SAAU,CAC1B7C,KAAKW,WAAWR,GAAQH,KAAKqC,IAAIG,aAAarC,GAC9CH,KAAKqC,IAAIK,gBAAgBvC,OAG7BH,KAAKa,oBAAsBb,KAAKqC,IAAIS,cAAc,gBAGpDhD,oBACEE,KAAK+C,kBAGPjD,SACE,OACEkD,EAACC,EAAI,CAAAC,YAAYlD,KAAKY,SAAQuC,YAAanD,KAAKoD,YAC9CJ,EAAA,MAAA,CAAKK,MAAO,CACVC,kBAAmB,KACnBC,SAAY,KACZlD,SAAYL,KAAKK,SACjBC,SAAYN,KAAKM,SACjB4C,YAAalD,KAAKY,SAClB4C,uBAAwBxD,KAAKa,oBAE1BmC,EAAA,WAAAS,OAAAC,OAAA,CACEC,KAAM,EACNC,IAAK5C,GAAShB,KAAK4B,YAAcZ,EACjCR,SAAUR,KAAKQ,SACf6C,MAAM,qBACNlD,KAAMH,KAAKG,KACX0D,YAAa7D,KAAK6D,YAClB3C,MAAOlB,KAAKkB,MACZqB,SAAUvC,KAAKuC,SACfuB,UAAW9D,KAAK6B,eAChBkC,QAAS/D,KAAKc,aACdkD,OAAQhE,KAAKsB,YACb2C,QAASjE,KAAKwB,aACdnB,SAAUL,KAAKK,UACXL,KAAKW,aAEbX,KAAKU,WAAaV,KAAKoD,YACtBJ,EAAA,YAAA,CAAWK,MAAM,6BAA6BlD,KAAK,gBAAgB+D,QAASlE,KAAK0B,aAEnFsB,EAAA,MAAA,CAAKK,MAAM,sBACTL,EAAA,OAAA,CAAM7C,KAAK","sourcesContent":["@import \"../common-input\";\r\n\r\n.textarea {\r\n  height: 100%;\r\n  align-items: flex-start;\r\n\r\n  .input-native {\r\n    height: 100%;\r\n    min-height: 5rem;\r\n    resize: vertical;\r\n  }\r\n}\r\n\r\n\r\n","import {\r\n  Component,\r\n  ComponentInterface,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  h,\r\n  Host,\r\n  Method,\r\n  Prop,\r\n  State,\r\n  Watch,\r\n} from '@stencil/core';\r\nimport { debounceEvent, getComponentIndex } from '../../../utils/utils';\r\n\r\n/**\r\n * @name Textarea\r\n * @description Enables native inputs to be used within a Form field.\r\n * @example <goat-textarea placeholder=\"Enter some description over here\"></goat-textarea>\r\n */\r\n@Component({\r\n  tag: 'goat-textarea',\r\n  styleUrl: 'textarea.scss',\r\n  shadow: true,\r\n})\r\nexport class Textarea implements ComponentInterface, InputComponentInterface {\r\n\r\n  gid: string = getComponentIndex();\r\n\r\n  /**\r\n   * The input field name.\r\n   */\r\n  @Prop() name: string = `goat-input-${this.gid}`;\r\n\r\n  /**\r\n   * The input field placeholder.\r\n   */\r\n  @Prop() placeholder: string;\r\n\r\n  /**\r\n   * The input field value.\r\n   */\r\n  @Prop({ mutable: true }) value: string;\r\n\r\n  /**\r\n   * The button size.\r\n   * Possible values are: `\"sm\"`, `\"md\"`, `\"lg\"`. Defaults to `\"md\"`.\r\n   */\r\n  @Prop( {reflect: true}) size: 'sm' | 'md' | 'lg' = 'md';\r\n\r\n  /**\r\n   * If true, the user cannot interact with the button. Defaults to `false`.\r\n   */\r\n  @Prop({reflect: true}) disabled: boolean = false;\r\n\r\n  /**\r\n   * If true, the user read the value cannot modify it. Defaults to `false`.\r\n   */\r\n  @Prop({ reflect: true }) readonly : boolean = false;\r\n\r\n\r\n  /**\r\n   * The input state.\r\n   * Possible values are: `\"success\"`, `\"error\"`, `\"warning\"`, 'default'. Defaults to `\"default\"`.\r\n   */\r\n  @Prop({ reflect: true }) state: 'success' | 'error' | 'warning' | 'default' = 'default';\r\n\r\n\r\n  /**\r\n   * If true, required icon is show. Defaults to `false`.\r\n   */\r\n  @Prop() required: boolean = false;\r\n\r\n\r\n  /**\r\n   * Set the amount of time, in milliseconds, to wait to trigger the `goat:change` event after each keystroke.\r\n   */\r\n  @Prop() debounce = 300;\r\n\r\n  /**\r\n   * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.\r\n   */\r\n  @Prop() clearable = false;\r\n\r\n\r\n  @Prop( {reflect: true, mutable: true}) configAria: any = {};\r\n\r\n\r\n  /**\r\n   * Emitted when a keyboard input occurred.\r\n   */\r\n  @Event({ eventName: 'goat:input' }) p4Input: EventEmitter;\r\n\r\n  /**\r\n   * Emitted when the value has changed..\r\n   */\r\n  @Event({ eventName: 'goat:change' }) p4Change: EventEmitter;\r\n\r\n  /**\r\n   * Emitted when the input loses focus.\r\n   */\r\n  @Event({ eventName: 'goat:blur' }) p4Blur: EventEmitter;\r\n\r\n  /**\r\n   * Emitted when the input has focus.\r\n   */\r\n  @Event({ eventName: 'goat:focus' }) p4Focus: EventEmitter;\r\n\r\n  /**\r\n   * Emitted when the action button is clicked.\r\n   */\r\n  @Event({ eventName: 'goat:action-click' }) p4ActionClick: EventEmitter;\r\n\r\n  /**\r\n   * Sets focus on the native `input` in `ion-input`. Use this method instead of the global\r\n   * `input.focus()`.\r\n   */\r\n  @Method()\r\n  async setFocus() {\r\n    if (this.nativeInput) {\r\n      this.nativeInput.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets blur on the native `input` in `ion-input`. Use this method instead of the global\r\n   * `input.blur()`.\r\n   */\r\n  @Method()\r\n  async setBlur() {\r\n    if (this.nativeInput) {\r\n      this.nativeInput.blur();\r\n    }\r\n  }\r\n\r\n  @Method()\r\n  async getComponentId() {\r\n    return this.gid;\r\n  }\r\n\r\n  @Watch('debounce')\r\n  protected debounceChanged() {\r\n    this.p4Change = debounceEvent(this.p4Change, this.debounce);\r\n  }\r\n\r\n\r\n  @Element() elm!: HTMLElement;\r\n  private nativeInput?: HTMLTextAreaElement;\r\n  private tabindex?: string | number;\r\n  @State() hasFocus = false;\r\n  @State() endSlotHasContent = false;\r\n\r\n\r\n  private inputHandler = (ev: Event) => {\r\n    const input = ev.target as HTMLInputElement | null;\r\n    if (input) {\r\n      this.value = input.value || '';\r\n    }\r\n    this.p4Input.emit(ev as KeyboardEvent);\r\n    this.p4Change.emit(ev as KeyboardEvent);\r\n  };\r\n\r\n  private blurHandler = (ev: FocusEvent) => {\r\n    this.hasFocus = false;\r\n    this.p4Blur.emit(ev);\r\n  };\r\n\r\n  private focusHandler = (ev: FocusEvent) => {\r\n    this.hasFocus = true;\r\n    this.p4Focus.emit(ev);\r\n  };\r\n\r\n\r\n  private getValue(): string {\r\n    return (this.value || '').toString();\r\n  }\r\n\r\n  private hasValue(): boolean {\r\n    return this.getValue().length > 0;\r\n  }\r\n\r\n  private clearInput = (evt: Event) => {\r\n    this.nativeInput.value = '';\r\n    this.inputHandler(evt);\r\n  };\r\n\r\n  private keyDownHandler = (ev: KeyboardEvent) => {\r\n    if (ev.key === 'Escape' && this.clearable) {\r\n      this.clearInput(ev);\r\n    }\r\n  };\r\n\r\n  componentWillLoad() {\r\n    // If the ion-input has a tabindex attribute we get the value\r\n    // and pass it down to the native input, then remove it from the\r\n    // ion-input to avoid causing tabbing twice on the same element\r\n    if (this.elm.hasAttribute('tabindex')) {\r\n      const tabindex = this.elm.getAttribute('tabindex');\r\n      this.tabindex = tabindex !== null ? tabindex : undefined;\r\n      this.elm.removeAttribute('tabindex');\r\n    }\r\n    this.elm.getAttributeNames().forEach((name: string) => {\r\n      if (name.includes('aria-')) {\r\n        this.configAria[name] = this.elm.getAttribute(name);\r\n        this.elm.removeAttribute(name);\r\n      }\r\n    });\r\n    this.endSlotHasContent = !!this.elm.querySelector('[slot=\"end\"]');\r\n  }\r\n\r\n  connectedCallback() {\r\n    this.debounceChanged();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host has-focus={this.hasFocus} has-value={this.hasValue()}>\r\n        <div class={{\r\n          'input-container': true,\r\n          'textarea': true,\r\n          'disabled': this.disabled,\r\n          'readonly': this.readonly,\r\n          'has-focus': this.hasFocus,\r\n          'end-slot-has-content': this.endSlotHasContent,\r\n        }}>\r\n             <textarea\r\n               rows={4}\r\n               ref={input => this.nativeInput = input}\r\n               required={this.required}\r\n               class='input input-native'\r\n               name={this.name}\r\n               placeholder={this.placeholder}\r\n               value={this.value}\r\n               tabindex={this.tabindex}\r\n               onKeyDown={this.keyDownHandler}\r\n               onInput={this.inputHandler}\r\n               onBlur={this.blurHandler}\r\n               onFocus={this.focusHandler}\r\n               disabled={this.disabled}\r\n               {...this.configAria}/>\r\n\r\n          {this.clearable && this.hasValue() &&\r\n            <goat-icon class='clear inherit input-action' name='x-circle-fill' onClick={this.clearInput} />}\r\n\r\n          <div class='slot-container end'>\r\n            <slot name='end' />\r\n          </div>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n}\r\n"]}