{"file":"goat-input.entry.esm.js","mappings":"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","names":[],"sources":["./src/components/form/input/input.scss?tag=goat-input&encapsulation=shadow","./src/components/form/input/input.tsx"],"sourcesContent":["@import \"../common-input\";\r\n\r\n","import {\r\n  Component,\r\n  ComponentInterface,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  h,\r\n  Host,\r\n  Method,\r\n  Prop,\r\n  State,\r\n  Watch,\r\n} from '@stencil/core';\r\nimport { debounceEvent, getComponentIndex } from '../../../utils/utils';\r\n\r\n\r\n/**\r\n * @name Input\r\n * @description Enables native inputs to be used within a Form field.\r\n * @example <goat-input placeholder=\"Enter your name\"></goat-input>\r\n */\r\n@Component({\r\n  tag: 'goat-input',\r\n  styleUrl: 'input.scss',\r\n  shadow: true,\r\n})\r\nexport class Input implements ComponentInterface, InputComponentInterface {\r\n\r\n  gid: string = getComponentIndex();\r\n\r\n  /**\r\n   * The input field name.\r\n   */\r\n  @Prop() name: string = `goat-input-${this.gid}`;\r\n\r\n  /**\r\n   * The input field placeholder.\r\n   */\r\n  @Prop() placeholder: string;\r\n\r\n  /**\r\n   * The input field value.\r\n   */\r\n  @Prop({ mutable: true }) value?: string | number | null = '';\r\n\r\n  /**\r\n   * The input field size.\r\n   * Possible values are: `\"sm\"`, `\"md\"`, `\"lg\"`. Defaults to `\"md\"`.\r\n   */\r\n  @Prop({ reflect: true }) size: 'sm' | 'md' | 'lg' = 'md';\r\n\r\n  /**\r\n   * The input state.\r\n   * Possible values are: `\"success\"`, `\"error\"`, `\"warning\"`, 'default'. Defaults to `\"default\"`.\r\n   */\r\n  @Prop({ reflect: true }) state: 'success' | 'error' | 'warning' | 'default' = 'default';\r\n\r\n  /**\r\n   * The type of control to display.\r\n   * Possible values are: `\"text\"`, `\"password\"`, `\"number\"`, `\"email\"`, `\"tel\"`. Defaults to `\"text\"`.\r\n   */\r\n  @Prop() type: ('text' | 'password' | 'number' | 'email' | 'tel') = 'text';\r\n\r\n  /**\r\n   * If true, the user cannot interact with the button. Defaults to `false`.\r\n   */\r\n  @Prop({ reflect: true }) disabled: boolean = false;\r\n\r\n  /**\r\n   * If true, the user read the value cannot modify it. Defaults to `false`.\r\n   */\r\n  @Prop({ reflect: true }) readonly : boolean = false;\r\n\r\n  /**\r\n   * If true, required icon is show. Defaults to `false`.\r\n   */\r\n  @Prop({ reflect: true }) required: boolean = false;\r\n\r\n  /**\r\n   * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.\r\n   */\r\n  @Prop() clearable = false;\r\n\r\n  /**\r\n   * Set the amount of time, in milliseconds, to wait to trigger the `goatChange` event after each keystroke.\r\n   */\r\n  @Prop() debounce = 300;\r\n\r\n  /**\r\n   * Indicates whether the value of the control can be automatically completed by the browser.\r\n   */\r\n  @Prop() autocomplete: 'on' | 'off' = 'off';\r\n\r\n  @Prop({ reflect: true, mutable: true }) configAria: any = {};\r\n\r\n\r\n  /**\r\n   * Emitted when a keyboard input occurred.\r\n   */\r\n  @Event({ eventName: 'goat:input' }) goatInput: EventEmitter;\r\n\r\n  /**\r\n   * Emitted when the value has changed.\r\n   */\r\n  @Event({ eventName: 'goat:change' }) goatChange: EventEmitter;\r\n\r\n  /**\r\n   * Emitted when the input loses focus.\r\n   */\r\n  @Event({ eventName: 'goat:blur' }) goatBlur: EventEmitter;\r\n\r\n  /**\r\n   * Emitted when the input has focus.\r\n   */\r\n  @Event({ eventName: 'goat:focus' }) goatFocus: EventEmitter;\r\n\r\n\r\n  @Element() elm!: HTMLElement;\r\n  private nativeInput?: HTMLInputElement;\r\n  private tabindex?: string | number;\r\n\r\n  @State() startSlotHasContent = false;\r\n  @State() endSlotHasContent = false;\r\n  @State() hasFocus = false;\r\n\r\n  private inputHandler = (ev: Event) => {\r\n    const input = ev.target as HTMLInputElement | null;\r\n    const oldValue = this.value;\r\n    if (input) {\r\n      this.value = input.value;\r\n    }\r\n    this.goatInput.emit(ev as KeyboardEvent);\r\n    if (oldValue !== this.value) {\r\n      this.goatChange.emit(ev as KeyboardEvent);\r\n    }\r\n  };\r\n\r\n  private keyDownHandler = (ev: KeyboardEvent) => {\r\n    if (ev.key === 'Escape' && this.clearable) {\r\n      this.clearInput(ev);\r\n    }\r\n  };\r\n\r\n  private blurHandler = (ev: FocusEvent) => {\r\n    this.hasFocus = false;\r\n    this.goatBlur.emit(ev);\r\n  };\r\n\r\n  private focusHandler = (ev: FocusEvent) => {\r\n    this.hasFocus = true;\r\n    this.goatFocus.emit(ev);\r\n  };\r\n\r\n  private clearInput = (evt: Event) => {\r\n    this.nativeInput.value = '';\r\n    this.inputHandler(evt);\r\n  };\r\n\r\n  @Method()\r\n  async getComponentId() {\r\n    return this.gid;\r\n  }\r\n\r\n  /**\r\n   * Sets focus on the native `input` in `goat-input`. Use this method instead of the global\r\n   * `input.focus()`.\r\n   */\r\n  @Method()\r\n  async setFocus() {\r\n    if (this.nativeInput) {\r\n      this.nativeInput.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets blur on the native `input` in `goat-input`. Use this method instead of the global\r\n   * `input.blur()`.\r\n   */\r\n  @Method()\r\n  async setBlur() {\r\n    if (this.nativeInput) {\r\n      this.nativeInput.blur();\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Update the native input element when the value changes\r\n   */\r\n  @Watch('value')\r\n  protected valueChanged() {\r\n    let value = this.value;\r\n    if (this.type === 'number') {\r\n      if (value)\r\n        this.value = JSON.parse(value + '');\r\n    }\r\n  }\r\n\r\n\r\n  @Watch('debounce')\r\n  protected debounceChanged() {\r\n    this.goatChange = debounceEvent(this.goatChange, this.debounce);\r\n  }\r\n\r\n  componentWillLoad() {\r\n    // If the ion-input has a tabindex attribute we get the value\r\n    // and pass it down to the native input, then remove it from the\r\n    // goat-input to avoid causing tabbing twice on the same element\r\n    if (this.elm.hasAttribute('tabindex')) {\r\n      const tabindex = this.elm.getAttribute('tabindex');\r\n      this.tabindex = tabindex !== null ? tabindex : undefined;\r\n      this.elm.removeAttribute('tabindex');\r\n    }\r\n    this.elm.getAttributeNames().forEach((name: string) => {\r\n      if (name.includes('aria-')) {\r\n        this.configAria[name] = this.elm.getAttribute(name);\r\n        this.elm.removeAttribute(name);\r\n      }\r\n    });\r\n    this.startSlotHasContent = !!this.elm.querySelector('[slot=\"start\"]');\r\n    this.endSlotHasContent = !!this.elm.querySelector('[slot=\"end\"]');\r\n  }\r\n\r\n\r\n  connectedCallback() {\r\n    this.debounceChanged();\r\n  }\r\n\r\n  private getValue(): string {\r\n    return (this.value || '').toString();\r\n  }\r\n\r\n  private hasValue(): boolean {\r\n    return this.getValue().length > 0;\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n      <Host has-focus={this.hasFocus}\r\n            has-value={this.hasValue()}>\r\n        <div class={{\r\n          'input-container': true,\r\n          'disabled': this.disabled,\r\n          'has-focus': this.hasFocus,\r\n          'start-slot-has-content': this.startSlotHasContent,\r\n          'end-slot-has-content': this.endSlotHasContent,\r\n        }}>\r\n\r\n          <div class='slot-container start'>\r\n            <slot name='start' />\r\n          </div>\r\n\r\n          <input\r\n            class='input input-native'\r\n            name={this.name}\r\n            ref={input => this.nativeInput = input}\r\n            type={this.type}\r\n            placeholder={this.placeholder}\r\n            autocomplete={this.autocomplete}\r\n            value={this.value}\r\n            tabindex={this.tabindex}\r\n            readonly={this.readonly}\r\n            required={this.required}\r\n            onKeyDown={this.keyDownHandler}\r\n            onInput={this.inputHandler}\r\n            onBlur={this.blurHandler}\r\n            onFocus={this.focusHandler}\r\n            disabled={this.disabled}\r\n            {...this.configAria} />\r\n\r\n\r\n          {this.clearable && this.hasValue() &&\r\n            <goat-icon class='clear inherit input-action' name='x-circle-fill' size={this.size} onClick={this.clearInput} role=\"button\" />}\r\n\r\n          <div class='slot-container end'>\r\n            <slot name='end' />\r\n          </div>\r\n\r\n\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n}\r\n"],"version":3}