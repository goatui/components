{"file":"goat-input.entry.esm.js","mappings":"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","names":[],"sources":["./src/components/form/input/input.scss?tag=goat-input&encapsulation=shadow","./src/components/form/input/input.tsx"],"sourcesContent":["@import \"../common-input\";\n\n","import {\n  Component,\n  ComponentInterface,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core';\nimport { debounceEvent, getComponentIndex } from '../../../utils/utils';\n\n\n/**\n * @name Input\n * @description Enables native inputs to be used within a Form field.\n * @example <goat-input placeholder=\"Enter your name\"></goat-input>\n */\n@Component({\n  tag: 'goat-input',\n  styleUrl: 'input.scss',\n  shadow: true,\n})\nexport class Input implements ComponentInterface, InputComponentInterface {\n\n  gid: string = getComponentIndex();\n\n  /**\n   * The input field name.\n   */\n  @Prop() name: string = `goat-input-${this.gid}`;\n\n  /**\n   * The input field placeholder.\n   */\n  @Prop() placeholder: string;\n\n  /**\n   * The input field value.\n   */\n  @Prop({ mutable: true }) value?: string | number | null = '';\n\n  /**\n   * The input field size.\n   * Possible values are: `\"sm\"`, `\"md\"`, `\"lg\"`. Defaults to `\"md\"`.\n   */\n  @Prop({ reflect: true }) size: 'sm' | 'md' | 'lg' = 'md';\n\n  /**\n   * The input state.\n   * Possible values are: `\"success\"`, `\"error\"`, `\"warning\"`, 'default'. Defaults to `\"default\"`.\n   */\n  @Prop({ reflect: true }) state: 'success' | 'error' | 'warning' | 'default' = 'default';\n\n  /**\n   * The type of control to display.\n   * Possible values are: `\"text\"`, `\"password\"`, `\"number\"`, `\"email\"`, `\"tel\"`. Defaults to `\"text\"`.\n   */\n  @Prop() type: ('text' | 'password' | 'number' | 'email' | 'tel') = 'text';\n\n  /**\n   * If true, the user cannot interact with the button. Defaults to `false`.\n   */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  /**\n   * If true, the user read the value cannot modify it. Defaults to `false`.\n   */\n  @Prop({ reflect: true }) readonly : boolean = false;\n\n  /**\n   * If true, required icon is show. Defaults to `false`.\n   */\n  @Prop({ reflect: true }) required: boolean = false;\n\n  /**\n   * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.\n   */\n  @Prop() clearable = false;\n\n  /**\n   * Set the amount of time, in milliseconds, to wait to trigger the `goatChange` event after each keystroke.\n   */\n  @Prop() debounce = 300;\n\n  /**\n   * Indicates whether the value of the control can be automatically completed by the browser.\n   */\n  @Prop() autocomplete: 'on' | 'off' = 'off';\n\n  @Prop({ reflect: true, mutable: true }) configAria: any = {};\n\n\n  /**\n   * Emitted when a keyboard input occurred.\n   */\n  @Event({ eventName: 'goat:input' }) goatInput: EventEmitter;\n\n  /**\n   * Emitted when the value has changed.\n   */\n  @Event({ eventName: 'goat:change' }) goatChange: EventEmitter;\n\n  /**\n   * Emitted when the input loses focus.\n   */\n  @Event({ eventName: 'goat:blur' }) goatBlur: EventEmitter;\n\n  /**\n   * Emitted when the input has focus.\n   */\n  @Event({ eventName: 'goat:focus' }) goatFocus: EventEmitter;\n\n\n  @Element() elm!: HTMLElement;\n  private nativeInput?: HTMLInputElement;\n  private tabindex?: string | number;\n\n  @State() startSlotHasContent = false;\n  @State() endSlotHasContent = false;\n  @State() hasFocus = false;\n\n  private inputHandler = (ev: Event) => {\n    const input = ev.target as HTMLInputElement | null;\n    const oldValue = this.value;\n    if (input) {\n      this.value = input.value;\n    }\n    this.goatInput.emit(ev as KeyboardEvent);\n    if (oldValue !== this.value) {\n      this.goatChange.emit(ev as KeyboardEvent);\n    }\n  };\n\n  private keyDownHandler = (ev: KeyboardEvent) => {\n    if (ev.key === 'Escape' && this.clearable) {\n      this.clearInput(ev);\n    }\n  };\n\n  private blurHandler = (ev: FocusEvent) => {\n    this.hasFocus = false;\n    this.goatBlur.emit(ev);\n  };\n\n  private focusHandler = (ev: FocusEvent) => {\n    this.hasFocus = true;\n    this.goatFocus.emit(ev);\n  };\n\n  private clearInput = (evt: Event) => {\n    this.nativeInput.value = '';\n    this.inputHandler(evt);\n  };\n\n  @Method()\n  async getComponentId() {\n    return this.gid;\n  }\n\n  /**\n   * Sets focus on the native `input` in `goat-input`. Use this method instead of the global\n   * `input.focus()`.\n   */\n  @Method()\n  async setFocus() {\n    if (this.nativeInput) {\n      this.nativeInput.focus();\n    }\n  }\n\n  /**\n   * Sets blur on the native `input` in `goat-input`. Use this method instead of the global\n   * `input.blur()`.\n   */\n  @Method()\n  async setBlur() {\n    if (this.nativeInput) {\n      this.nativeInput.blur();\n    }\n  }\n\n\n  /**\n   * Update the native input element when the value changes\n   */\n  @Watch('value')\n  protected valueChanged() {\n    let value = this.value;\n    if (this.type === 'number') {\n      if (value)\n        this.value = JSON.parse(value + '');\n    }\n  }\n\n\n  @Watch('debounce')\n  protected debounceChanged() {\n    this.goatChange = debounceEvent(this.goatChange, this.debounce);\n  }\n\n  componentWillLoad() {\n    // If the ion-input has a tabindex attribute we get the value\n    // and pass it down to the native input, then remove it from the\n    // goat-input to avoid causing tabbing twice on the same element\n    if (this.elm.hasAttribute('tabindex')) {\n      const tabindex = this.elm.getAttribute('tabindex');\n      this.tabindex = tabindex !== null ? tabindex : undefined;\n      this.elm.removeAttribute('tabindex');\n    }\n    this.elm.getAttributeNames().forEach((name: string) => {\n      if (name.includes('aria-')) {\n        this.configAria[name] = this.elm.getAttribute(name);\n        this.elm.removeAttribute(name);\n      }\n    });\n    this.startSlotHasContent = !!this.elm.querySelector('[slot=\"start\"]');\n    this.endSlotHasContent = !!this.elm.querySelector('[slot=\"end\"]');\n  }\n\n\n  connectedCallback() {\n    this.debounceChanged();\n  }\n\n  private getValue(): string {\n    return (this.value || '').toString();\n  }\n\n  private hasValue(): boolean {\n    return this.getValue().length > 0;\n  }\n\n\n  render() {\n\n    return (\n      <Host has-focus={this.hasFocus}\n            has-value={this.hasValue()}>\n        <div class={{\n          'input-container': true,\n          'disabled': this.disabled,\n          'has-focus': this.hasFocus,\n          'start-slot-has-content': this.startSlotHasContent,\n          'end-slot-has-content': this.endSlotHasContent,\n        }}>\n\n          <div class='slot-container start'>\n            <slot name='start' />\n          </div>\n\n          <input\n            class='input input-native'\n            name={this.name}\n            ref={input => this.nativeInput = input}\n            type={this.type}\n            placeholder={this.placeholder}\n            autocomplete={this.autocomplete}\n            value={this.value}\n            tabindex={this.tabindex}\n            readonly={this.readonly}\n            required={this.required}\n            onKeyDown={this.keyDownHandler}\n            onInput={this.inputHandler}\n            onBlur={this.blurHandler}\n            onFocus={this.focusHandler}\n            disabled={this.disabled}\n            {...this.configAria} />\n\n\n          {this.clearable && this.hasValue() &&\n            <goat-icon class='clear inherit input-action' name='x-circle-fill' size={this.size} onClick={this.clearInput} role=\"button\" />}\n\n          <div class='slot-container end'>\n            <slot name='end' />\n          </div>\n\n\n        </div>\n      </Host>\n    );\n  }\n\n}\n"],"version":3}