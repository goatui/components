{"version":3,"sources":["src/components/app-shell/sidenav-menu/sidenav-menu.scss?tag=goat-sidenav-menu&encapsulation=shadow","src/components/app-shell/sidenav-menu/sidenav-menu.tsx"],"names":["sidenavMenuCss","SidenavMenu","[object Object]","hostRef","this","showLoader","empty","emptyState","internalEmptyState","JSON","parse","evt","path","composedPath","menuItem","elm","tagName","key","preventDefault","focusNextItem","focusPreviousItem","firstMenuItem","getFirstItem","setFocus","querySelector","currentItem","nextItem","nextElementSibling","disabled","previousItem","previousElementSibling","parseEmptyState","h","class","renderEmptyState","slot","title","description"],"mappings":"kDAAA,MAAMA,EAAiB,ggCCQVC,EAAW,MALxBC,YAAAC,aAUUC,KAAAC,WAAsB,MAILD,KAAAE,MAAiB,MAEjBF,KAAAG,WAAqB,uFAS9CL,kBACE,GAAIE,KAAKG,WAAY,CACnBH,KAAKI,mBAAqBC,KAAKC,MAAMN,KAAKG,aAK9CL,cAAcS,GACZ,MAAMC,EAAOD,EAAIE,eACjB,IAAIC,EAAW,KACf,IAAK,MAAMC,KAAOH,EAAM,CAEtB,GAAIG,EAAIC,UAAY,iBAAkB,CACpCF,EAAWC,EAEb,GAAIA,IAAQX,KAAKW,IACf,SACF,GAAIJ,EAAIM,MAAQ,YAAa,CAC3BN,EAAIO,iBACJd,KAAKe,cAAcL,QACd,GAAIH,EAAIM,MAAQ,UAAW,CAChCN,EAAIO,iBACJd,KAAKgB,kBAAkBN,KAU7BZ,iBACE,MAAMmB,EAAgBjB,KAAKkB,eAC3BD,IAAa,MAAbA,SAAa,OAAA,EAAbA,EAAeE,WAGTrB,eACN,OAAOE,KAAKW,IAAIS,cAAc,kBAGxBtB,cAAcuB,GACpB,IAAIC,EAAgBD,EAAYE,mBAChC,EAAG,CACD,GAAID,GAAYA,EAASV,UAAY,mBAAqBU,EAASE,SAAU,CAC3EF,EAASH,WACT,OAEF,IAAKG,EAAU,CACbA,EAAWtB,KAAKW,IAAIS,cAAc,sBAC7B,CACLE,EAAWA,EAASC,0BAEfD,IAAaD,GAGhBvB,kBAAkBuB,GACxB,IAAII,EAAoBJ,EAAYK,uBACpC,EAAG,CACD,GAAID,GAAgBA,EAAab,UAAY,mBAAqBa,EAAaD,SAAU,CACvFC,EAAaN,WACb,OAEF,IAAKM,EAAc,CACjBA,EAAezB,KAAKW,IAAIS,cAAc,iCACjC,CACLK,EAAeA,EAAaC,8BAEvBD,IAAiBJ,GAI5BvB,oBACEE,KAAK2B,kBAIP7B,SACE,OAAO8B,EAAA,MAAA,CAAKC,MAAM,QAChBD,EAAA,OAAA,MACC5B,KAAK8B,oBAIFhC,mBACN,GAAIE,KAAKE,MACP,OAAO0B,EAAA,mBAAA,CAAkBC,MAAM,cAC7BD,EAAA,MAAA,CAAKG,KAAK,SAAS/B,KAAKI,mBAAmB4B,OAC3CJ,EAAA,MAAA,CAAKG,KAAK,eAAe/B,KAAKI,mBAAmB6B","sourcesContent":["@import \"../../../globalStyles/commons\";\r\n\r\n:host {\r\n  display: inline-block;\r\n  --list-border-radius: #{v(--border-radius)};\r\n  --list-max-height: inherit;\r\n}\r\n\r\n\r\n.menu {\r\n  background-color: v(--field-02);\r\n  padding: v(--spacing-2) 0;\r\n  border: 1px solid v(--color-neutral-200);\r\n  box-sizing: border-box;\r\n  border-radius: var(--list-border-radius);\r\n  box-shadow: v(--shadow-sm);\r\n}\r\n","import { Component, ComponentInterface, Element, h, Listen, Method, Prop, State, Watch } from '@stencil/core';\r\n\r\n\r\n@Component({\r\n  tag: 'goat-sidenav-menu',\r\n  styleUrl: 'sidenav-menu.scss',\r\n  shadow: true,\r\n})\r\nexport class SidenavMenu implements ComponentInterface {\r\n\r\n\r\n  @Element() elm!: HTMLElement;\r\n\r\n  @Prop() showLoader: boolean = false;\r\n\r\n  @Prop({ mutable: true }) value?: string | number;\r\n\r\n  @Prop({ mutable: true }) empty: boolean = false;\r\n\r\n  @Prop({ mutable: true }) emptyState: string = `{\r\n    \"title\": \"No items\",\r\n    \"description\": \"There are no items to display\"\r\n  }`;\r\n\r\n  @State()\r\n  internalEmptyState: {title: string, description: string};\r\n\r\n  @Watch('emptyState')\r\n  parseEmptyState() {\r\n    if (this.emptyState) {\r\n      this.internalEmptyState = JSON.parse(this.emptyState);\r\n    }\r\n  }\r\n\r\n  @Listen('keydown', { target: 'window' })\r\n  handleKeyDown(evt: KeyboardEvent) {\r\n    const path = evt.composedPath();\r\n    let menuItem = null;\r\n    for (const elm of path) {\r\n      // @ts-ignore\r\n      if (elm.tagName === 'GOAT-MENU-ITEM') {\r\n        menuItem = elm;\r\n      }\r\n      if (elm !== this.elm)\r\n        continue;\r\n      if (evt.key === 'ArrowDown') {\r\n        evt.preventDefault();\r\n        this.focusNextItem(menuItem);\r\n      } else if (evt.key === 'ArrowUp') {\r\n        evt.preventDefault();\r\n        this.focusPreviousItem(menuItem);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets focus on first menu item. Use this method instead of the global\r\n   * `element.focus()`.\r\n   */\r\n  @Method()\r\n  async setFocus() {\r\n    const firstMenuItem = this.getFirstItem();\r\n    firstMenuItem?.setFocus();\r\n  }\r\n\r\n  private getFirstItem() {\r\n    return this.elm.querySelector('goat-menu-item');\r\n  }\r\n\r\n  private focusNextItem(currentItem) {\r\n    let nextItem: any = currentItem.nextElementSibling;\r\n    do {\r\n      if (nextItem && nextItem.tagName === 'GOAT-MENU-ITEM' && !nextItem.disabled) {\r\n        nextItem.setFocus();\r\n        return;\r\n      }\r\n      if (!nextItem) {\r\n        nextItem = this.elm.querySelector('goat-menu-item');\r\n      } else {\r\n        nextItem = nextItem.nextElementSibling;\r\n      }\r\n    } while (nextItem !== currentItem);\r\n  }\r\n\r\n  private focusPreviousItem(currentItem) {\r\n    let previousItem: any = currentItem.previousElementSibling;\r\n    do {\r\n      if (previousItem && previousItem.tagName === 'GOAT-MENU-ITEM' && !previousItem.disabled) {\r\n        previousItem.setFocus();\r\n        return;\r\n      }\r\n      if (!previousItem) {\r\n        previousItem = this.elm.querySelector('goat-menu-item:last-child');\r\n      } else {\r\n        previousItem = previousItem.previousElementSibling;\r\n      }\r\n    } while (previousItem !== currentItem);\r\n  }\r\n\r\n\r\n  componentWillLoad() {\r\n    this.parseEmptyState();\r\n  }\r\n\r\n\r\n  render() {\r\n    return <div class='menu'>\r\n      <slot />\r\n      {this.renderEmptyState()}\r\n    </div>;\r\n  }\r\n\r\n  private renderEmptyState() {\r\n    if (this.empty)\r\n      return <goat-empty-state class=\"empty-menu\">\r\n        <div slot='title'>{this.internalEmptyState.title}</div>\r\n        <div slot='description'>{this.internalEmptyState.description}</div>\r\n      </goat-empty-state>;\r\n  }\r\n\r\n}\r\n"]}