:host {
  display: block;
  padding-bottom: var(--space-3);
  --input-border-radius: var(--border-radius);
}

.input-component {

  position: relative;
  display: flex;



  background-color: var(--color-shades-white);
  border: 1px solid var(--border-color);
  border-radius: var(--input-border-radius);

  box-sizing: border-box;

  color: var(--color-neutral-500);
  line-height: 1.5715;
  background-image: none;

  transition: all 0.3s;
  text-align: start;
  font-weight: 400;
  letter-spacing: normal;
  cursor: text;




  .native-input, .display-value {
   // font-family: $font-normal;
    flex: 1;
    border: none;
    outline: none;
    background: none;
    height: 100%;
    width: 100%;
    cursor: inherit;
    padding: .25rem .75rem;

    &::placeholder {
      color: #bfbfbf;
    }

  }

  .input-actions {
    line-height: 0;
    display: flex;

    > *:last-child {
      margin-right: .5rem;
    }


    > * {
      height: 100%;
      background: transparent;
      border: none;
      box-shadow: none;
      margin-left: .5rem;
      padding: 0;
      line-height: 0;
    }

    .input-clear-icon {
      cursor: pointer;
    }
  }


  &:not(.disabled):hover {
    color: var(--color-primary-500);
    border-color: var(--color-primary-500);

    .input-clear-icon {
      display: inline-block;
    }
  }

  /**
  * VARIANTS
  */
  &.variant-dashed {
    border-style: dashed;
  }

  &.disabled {
    background-color: #f5f5f5;
    cursor: not-allowed;
    opacity: 1;
  }

  /**
    * SIZES
    */
  &.size-lg {
    .native-input, .display-value {
  //    font-size: $font-size-5;
    }
  }

  &.size-md {
    .native-input, .display-value {
   //   font-size: $font-size-4;
    }
  }

  &.size-sm {
    .native-input, .display-value {
  //    font-size: $font-size-3;
    }
  }



}

:host(.has-focus) {
  .input-component {
   // color: $color-primary;
  //  border-color: $color-primary;
    outline: 0;
  //  box-shadow: 0 0 0 2px $color-blue-3;

    .input-clear-icon {
      display: inline-block;
    }
  }
}

:host(.danger) {
  /* This works */
  .input-component {
 //   border-color: $color-red-6;
  }

  .input-component:hover {
//    border-color: $color-red-6;
//    box-shadow: 0 0 0 2px $color-red-3;
  }
}

:host(.has-focus.danger) {
  .input-component {
  //  box-shadow: 0 0 0 2px $color-red-3;
  }
}

:host(.no-border) {
  .input-component {
    border: 0;
  }
}
